/*******************************************************************************

*******************************************************************************/
CGVTable STRUCT(NAME) = 
{
/*private:*/
  ID,             /* cgraph_integer_t __type__; */
  sizeof(TYPE),   /* cgraph_size_t __size__;    */
  sizeof(TYPE *),   /* cgraph_size_t __msize__;   */
  STRING(TYPE),   /* cgraph_char_t *__name__;   */

/*public:*/
  FUNCTION(NAME, type),    /* cgraph_integer_t (*type)(void);  */
  FUNCTION(NAME, size),    /* cgraph_size_t (*size)(void);  */
  FUNCTION(NAME, msize),   /* cgraph_size_t (*msize)(void);  */
  FUNCTION(NAME, name),    /* cgraph_char_t *(*name)(void);  */
  FUNCTION(NAME, calloc),  /* void *(*calloc)(const cgraph_type_t type, const cgraph_size_t size);  */
  FUNCTION(NAME, free),    /* void *(*free)(void *gthis);  */
  FUNCTION(NAME, copy),    /* void *(*copy)(const void *cthis, const cgraph_size_t size);  */
  FUNCTION(NAME, dsize),   /* cgraph_size_t (*dsize)(const void *cthis);  */
  FUNCTION(NAME, hash)     /* cgraph_size_t (*hash)(const void *cthis);  */
};

cgraph_type_t FUNCTION(NAME, type)(void)
{
  return STRUCT(NAME).__type__;
}

cgraph_size_t FUNCTION(NAME, size)(void)
{
  return STRUCT(NAME).__size__;
}

cgraph_size_t FUNCTION(NAME, msize)(void)
{
  return STRUCT(NAME).__msize__;
}

cgraph_char_t *FUNCTION(NAME, name)(void)
{
  return STRUCT(NAME).__name__;
}

void *FUNCTION(NAME, calloc)(const cgraph_type_t type, const cgraph_size_t size)
{
  TYPE *cthis = (TYPE *)cgraph_calloc(1, sizeof(TYPE));
  if(NULL != cthis)
  {
    cthis->data = cgraph_calloc(size+1, type);
    if(NULL != cthis->data)
    { cthis->size = size; }
    else
    { cgraph_free(cthis); }
  }

  return cthis;
}

void *FUNCTION(NAME, realloc)(void *cthis, const cgraph_size_t old_size, cgraph_size_t new_size, cgraph_boolean_t *error)
{
  TYPE *new_cthis = (TYPE *)cthis;
  if(NULL != new_cthis && NULL != error)
  {
    *error = CGRAPH_FALSE;
    new_cthis->data = cgraph_realloc(new_cthis->data, new_cthis->size, new_size, 1, error);
    new_cthis->size = CGRAPH_TRUE != *error ? new_size : new_cthis->size;
  }

  return new_cthis;
}

void *FUNCTION(NAME, copy)(const void *cthis, const cgraph_size_t size)
{
  TYPE *new_cthis = NULL;

  return new_cthis;
}

void FUNCTION(NAME, free)(void *cthis)
{
   TYPE *new_cthis = (TYPE *)cthis;
   cgraph_size_t i;
   for(i=0; i<new_cthis->size; i++)
   {

   }
   
   cgraph_free(new_cthis);
}

cgraph_size_t FUNCTION(NAME, dsize)(const void *cthis)
{
  TYPE *new_cthis = (TYPE *)cthis;
  return new_cthis->size;
}