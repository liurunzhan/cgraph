#include "template_base.ct"

#ifndef TYPE_WITH_DATA
static const TYPE __zero__ = ZERO;
static const TYPE __one__ = ONE;
#endif

CGRAPH_INLINE static void *FUNCTION(NAME, _update)(void *cthis,
                                                   const cgraph_type_t type,
                                                   const cgraph_size_t len,
                                                   const cgraph_size_t size) {
  TYPE *_cthis = (TYPE *)cthis;
#ifdef TYPE_WITH_DATA
  if (NULL != _cthis) {
    _cthis->len = ((0 < len) ? len : _cthis->len);
    _cthis->size = ((_cthis->size < size) ? size : _cthis->size);
#if (CGRAPH_STDC_VERSION >= 199901L)
    _cthis->data = (DATA_TYPE *)(&(_cthis->root[CGRAPH_MEMORY_HEADER_SIZE]));
#else
    _cthis->root =
        (DATA_TYPE *)CGRAPH_PTRADDR2V(_cthis, FUNCTION(NAME, tsize)());
    _cthis->data = _cthis->root + CGRAPH_MEMORY_HEADER_SIZE;
#endif /**< CGRAPH_STDC_VERSION */
    _cthis->data[_cthis->len] = 0;
  }
#endif
  return _cthis;
}

CGRAPH_INLINE cgraph_size_t FUNCTION(NAME, len)(const TYPE *cthis) {
#ifdef TYPE_WITH_DATA
  return CGRAPH_LEN(cthis);
#else
  return NULL != cthis ? 1 : 0;
#endif
}

CGRAPH_INLINE cgraph_size_t FUNCTION(NAME, size)(const TYPE *cthis) {
#ifdef TYPE_WITH_DATA
  return CGRAPH_SIZE(cthis);
#else
  return NULL != cthis ? 1 : 0;
#endif
}

CGRAPH_INLINE cgraph_size_t FUNCTION(NAME, msize)(const cgraph_type_t type,
                                                  const cgraph_size_t size) {
#ifdef TYPE_WITH_DATA
  return sizeof(TYPE) + (size + CGRAPH_MEMORY_FREED_SIZE) * sizeof(DATA_TYPE);
#else
  return (size + CGRAPH_MEMORY_FREED_SIZE) * sizeof(TYPE);
#endif
}

TYPE *FUNCTION(NAME, calloc)(const cgraph_type_t type,
                             const cgraph_size_t size) {
  TYPE *cthis = (TYPE *)cgraph_calloc(FUNCTION(NAME, msize)(type, size));

  return FUNCTION(NAME, _update)(cthis, type, 0, size);
}

TYPE *FUNCTION(NAME, realloc)(TYPE *cthis, const cgraph_type_t type,
                              const cgraph_size_t old_size,
                              cgraph_size_t new_size, cgraph_bool_t *error) {
#ifdef TYPE_WITH_DATA
  TYPE *_cthis = cthis;
  cgraph_size_t _size =
      ((NULL != _cthis) ? FUNCTION(NAME, msize)(type, _cthis->size) : 0);
  _cthis = (TYPE *)cgraph_realloc(_cthis, _size,
                                  FUNCTION(NAME, msize)(type, new_size), error);
  if ((NULL != error) && (CGRAPH_FALSE == *error)) {
    _cthis = FUNCTION(NAME, _update)(_cthis, type, -1, new_size);
  }
#else
  TYPE *_cthis =
      (TYPE *)cgraph_realloc(cthis, FUNCTION(NAME, msize)(type, old_size),
                             FUNCTION(NAME, msize)(type, new_size), error);
#endif

  return _cthis;
}

TYPE *FUNCTION(NAME, copy)(const TYPE *cthis, const cgraph_size_t size) {
  TYPE *_cthis = (TYPE *)cthis, *_object = NULL;
  if (NULL != _cthis) {
#ifdef TYPE_WITH_DATA
    cgraph_size_t _size = _cthis->size;
    _object = FUNCTION(NAME, calloc)(DATA_ID, _size);
    _object = (TYPE *)cgraph_memcpy(_object, _cthis,
                                    FUNCTION(NAME, msize)(DATA_ID, _size));
    _object = FUNCTION(NAME, _update)(_object, DATA_ID, -1, _size);
#else
    _object = FUNCTION(NAME, calloc)(ID, size);
    _object =
        (TYPE *)cgraph_memcpy(_object, _cthis, FUNCTION(NAME, msize)(ID, size));
#endif
  }

  return _object;
}

void FUNCTION(NAME, free)(TYPE *cthis) { cgraph_free(cthis); }

TYPE *FUNCTION(NAME, memcpy)(TYPE *x, const TYPE *y, const cgraph_size_t size) {
  TYPE *_x = (TYPE *)x, *_y = (TYPE *)y;
  if (NULL != _x || NULL != _y) {
#ifdef TYPE_WITH_DATA
    cgraph_size_t _size = CGRAPH_MIN(_x->size, _y->size);
    _x = cgraph_memcpy(_x, _y, FUNCTION(NAME, msize)(DATA_ID, _size));
    _x = FUNCTION(NAME, _update)(_x, DATA_ID, -1, _size);
#else
    _x = cgraph_memcpy(_x, _y, FUNCTION(NAME, msize)(ID, size));
#endif
  }

  return _x;
}

TYPE *FUNCTION(NAME, init)(TYPE *cthis, const TYPE *data,
                           const cgraph_size_t size) {
#ifdef TYPE_WITH_DATA
  if (NULL != data) {
    cgraph_size_t _size = CGRAPH_SIZE(cthis),
                  _dsize = (size > 0 ? size : CGRAPH_SIZE(data));
    cgraph_bool_t error = CGRAPH_FALSE;
    cthis = FUNCTION(NAME, realloc)(cthis, DATA_ID, _size, _dsize, &error);
    if (CGRAPH_FALSE == error) {
      cthis->data = cgraph_memcpy(cthis->data, data->data,
                                  FUNCTION(NAME, msize)(DATA_ID, _dsize));
      cthis = FUNCTION(NAME, _update)(cthis, DATA_ID, _dsize, -1);
    }
  }
#else
  cthis = cgraph_memcpy(cthis, data, FUNCTION(NAME, msize)(ID, size));
#endif

  return cthis;
}

#ifdef TYPE_WITH_DATA
TYPE *FUNCTION(NAME, initd)(TYPE *cthis, const DATA_TYPE *data,
                            const cgraph_size_t size) {
  if (NULL != data) {
    cgraph_size_t _size = CGRAPH_SIZE(cthis);
    cgraph_bool_t error = CGRAPH_FALSE;
    cthis = FUNCTION(NAME, realloc)(cthis, DATA_ID, _size, size, &error);
    if (CGRAPH_FALSE == error) {
      cthis->data =
          cgraph_memcpy(cthis->data, data, size * FUNCTION(NAME, tdatsize)());
      cthis->len = size;
      cthis->data[size] = 0;
    }
  }
#else
TYPE *FUNCTION(NAME, initd)(TYPE *cthis, const TYPE *data,
                            const cgraph_size_t size) {
  cthis = cgraph_memcpy(cthis, data, FUNCTION(NAME, msize)(ID, size));
#endif

  return cthis;
}

#ifdef TYPE_WITH_DATA
CGRAPH_INLINE cgraph_bool_t FUNCTION(NAME, isempty)(const TYPE *cthis) {
  return CGRAPH_TEST((NULL == cthis) || (0 == cthis->len));
}
#else
CGRAPH_INLINE cgraph_bool_t FUNCTION(NAME, isempty)(const TYPE cthis) {
  return CGRAPH_TRUE;
}
#endif

#ifdef TYPE_WITH_DATA
CGRAPH_INLINE cgraph_bool_t FUNCTION(NAME, isnumber)(const TYPE *cthis) {
  return CGRAPH_FALSE;
}
#else
CGRAPH_INLINE cgraph_bool_t FUNCTION(NAME, isnumber)(const TYPE cthis) {
  return CGRAPH_FALSE;
}
#endif

#ifdef TYPE_WITH_DATA
CGRAPH_INLINE cgraph_int_t FUNCTION(NAME, cmp_signbit)(const TYPE *x,
                                                       const TYPE *y) {
#else
CGRAPH_INLINE cgraph_int_t FUNCTION(NAME, cmp_signbit)(const TYPE x,
                                                       const TYPE y) {
#endif
  return CGRAPH_TEST(FUNCTION(NAME, signbit)(x) == FUNCTION(NAME, signbit)(y));
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, zeros1v)(TYPE **cthis, const cgraph_size_t size) {
#else
TYPE *FUNCTION(NAME, zeros1v)(TYPE *cthis, const cgraph_size_t size) {
#endif
  if (NULL != cthis) {
    cgraph_size_t i;
    for (i = 0; i < size; i++) {
#ifdef TYPE_WITH_DATA
      cthis[i] = FUNCTION(NAME, zero)(cthis[i], 0);
#else
      cthis[i] = FUNCTION(NAME, zero)();
#endif
    }
  }

  return cthis;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, ones1v)(TYPE **cthis, const cgraph_size_t size) {
#else
TYPE *FUNCTION(NAME, ones1v)(TYPE *cthis, const cgraph_size_t size) {
#endif
  if (NULL != cthis) {
    cgraph_size_t i;
    for (i = 0; i < size; i++) {
#ifdef TYPE_WITH_DATA
      cthis[i] = FUNCTION(NAME, one)(cthis[i], 0);
#else
      cthis[i] = FUNCTION(NAME, one)();
#endif
    }
  }

  return cthis;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, randoms1v)(TYPE **cthis, const cgraph_size_t size) {
#else
TYPE *FUNCTION(NAME, randoms1v)(TYPE *cthis, const cgraph_size_t size) {
#endif
  if (NULL != cthis) {
    cgraph_size_t i;
    for (i = 0; i < size; i++) {
#ifdef TYPE_WITH_DATA
      cthis[i] = FUNCTION(NAME, random)(cthis[i], 0);
#else
      cthis[i] = FUNCTION(NAME, random)();
#endif
    }
  }

  return cthis;
}

#ifdef TYPE_WITH_DATA
void FUNCTION(NAME, ascsort1v)(TYPE **cthis, const cgraph_size_t start,
                               const cgraph_size_t end) {
  cgraph_size_t left = start, right = end;
  TYPE *key = cthis[left];
#else
void FUNCTION(NAME, ascsort1v)(TYPE *cthis, const cgraph_size_t start,
                               const cgraph_size_t end) {
  cgraph_size_t left = start, right = end;
  TYPE key = cthis[left];
#endif

  while (left < right) {
    while ((left < right) && (GE(cthis[right], key))) {
      right--;
    }
    cthis[left] = cthis[right];
    while ((left < right) && (LE(cthis[left], key))) {
      left++;
    }
    cthis[right] = cthis[left];
  }
  cthis[left] = key;
  FUNCTION(NAME, ascsort1v)
  (cthis, start, left - 1);
  FUNCTION(NAME, ascsort1v)
  (cthis, left + 1, end);
}

#ifdef TYPE_WITH_DATA
void FUNCTION(NAME, descsort1v)(TYPE **cthis, const cgraph_size_t start,
                                const cgraph_size_t end) {
  cgraph_size_t left = start, right = end;
  TYPE *key = cthis[left];
#else
void FUNCTION(NAME, descsort1v)(TYPE *cthis, const cgraph_size_t start,
                                const cgraph_size_t end) {
  cgraph_size_t left = start, right = end;
  TYPE key = cthis[left];
#endif
  while (left < right) {
    while ((left < right) && (LE(cthis[right], key))) {
      right--;
    }
    cthis[left] = cthis[right];
    while ((left < right) && (GE(cthis[left], key))) {
      left++;
    }
    cthis[right] = cthis[left];
  }
  cthis[left] = key;
  FUNCTION(NAME, descsort1v)
  (cthis, start, left - 1);
  FUNCTION(NAME, descsort1v)
  (cthis, left + 1, end);
}

#ifdef TYPE_WITH_DATA
cgraph_bool_t FUNCTION(NAME, cmp1v)(const TYPE **x, const TYPE **y,
                                    const cgraph_size_t len,
                                    cgraph_pfunc3_t iter) {
  TYPE **_x = (TYPE **)x, **_y = (TYPE **)y;
#else
cgraph_bool_t FUNCTION(NAME, cmp1v)(const TYPE *x, const TYPE *y,
                                    const cgraph_size_t len,
                                    cgraph_pfunc3_t iter) {
  TYPE *_x = (TYPE *)x, *_y = (TYPE *)y;
#endif
  cgraph_bool_t flag = CGRAPH_FALSE;
  cgraph_size_t i;
  for (i = 0; i < len; i++, _x++, _y++) {
    iter(_x, _y, &flag);
    if (CGRAPH_FALSE == flag) {
      break;
    }
  }

  return flag;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, iter1v)(TYPE **x, const cgraph_size_t len,
                              cgraph_pfunc1_t iter)
#else
TYPE *FUNCTION(NAME, iter1v)(TYPE *x, const cgraph_size_t len,
                             cgraph_pfunc1_t iter)
#endif
{
  cgraph_size_t i;
  for (i = 0; i < len; i++) {
    iter((TYPE *)&x[i]);
  }

  return x;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, iter2v)(const TYPE **x, TYPE **y, const cgraph_size_t len,
                              cgraph_pfunc2_t iter)
#else
TYPE *FUNCTION(NAME, iter2v)(const TYPE *x, TYPE *y, const cgraph_size_t len,
                             cgraph_pfunc2_t iter)
#endif
{
  cgraph_size_t i;
  for (i = 0; i < len; i++) {
    iter((TYPE *)&x[i], &y[i]);
  }

  return y;
}

#ifdef TYPE_WITH_DATA
TYPE *FUNCTION(NAME, iter2vc)(const TYPE **x, TYPE *y, const cgraph_size_t len,
                              cgraph_pfunc2_t iter)
#else
TYPE FUNCTION(NAME, iter2vc)(const TYPE *x, TYPE y, const cgraph_size_t len,
                             cgraph_pfunc2_t iter)
#endif
{
  cgraph_size_t i;
  for (i = 0; i < len; i++) {
    iter((TYPE *)&x[i], (TYPE *)&y);
  }

  return y;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, iter3v)(const TYPE **x, const TYPE **y, TYPE **z,
                              const cgraph_size_t len, cgraph_pfunc3_t iter)
#else
TYPE *FUNCTION(NAME, iter3v)(const TYPE *x, const TYPE *y, TYPE *z,
                             const cgraph_size_t len, cgraph_pfunc3_t iter)
#endif
{
  cgraph_size_t i;
  for (i = 0; i < len; i++) {
    iter((TYPE *)&x[i], (TYPE *)&y[i], &z[i]);
  }

  return z;
}

#ifdef TYPE_WITH_DATA
TYPE *FUNCTION(NAME, iter3vvc)(const TYPE **x, const TYPE **y, TYPE *z,
                               const cgraph_size_t len, cgraph_pfunc3_t iter)
#else
TYPE FUNCTION(NAME, iter3vvc)(const TYPE *x, const TYPE *y, TYPE z,
                              const cgraph_size_t len, cgraph_pfunc3_t iter)
#endif
{
  cgraph_size_t i;
  for (i = 0; i < len; i++) {
    iter((TYPE *)&x[i], (TYPE *)&y[i], (TYPE *)&z);
  }

  return z;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, iter3vcv)(const TYPE **x, const TYPE *y, TYPE **z,
                                const cgraph_size_t len, cgraph_pfunc3_t iter)
#else
TYPE *FUNCTION(NAME, iter3vcv)(const TYPE *x, const TYPE y, TYPE *z,
                               const cgraph_size_t len, cgraph_pfunc3_t iter)
#endif
{
  cgraph_size_t i;
  for (i = 0; i < len; i++) {
    iter((TYPE *)&x[i], (TYPE *)&y, &z[i]);
  }

  return z;
}

#ifdef TYPE_WITH_DATA
TYPE *FUNCTION(NAME, iter3cvc)(const TYPE *x, const TYPE **y, TYPE *z,
                               const cgraph_size_t len, cgraph_pfunc3_t iter)
#else
TYPE FUNCTION(NAME, iter3cvc)(const TYPE x, const TYPE *y, TYPE z,
                              const cgraph_size_t len, cgraph_pfunc3_t iter)
#endif
{
  cgraph_size_t i;
  for (i = 0; i < len; i++) {
    iter((TYPE *)&x, (TYPE *)&y[i], (TYPE *)&z);
  }

  return z;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, swap)(TYPE **cthis, const cgraph_size_t xstart,
                            const cgraph_size_t ystart, const cgraph_size_t len)
#else
TYPE *FUNCTION(NAME, swap)(TYPE *cthis, const cgraph_size_t xstart,
                           const cgraph_size_t ystart, const cgraph_size_t len)
#endif
{
  cgraph_size_t i, _xstart = xstart, _ystart = ystart;
  for (i = 0; i < len; i++, _xstart++, _ystart++) {
    SWAP(cthis[_xstart], cthis[_ystart]);
  }

  return cthis;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, swap_jump)(TYPE **cthis, const cgraph_size_t xoffset,
                                 const cgraph_size_t yoffset,
                                 const cgraph_size_t unit,
                                 const cgraph_size_t len)
#else
TYPE *FUNCTION(NAME, swap_jump)(TYPE *cthis, const cgraph_size_t xoffset,
                                const cgraph_size_t yoffset,
                                const cgraph_size_t unit,
                                const cgraph_size_t len)
#endif
{
  cgraph_size_t i, _xindex = xoffset, _yindex = yoffset;
  for (i = 0; i < len; i++, _xindex += unit, _yindex += unit) {
    SWAP(cthis[_xindex], cthis[_yindex]);
  }

  return cthis;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, trans)(TYPE **cthis, const cgraph_size_t row,
                             const cgraph_size_t col)
#else
TYPE *FUNCTION(NAME, trans)(TYPE *cthis, const cgraph_size_t row,
                            const cgraph_size_t col)
#endif
{
  cgraph_size_t i, j;
  for (i = 0; i < row; i++) {
    cgraph_size_t row_i = i * row;
    for (j = i + 1; j < col; j++) {
      SWAP(cthis[row_i + j], cthis[col * j + i]);
    }
  }

  return cthis;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, subsym)(TYPE **cthis, const cgraph_size_t row,
                              const cgraph_size_t col)
#else
TYPE *FUNCTION(NAME, subsym)(TYPE *cthis, const cgraph_size_t row,
                             const cgraph_size_t col)
#endif
{
  cgraph_size_t i, j;
  for (i = 0; i < row; i++) {
    cgraph_size_t row_i = i * row;
    for (j = i + 1; j < col; j++) {
      SWAP(cthis[row_i + j], cthis[col * j + i]);
    }
  }

  return cthis;
}

#ifdef TYPE_WITH_DATA
cgraph_bool_t FUNCTION(NAME, issubsym)(TYPE **cthis, const cgraph_size_t row,
                                       const cgraph_size_t col)
#else
cgraph_bool_t FUNCTION(NAME, issubsym)(TYPE *cthis, const cgraph_size_t row,
                                       const cgraph_size_t col)
#endif
{
  cgraph_bool_t flag = CGRAPH_TRUE;
  cgraph_size_t i, j;
  for (i = 0; i < row; i++) {
    cgraph_size_t row_i = i * row;
    for (j = 0; j < col; j++) {
      if (NE(cthis[row_i + j], cthis[col * j + i])) {
        flag = CGRAPH_FALSE;
        break;
      }
    }
  }

  return flag;
}

#ifdef TYPE_WITH_DATA
cgraph_bool_t FUNCTION(NAME, isupptri)(TYPE **cthis, const cgraph_size_t row,
                                       const cgraph_size_t col)
#else
cgraph_bool_t FUNCTION(NAME, isupptri)(TYPE *cthis, const cgraph_size_t row,
                                       const cgraph_size_t col)
#endif
{
  cgraph_bool_t flag = CGRAPH_TRUE;
  cgraph_size_t i, j;
  for (i = 0; i < row; i++) {
    cgraph_size_t row_i = i * row;
    for (j = 0; j < i; j++) {
      if (!FUNCTION(NAME, iszero)(cthis[row_i + j])) {
        flag = CGRAPH_FALSE;
        break;
      }
    }
  }

  return flag;
}

#ifdef TYPE_WITH_DATA
cgraph_bool_t FUNCTION(NAME, islowtri)(TYPE **cthis, const cgraph_size_t row,
                                       const cgraph_size_t col)
#else
cgraph_bool_t FUNCTION(NAME, islowtri)(TYPE *cthis, const cgraph_size_t row,
                                       const cgraph_size_t col)
#endif
{
  cgraph_bool_t flag = CGRAPH_TRUE;
  cgraph_size_t i, j;
  for (i = 0; i < row; i++) {
    cgraph_size_t row_i = i * row;
    for (j = i + 1; j < col; j++) {
      if (!FUNCTION(NAME, iszero)(cthis[row_i + j])) {
        flag = CGRAPH_FALSE;
        break;
      }
    }
  }

  return flag;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, rot1I)(TYPE **cthis, const cgraph_size_t row,
                             const cgraph_size_t col)
#else
TYPE *FUNCTION(NAME, rot1I)(TYPE *cthis, const cgraph_size_t row,
                            const cgraph_size_t col)
#endif
{
  cgraph_size_t i, j;
  for (i = 0; i < row / 2; i++) {
    cgraph_size_t start = i, end = col - 1 - i;
    for (j = start; j < end; j++) {
      cgraph_size_t end2 = col - 1 - j;
      ROR4(cthis[i * row + j], cthis[j * col + end], cthis[end * row + end2],
           cthis[end2 * col + i]);
    }
  }

  return cthis;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, rot2I)(TYPE **cthis, const cgraph_size_t row,
                             const cgraph_size_t col)
#else
TYPE *FUNCTION(NAME, rot2I)(TYPE *cthis, const cgraph_size_t row,
                            const cgraph_size_t col)
#endif
{
  cgraph_size_t i, j;
  for (i = 0; i < row; i++) {
    cgraph_size_t row_i = i * row;
    for (j = i + 1; j < col; j++) {
      SWAP(cthis[row_i + j], cthis[col * j + i]);
    }
  }

  return cthis;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, rot3I)(TYPE **cthis, const cgraph_size_t row,
                             const cgraph_size_t col)
#else
TYPE *FUNCTION(NAME, rot3I)(TYPE *cthis, const cgraph_size_t row,
                            const cgraph_size_t col)
#endif
{
  cgraph_size_t i, j;
  for (i = 0; i < row; i++) {
    cgraph_size_t row_i = i * row;
    for (j = i + 1; j < col; j++) {
      SWAP(cthis[row_i + j], cthis[col * j + i]);
    }
  }

  return cthis;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, rot4I)(TYPE **cthis, const cgraph_size_t row,
                             const cgraph_size_t col)
#else
TYPE *FUNCTION(NAME, rot4I)(TYPE *cthis, const cgraph_size_t row,
                            const cgraph_size_t col)
#endif
{
  return cthis;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, rot_1I)(TYPE **cthis, const cgraph_size_t row,
                              const cgraph_size_t col)
#else
TYPE *FUNCTION(NAME, rot_1I)(TYPE *cthis, const cgraph_size_t row,
                             const cgraph_size_t col)
#endif
{
  cgraph_size_t i, j;
  for (i = 0; i < row; i++) {
    cgraph_size_t row_i = i * row;
    for (j = i + 1; j < col; j++) {
      SWAP(cthis[row_i + j], cthis[col * j + i]);
    }
  }

  return cthis;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, rot_2I)(TYPE **cthis, const cgraph_size_t row,
                              const cgraph_size_t col)
#else
TYPE *FUNCTION(NAME, rot_2I)(TYPE *cthis, const cgraph_size_t row,
                             const cgraph_size_t col)
#endif
{
  cgraph_size_t i, j;
  for (i = 0; i < row; i++) {
    cgraph_size_t row_i = i * row;
    for (j = i + 1; j < col; j++) {
      SWAP(cthis[row_i + j], cthis[col * j + i]);
    }
  }

  return cthis;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, rot_3I)(TYPE **cthis, const cgraph_size_t row,
                              const cgraph_size_t col)
#else
TYPE *FUNCTION(NAME, rot_3I)(TYPE *cthis, const cgraph_size_t row,
                             const cgraph_size_t col)
#endif
{
  cgraph_size_t i, j;
  for (i = 0; i < row; i++) {
    cgraph_size_t row_i = i * row;
    for (j = i + 1; j < col; j++) {
      SWAP(cthis[row_i + j], cthis[col * j + i]);
    }
  }

  return cthis;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, rot_4I)(TYPE **cthis, const cgraph_size_t row,
                              const cgraph_size_t col)
#else
TYPE *FUNCTION(NAME, rot_4I)(TYPE *cthis, const cgraph_size_t row,
                             const cgraph_size_t col)
#endif
{
  return cthis;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, ext2d)(TYPE **cthis, const cgraph_size_t old_row,
                             const cgraph_size_t old_col,
                             const cgraph_size_t ext_row,
                             const cgraph_size_t ext_col)
#else
TYPE *FUNCTION(NAME, ext2d)(TYPE *cthis, const cgraph_size_t old_row,
                            const cgraph_size_t old_col,
                            const cgraph_size_t ext_row,
                            const cgraph_size_t ext_col)
#endif
{
  cgraph_size_t old_size = old_row * old_col * FUNCTION(NAME, tptrsize)(),
                new_size = (old_row + ext_row) * (old_col + ext_col) *
                           FUNCTION(NAME, tptrsize)();
  cgraph_bool_t error = CGRAPH_FALSE;
  cthis = cgraph_realloc(cthis, old_size, new_size, &error);
  if (CGRAPH_FALSE == error) {
  }

  return cthis;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, ext2d_zero)(TYPE **cthis, const cgraph_size_t old_row,
                                  const cgraph_size_t old_col,
                                  const cgraph_size_t ext_row,
                                  const cgraph_size_t ext_col)
#else
TYPE *FUNCTION(NAME, ext2d_zero)(TYPE *cthis, const cgraph_size_t old_row,
                                 const cgraph_size_t old_col,
                                 const cgraph_size_t ext_row,
                                 const cgraph_size_t ext_col)
#endif
{
  cgraph_size_t old_size = old_row * old_col * FUNCTION(NAME, tptrsize)(),
                new_size = (old_row + ext_row) * (old_col + ext_col) *
                           FUNCTION(NAME, tptrsize)();
  cgraph_bool_t error = CGRAPH_FALSE;
  cthis = cgraph_realloc(cthis, old_size, new_size, &error);
  if (CGRAPH_FALSE == error) {
  }

  return cthis;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME,
                ext3d)(TYPE **cthis, const cgraph_size_t old_x,
                       const cgraph_size_t old_y, const cgraph_size_t old_z,
                       const cgraph_size_t ext_x, const cgraph_size_t ext_y,
                       const cgraph_size_t ext_z)
#else
TYPE *FUNCTION(NAME,
               ext3d)(TYPE *cthis, const cgraph_size_t old_x,
                      const cgraph_size_t old_y, const cgraph_size_t old_z,
                      const cgraph_size_t ext_x, const cgraph_size_t ext_y,
                      const cgraph_size_t ext_z)
#endif
{
  cgraph_size_t old_size = old_x * old_y * old_z * FUNCTION(NAME, tptrsize)(),
                new_size = (old_x + ext_x) * (old_y + ext_y) * (old_z + ext_z) *
                           FUNCTION(NAME, tptrsize)();
  cgraph_bool_t error = CGRAPH_FALSE;
  cthis = cgraph_realloc(cthis, old_size, new_size, &error);
  if (CGRAPH_FALSE == error) {
  }

  return cthis;
}

#ifdef TYPE_WITH_DATA
TYPE **
FUNCTION(NAME, ext3d_zero)(TYPE **cthis, const cgraph_size_t old_x,
                           const cgraph_size_t old_y, const cgraph_size_t old_z,
                           const cgraph_size_t ext_x, const cgraph_size_t ext_y,
                           const cgraph_size_t ext_z)
#else
TYPE *FUNCTION(NAME,
               ext3d_zero)(TYPE *cthis, const cgraph_size_t old_x,
                           const cgraph_size_t old_y, const cgraph_size_t old_z,
                           const cgraph_size_t ext_x, const cgraph_size_t ext_y,
                           const cgraph_size_t ext_z)
#endif
{
  cgraph_size_t old_size = old_x * old_y * old_z * FUNCTION(NAME, tptrsize)(),
                new_size = (old_x + ext_x) * (old_y + ext_y) * (old_z + ext_z) *
                           FUNCTION(NAME, tptrsize)();
  cgraph_bool_t error = CGRAPH_FALSE;
  cthis = cgraph_realloc(cthis, old_size, new_size, &error);
  if (CGRAPH_FALSE == error) {
  }

  return cthis;
}

/**
 * A = [[0 1] [2 3]]
 * det A = 0 x 3 - 1 x 2
 */
#ifdef TYPE_WITH_DATA
TYPE *FUNCTION(NAME, det2x2)(const TYPE **cthis, TYPE *res0, TYPE *res1,
                             TYPE *res) {
  res0 = MUL(cthis[0], cthis[2], res0);
  res1 = MUL(cthis[1], cthis[3], res1);
  res = SUB(res0, res1, res);

  return res;
}
#else
TYPE *FUNCTION(NAME, det2x2)(const TYPE *cthis, TYPE *res0, TYPE *res1,
                             TYPE *res) {
  *res0 = MUL(cthis[0], cthis[2], *res0);
  *res1 = MUL(cthis[1], cthis[3], *res1);
  *res = SUB(*res0, *res1, *res);

  return res;
}
#endif

/**
 * A = [[0 1 2] [3 4 5] [6 7 8]]
 * det A = 0 x (4 x 8 - 5 x 7) - 1 x (3 x 8 - 5 x 6) + 2 x (3 x 7 - 4 x 6)
 *       = 0 x (4 x 8 - 5 x 7) + 1 x (5 x 6 - 3 x 8) + 2 x (3 x 7 - 4 x 6)
 */
#ifdef TYPE_WITH_DATA
TYPE *FUNCTION(NAME, det3x3)(const TYPE **cthis, TYPE *res0, TYPE *res1,
                             TYPE *res2, TYPE *res) {
  res0 = MUL(cthis[4], cthis[8], res0);
  res1 = MUL(cthis[5], cthis[7], res1);
  res2 = SUB(res0, res1, res2);
  res0 = MUL(cthis[3], cthis[8], res0);
  res1 = MUL(cthis[5], cthis[6], res1);
  res = SUB(res1, res0, res);
  res0 = ADD(res, res2, res0);
  res = ASSIGN(res0, res);
  res0 = MUL(cthis[3], cthis[7], res0);
  res1 = MUL(cthis[4], cthis[6], res1);
  res2 = SUB(res0, res1, res2);
  res0 = ADD(res, res2, res0);
  res = ASSIGN(res0, res);

  return res;
}
#else
TYPE *FUNCTION(NAME, det3x3)(const TYPE *cthis, TYPE *res0, TYPE *res1,
                             TYPE *res2, TYPE *res) {
  *res0 = MUL(cthis[4], cthis[8], *res0);
  *res1 = MUL(cthis[5], cthis[7], *res1);
  *res2 = SUB(*res0, *res1, *res2);
  *res0 = MUL(cthis[3], cthis[8], *res0);
  *res1 = MUL(cthis[5], cthis[6], *res1);
  *res = SUB(*res1, *res0, *res);
  *res0 = ADD(*res, *res2, *res0);
  *res = ASSIGN(*res0, *res);
  *res0 = MUL(cthis[3], cthis[7], *res0);
  *res1 = MUL(cthis[4], cthis[6], *res1);
  *res2 = SUB(*res0, *res1, *res2);
  *res0 = ADD(*res, *res2, *res0);
  *res = ASSIGN(*res0, *res);

  return res;
}
#endif

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, conv)(const TYPE **x, const TYPE **y,
                            const cgraph_size_t xlen, const cgraph_size_t ylen,
                            TYPE *res0, TYPE **res) {
  cgraph_size_t i, j;
  for (i = 0; i < (xlen + ylen - 1); i++) {
    for (j = 0; (j <= i) && (j < xlen); j++) {
      ZERO(res[i]);
      if (i < (ylen + j)) {
        res0 = MUL(x[j], y[i - j], res0);
        res[i] = ADD(res[i], res0, res[i]);
      }
    }
  }

  return res;
}
#else
TYPE *FUNCTION(NAME, conv)(const TYPE *x, const TYPE *y,
                           const cgraph_size_t xlen, const cgraph_size_t ylen,
                           TYPE *res0, TYPE *res) {
  cgraph_size_t i, j;
  for (i = 0; i < (xlen + ylen - 1); i++) {
    res[i] = __zero__;
    for (j = 0; (j <= i) && (j < xlen); j++) {
      if (i < (ylen + j)) {
        *res0 = MUL(x[j], y[i - j], *res0);
        res[i] = ADD(res[i], *res0, res[i]);
      }
    }
  }

  return res;
}
#endif
