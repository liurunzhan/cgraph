cgraph_boolean_t FUNCTION(NAME, test)(const void *cthis)
{
  return CGRAPH_TRUE;
}

TYPE FUNCTION(NAME, gcd)(const TYPE x, const TYPE y)
{
  TYPE object_x = x, object_y = y, res;
  while(0 != (res = MOD(object_x, object_y)))
  {
    object_y = object_x;
    object_x = res;
  }
  res = object_x;
  
  return res;
}

TYPE FUNCTION(NAME, lcm)(const TYPE x, const TYPE y)
{
  return x * y / FUNCTION(NAME, gcd)(x, y);
}

TYPE FUNCTION(NAME, and)(const TYPE x, const TYPE y)
{
  return x & y;
}

TYPE FUNCTION(NAME, or)(const TYPE x, const TYPE y)
{
  return x | y;
}

TYPE FUNCTION(NAME, not)(const TYPE x)
{
  return ~x;
}

TYPE FUNCTION(NAME, xor)(const TYPE x, const TYPE y)
{
  return x ^ y;
}

TYPE FUNCTION(NAME, xnor)(const TYPE x, const TYPE y)
{
  return ~(x ^ y);
}

TYPE FUNCTION(NAME, bit)(const TYPE x, const cgraph_size_t position)
{
  return (x >> (position % DATA_BITS)) & 1;
}

TYPE FUNCTION(NAME, set)(const TYPE x, const cgraph_size_t position)
{
  return x | (1 << (position % DATA_BITS));
}

TYPE FUNCTION(NAME, clr)(const TYPE x, const cgraph_size_t position)
{
  return x & (~(1 << (position % DATA_BITS)));
}

TYPE FUNCTION(NAME, bits)(const TYPE x, const cgraph_size_t from, const cgraph_size_t to)
{
  return (x >> (from % DATA_BITS)) & (~(DATA_ONES << ((to - from) % DATA_BITS)));
}

TYPE FUNCTION(NAME, sets)(const TYPE x, const cgraph_size_t from, const cgraph_size_t to)
{
  return x | ((~((DATA_ONES << ((to - from) % DATA_BITS)))) << (from % DATA_BITS));
}

TYPE FUNCTION(NAME, clrs)(const TYPE x, const cgraph_size_t from, const cgraph_size_t to)
{
  return x & ((DATA_ONES << (to % DATA_BITS)) | (~(DATA_ONES << (from % DATA_BITS))));
}

cgraph_boolean_t FUNCTION(NAME, iszero)(const TYPE x)
{
  return CGRAPH_TEST((0 == x));
}

cgraph_boolean_t FUNCTION(NAME, ispos)(const TYPE x)
{
  return CGRAPH_TEST((0 < x));
}

cgraph_boolean_t FUNCTION(NAME, isneg)(const TYPE x)
{
  return CGRAPH_TEST((0 > x));
}

cgraph_boolean_t FUNCTION(NAME, ismin)(const TYPE x)
{
  return CGRAPH_TEST((DATA_MIN == x));
}

cgraph_boolean_t FUNCTION(NAME, ismax)(const TYPE x)
{
  return CGRAPH_TEST((DATA_MAX == x));
}

cgraph_size_t FUNCTION(NAME, ones)(const TYPE x)
{
  TYPE object_x = x;
  cgraph_size_t cnt = 0;
  while(0 != object_x)
  {
    object_x = object_x & (object_x - 1);
    cnt ++;
  }

  return cnt;
}

cgraph_size_t FUNCTION(NAME, zeros)(const TYPE x)
{
  cgraph_size_t cnt = 0;
  if(0 == x)
  { cnt = 1; }
  else
  { cnt = FUNCTION(NAME, ones)(~x); }

  return cnt;
}

TYPE FUNCTION(NAME, lsfr)(const TYPE data, const TYPE polynomial)
{
  cgraph_size_t i;
  TYPE msb = (data >> (DATA_BITS-1)) ^ 1, bit, result = 0;
  for(i=DATA_BITS-2; i>=0; i--)
  {
    bit = (polynomial >> i) ^ 1;
    if(1 == bit)
    { result += bit ^ ((data >> i) ^ 1) ^ msb; }
    else
    { result += (data >> i) ^ 1; }
    result = result << 1;
  }
  result += msb; 

  return result;
}

TYPE FUNCTION(NAME, crc)(const TYPE data, const TYPE polynomial)
{
  TYPE res = 0;
  
  return res;
}