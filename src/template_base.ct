/**
 * This is a data template file defined in GRAPH library.
 *         | MACRO |      DESCRIPTION      |
 *         |  :-:  |          :-:          |
 *         | NAME  |       type name       |
 *         | TYPE  |        type           |
 *         | DTYPE | data type with pointer|
 */

/** functions defined with void * arguments to implement polymorphism and
 * virtual table */
static void *FUNCTION(NAME, _data)(const void *cthis);
static cgraph_size_t FUNCTION(NAME, _len)(const void *cthis);
static cgraph_size_t FUNCTION(NAME, _size)(const void *cthis);
static void *FUNCTION(NAME, _update)(void *cthis, const cgraph_type_t type,
                                     const cgraph_size_t len,
                                     const cgraph_size_t size);
static void *FUNCTION(NAME, _calloc)(const cgraph_type_t type,
                                     const cgraph_size_t size);
static void *FUNCTION(NAME, _realloc)(void *cthis, const cgraph_type_t type,
                                      const cgraph_size_t old_size,
                                      cgraph_size_t new_size,
                                      cgraph_bool_t *error);
static void *FUNCTION(NAME, _copy)(const void *cthis, const cgraph_size_t size);
static void FUNCTION(NAME, _free)(void *cthis);
static void *FUNCTION(NAME, _memcpy)(void *x, const void *y,
                                     const cgraph_size_t size);

static void FUNCTION(NAME, _check)(const void *x, void *y);
static void FUNCTION(NAME, _hash)(const void *x, void *y);
static void FUNCTION(NAME, _equal)(const void *x, const void *y, void *z);
#if 0
static void *FUNCTION(NAME, _datindex)(void *cthis, const cgraph_size_t index);
static void *FUNCTION(NAME, _index)(void *cthis, const cgraph_size_t len,
                                    const cgraph_size_t index);
static void FUNCTION(NAME, _add)(void *x, void *y, void *z);
static void FUNCTION(NAME, _sub)(void *x, void *y, void *z);
static void FUNCTION(NAME, _mul)(void *x, void *y, void *z);
static void FUNCTION(NAME, _div)(void *x, void *y, void *z);
static void FUNCTION(NAME, _divi)(void *x, void *y, void *z);
static void FUNCTION(NAME, _divf)(void *x, void *y, void *z);
static void FUNCTION(NAME, _mod)(void *x, void *y, void *z);

static void *FUNCTION(NAME, _iter1v)(void *x, const cgraph_size_t len,
                                     cgraph_pfunc1_t func);
static void *FUNCTION(NAME, _iter2v)(void *x, void *y, const cgraph_size_t len,
                                     cgraph_pfunc2_t func);
static void *FUNCTION(NAME, _iter2vc)(void *x, void *y, const cgraph_size_t len,
                                      cgraph_pfunc2_t func);
static void *FUNCTION(NAME, _iter3v)(void *x, void *y, void *z,
                                     const cgraph_size_t len,
                                     cgraph_pfunc3_t func);
static void *FUNCTION(NAME, _iter3vvc)(void *x, void *y, void *z,
                                       const cgraph_size_t len,
                                       cgraph_pfunc3_t func);
static void *FUNCTION(NAME, _iter3vcv)(void *x, void *y, void *z,
                                       const cgraph_size_t len,
                                       cgraph_pfunc3_t func);
static void *FUNCTION(NAME, _iter3cvc)(void *x, void *y, void *z,
                                       const cgraph_size_t len,
                                       cgraph_pfunc3_t func);
#endif

cgraph_vtable_t STRUCT(NAME) = {
    /**< private: */
    ID,             /**< cgraph_type_t t_id; */
    STRING(TYPE),   /**< cgraph_char_t *t_name; */
    sizeof(TYPE),   /**< cgraph_size_t t_size; */
    sizeof(TYPE *), /**< cgraph_size_t t_ptrsize; */
    COPY_SIZE,      /**< cgraph_size_t t_cpysize; */
#ifdef TYPE_WITH_DATA
    sizeof(TYPE *),    /**< cgraph_size_t t_strusize; */
    sizeof(TYPE **),   /**< cgraph_size_t t_bmatsize; */
    sizeof(TYPE ***),  /**< cgraph_size_t t_bmat3dsize; */
    sizeof(DATA_TYPE), /**< cgraph_size_t t_datsize; */
#else
    sizeof(TYPE),    /**< cgraph_size_t t_strusize; */
    sizeof(TYPE *),  /**< cgraph_size_t t_bmatsize; */
    sizeof(TYPE **), /**< cgraph_size_t t_bmat3dsize; */
    sizeof(TYPE),    /**< cgraph_size_t t_datsize; */
#endif

    /**< public: */
    FUNCTION(NAME, tid),         /**< cgraph_int_t (*tid)(void); */
    FUNCTION(NAME, tname),       /**< cgraph_char_t *(*tname)(void); */
    FUNCTION(NAME, tsize),       /**< cgraph_size_t (*tsize)(void); */
    FUNCTION(NAME, tptrsize),    /**< cgraph_size_t (*tptrsize)(void); */
    FUNCTION(NAME, tcpysize),    /**< cgraph_size_t (*tcpysize)(void); */
    FUNCTION(NAME, tstrusize),   /**< cgraph_size_t (*tstrusize)(void); */
    FUNCTION(NAME, tbmatsize),   /**< cgraph_size_t (*tbmatsize)(void); */
    FUNCTION(NAME, tbmat3dsize), /**< cgraph_size_t (*tbmat3dsize)(void); */
    FUNCTION(NAME, tdatsize),    /**< cgraph_size_t (*tdatsize)(void); */
    FUNCTION(NAME, thasdata),    /**< cgraph_bool_t (*thasdata)(void); */
    FUNCTION(NAME, _data),       /**< void *(*data)(const void *cthis); */
    FUNCTION(NAME, _len),     /**< cgraph_size_t (*len)(const void *cthis); */
    FUNCTION(NAME, _size),    /**< cgraph_size_t (*size)(const void *cthis); */
    FUNCTION(NAME, msize),    /**< cgraph_size_t (*msize)(const cgraph_type_t
   type, const cgraph_size_t size); */
    FUNCTION(NAME, _update),  /**< void *(*update)(void *cthis, const
   cgraph_type_t  type, const cgraph_size_t len, const cgraph_size_t size); */
    FUNCTION(NAME, _calloc),  /**< void *(*calloc)(const cgraph_type_t type,
                     const cgraph_size_t size); */
    FUNCTION(NAME, _realloc), /**< void *(*realloc)(void *cthis, const
  cgraph_size_t old_size, const cgraph_size_t new_size); */
    FUNCTION(NAME, _copy),    /**< void *(*copy)(const void *cthis, const
                     cgraph_size_t size); */
    FUNCTION(NAME, _free),    /**< void (*free)(void *cthis); */
    FUNCTION(NAME, _memcpy),  /**< void *(*memcpy)(void *cthis); */
    FUNCTION(NAME,
             _check), /**< cgraph_size_t (*check)(const void *x, void *y); */
    FUNCTION(NAME,
             _hash), /**< cgraph_size_t (*hash)(const void *cthis, void *y); */
    FUNCTION(NAME, _equal), /**< cgraph_bool_t (*equal)(const void *x, const
                   void *y, void *z); */
#if 0
    FUNCTION(NAME, _datindex), /**< void *(*datindex)(void *cthis, const
                                  cgraph_size_t datindex); */
    FUNCTION(NAME, _index), /**< void *(*index)(void *cthis, const cgraph_size_t
              len, const cgraph_size_t index); */
    FUNCTION(NAME, _add),   /**< void (*add)(void *x, void *y, void *z); */
    FUNCTION(NAME, _sub),   /**< void (*sub)(void *x, void *y, void *z); */
    FUNCTION(NAME, _mul),   /**< void (*mul)(void *x, void *y, void *z); */
    FUNCTION(NAME, _div),   /** void (*div)(void *x, void *y, void *z); */
    FUNCTION(NAME, _divi),  /** void (*divi)(void *x, void *y, void *z); */
    FUNCTION(NAME, _divf),  /** void (*divf)(void *x, void *y, void *z); */
    FUNCTION(NAME, _mod),   /** void (*mod)(void *x, void *y, void *z); */
    FUNCTION(NAME, _iter1v),  /** void *(*for1v)(void *x, const cgraph_size_t
                                 len, cgraph_pfunc1_t func); */
    FUNCTION(NAME, _iter2v),  /** void *(*for2v)(void *x, void *y, const
                                 cgraph_size_t len, cgraph_pfunc2_t func); */
    FUNCTION(NAME, _iter2vc), /** void *(*for2vc)(void *x, void *y, const
                                 cgraph_size_t len, cgraph_pfunc2_t func); */
    FUNCTION(NAME,
             _iter3v), /** void *(*for3v)(void *x, void *y, void *z, const
                          cgraph_size_t len, cgraph_pfunc3_t func); */
    FUNCTION(NAME,
             _iter3vvc), /** void *(*for3vvc)(void *x, void *y, void *z, const
                            cgraph_size_t len, cgraph_pfunc3_t func); */
    FUNCTION(NAME,
             _iter3vcv), /** void *(*for3vcv)(void *x, void *y, void *z, const
                            cgraph_size_t len, cgraph_pfunc3_t func); */
    FUNCTION(NAME,
             _iter3cvc), /** void *(*for3cvc)(void *x, void *y, void *z, const
                            cgraph_size_t len, cgraph_pfunc3_t func); */
#endif
    NULL /** void (*tend)(void); */
};

__INLINE cgraph_type_t FUNCTION(NAME, tid)(void) { return STRUCT(NAME).t_id; }

__INLINE cgraph_char_t *FUNCTION(NAME, tname)(void) {
  return (cgraph_char_t *)STRUCT(NAME).t_name;
}

__INLINE cgraph_size_t FUNCTION(NAME, tsize)(void) {
  return STRUCT(NAME).t_size;
}

__INLINE cgraph_size_t FUNCTION(NAME, tptrsize)(void) {
  return STRUCT(NAME).t_ptrsize;
}

__INLINE cgraph_size_t FUNCTION(NAME, tcpysize)(void) {
  return STRUCT(NAME).t_cpysize;
}

__INLINE cgraph_size_t FUNCTION(NAME, tstrusize)(void) {
  return STRUCT(NAME).t_strusize;
}

__INLINE cgraph_size_t FUNCTION(NAME, tbmatsize)(void) {
  return STRUCT(NAME).t_bmatsize;
}

__INLINE cgraph_size_t FUNCTION(NAME, tbmat3dsize)(void) {
  return STRUCT(NAME).t_bmat3dsize;
}

__INLINE cgraph_size_t FUNCTION(NAME, tdatsize)(void) {
  return STRUCT(NAME).t_datsize;
}

__INLINE cgraph_bool_t FUNCTION(NAME, thasdata)(void) {
#ifdef TYPE_WITH_DATA
  return CGRAPH_TRUE;
#else
  return CGRAPH_FALSE;
#endif
}

static void *FUNCTION(NAME, _data)(const void *cthis) {
  return FUNCTION(NAME, data)((TYPE *)cthis);
}

static cgraph_size_t FUNCTION(NAME, _len)(const void *cthis) {
  return FUNCTION(NAME, len)((TYPE *)cthis);
}

static cgraph_size_t FUNCTION(NAME, _size)(const void *cthis) {
  return FUNCTION(NAME, size)((TYPE *)cthis);
}

static void *FUNCTION(NAME, _calloc)(const cgraph_type_t type,
                                     const cgraph_size_t size) {
  return FUNCTION(NAME, calloc)(type, size);
}

static void *FUNCTION(NAME, _realloc)(void *cthis, const cgraph_type_t type,
                                      const cgraph_size_t old_size,
                                      cgraph_size_t new_size,
                                      cgraph_bool_t *error) {
  return FUNCTION(NAME, realloc)((TYPE *)cthis, type, old_size, new_size,
                                 error);
}

static void *FUNCTION(NAME, _copy)(const void *cthis,
                                   const cgraph_size_t size) {
  return FUNCTION(NAME, copy)((TYPE *)cthis, size);
}

static void FUNCTION(NAME, _free)(void *cthis) {
  FUNCTION(NAME, free)
  ((TYPE *)cthis);
}

static void *FUNCTION(NAME, _memcpy)(void *x, const void *y,
                                     const cgraph_size_t size) {
  return FUNCTION(NAME, memcpy)((TYPE *)x, (TYPE *)y, size);
}

static void FUNCTION(NAME, _check)(const void *x, void *y) {
#ifdef TYPE_WITH_DATA
  *(cgraph_bool_t *)y = FUNCTION(NAME, check)((TYPE *)x);
#else
  *(cgraph_bool_t *)y = FUNCTION(NAME, check)(*(TYPE *)x);
#endif
}

static void FUNCTION(NAME, _hash)(const void *x, void *y) {
#ifdef TYPE_WITH_DATA
  *(cgraph_size_t *)y = FUNCTION(NAME, hash)((TYPE *)x);
#else
  *(cgraph_size_t *)y = FUNCTION(NAME, hash)(*(TYPE *)x);
#endif
}

static void FUNCTION(NAME, _equal)(const void *x, const void *y, void *z) {
#ifdef TYPE_WITH_DATA
  *(cgraph_bool_t *)z = FUNCTION(NAME, equal)((TYPE *)x, (TYPE *)y);
#else
  *(cgraph_bool_t *)z = FUNCTION(NAME, equal)(*(TYPE *)x, *(TYPE *)y);
#endif
}

#ifdef TYPE_WITH_DATA
cgraph_bool_t FUNCTION(NAME, equal)(const TYPE *x, const TYPE *y)
#else
cgraph_bool_t FUNCTION(NAME, equal)(const TYPE x, const TYPE y)
#endif
{
#ifdef TYPE_WITH_DATA
  return CGRAPH_TEST(x == y);
#else
  return CGRAPH_TEST(EQ(x, y));
#endif
}

#if 0
void *FUNCTION(NAME, _datindex)(void *cthis, const cgraph_size_t index) {
  return FUNCTION(NAME, datindex)((TYPE *)cthis, index);
}

void *FUNCTION(NAME, _index)(void *cthis, const cgraph_size_t len,
                             const cgraph_size_t index) {
#ifdef TYPE_WITH_DATA
  return FUNCTION(NAME, index)((const TYPE **)cthis, len, index);
#else
  return FUNCTION(NAME, index)((const TYPE *)cthis, len, index);
#endif
}

/** #include "template_check.h"
#ifndef TYPE_WITH_DATA */

static void FUNCTION(NAME, _add)(void *x, void *y, void *z) {
  *(TYPE *)z = ADD(*(TYPE *)x, *(TYPE *)y, *(TYPE *)z);
}

static void FUNCTION(NAME, _sub)(void *x, void *y, void *z) {
  *(TYPE *)z = SUB(*(TYPE *)x, *(TYPE *)y, *(TYPE *)z);
}

static void FUNCTION(NAME, _mul)(void *x, void *y, void *z) {
  *(TYPE *)z = MUL(*(TYPE *)x, *(TYPE *)y, *(TYPE *)z);
}

static void FUNCTION(NAME, _div)(void *x, void *y, void *z) {
  *(TYPE *)z = DIV(*(TYPE *)x, *(TYPE *)y, *(TYPE *)z);
}

static void FUNCTION(NAME, _divi)(void *x, void *y, void *z) {
  *(TYPE *)z = INT(*(TYPE *)x, *(TYPE *)y, *(TYPE *)z);
}

static void FUNCTION(NAME, _divf)(void *x, void *y, void *z) {
  *(TYPE *)z = DIVF(*(TYPE *)x, *(TYPE *)y, *(TYPE *)z);
}

static void FUNCTION(NAME, _mod)(void *x, void *y, void *z) {
#if defined(TYPE_COMPLEX) || defined(TYPE_FRACTION)
  *(DATA_TYPE *)z = MOD(*(TYPE *)x, *(TYPE *)y, *(TYPE *)z);
#else
  *(TYPE *)z = MOD(*(TYPE *)x, *(TYPE *)y, *(TYPE *)z);
#endif
}

static void *FUNCTION(NAME, _iter1v)(void *x, const cgraph_size_t len,
                                     cgraph_pfunc1_t func) {
  return FUNCTION(NAME, for1v)((TYPE *)x, len, func);
}

static void *FUNCTION(NAME, _iter2v)(void *x, void *y, const cgraph_size_t len,
                                     cgraph_pfunc2_t func) {
  return FUNCTION(NAME, for2v)((TYPE *)x, (TYPE *)y, len, func);
}

static void *FUNCTION(NAME, _iter2vc)(void *x, void *y, const cgraph_size_t len,
                                      cgraph_pfunc2_t func) {
  *(TYPE *)y = FUNCTION(NAME, for2vc)((TYPE *)x, *(TYPE *)y, len, func);

  return y;
}

static void *FUNCTION(NAME, _iter3v)(void *x, void *y, void *z,
                                     const cgraph_size_t len,
                                     cgraph_pfunc3_t func) {
  return FUNCTION(NAME, for3v)((TYPE *)x, (TYPE *)y, (TYPE *)z, len, func);
}

static void *FUNCTION(NAME, _iter3vvc)(void *x, void *y, void *z,
                                       const cgraph_size_t len,
                                       cgraph_pfunc3_t func) {
  *(TYPE *)z =
      FUNCTION(NAME, for3vvc)((TYPE *)x, (TYPE *)y, *(TYPE *)z, len, func);

  return z;
}

static void *FUNCTION(NAME, _iter3vcv)(void *x, void *y, void *z,
                                       const cgraph_size_t len,
                                       cgraph_pfunc3_t func) {
  return FUNCTION(NAME, for3vcv)((TYPE *)x, *(TYPE *)y, (TYPE *)z, len, func);
}

static void *FUNCTION(NAME, _iter3cvc)(void *x, void *y, void *z,
                                       const cgraph_size_t len,
                                       cgraph_pfunc3_t func) {
  *(TYPE *)z =
      FUNCTION(NAME, for3cvc)(*(TYPE *)x, (TYPE *)y, *(TYPE *)z, len, func);

  return z;
}

static void *FUNCTION(NAME, _cmp)(void *x, void *y, void *z,
                                  const cgraph_size_t len,
                                  cgraph_pfunc3_t func) {
  *(cgraph_bool_t *)z = FUNCTION(NAME, cmp)((TYPE *)x, (TYPE *)y, len, func);
  return z;
}
#endif
