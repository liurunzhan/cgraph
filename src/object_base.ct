/**
 * @brief all data and data structure types defined in this library
 * @def NAME type name
 * @struct CGRAPH_OBJECTS_NAME(NAME)
 */
CGVTable *CGRAPH_OBJECTS_NAME(NAME)[] = {&STRUCT(NAME),
                                         &STRUCT(bool),
                                         &STRUCT(int),
                                         &STRUCT(long),
                                         &STRUCT(int8),
                                         &STRUCT(int16),
                                         &STRUCT(int32),
                                         &STRUCT(int64),
                                         &STRUCT(float32),
                                         &STRUCT(float64),
                                         &STRUCT(time),
                                         &STRUCT(complex),
                                         &STRUCT(fraction),
                                         &STRUCT(bigint),
                                         &STRUCT(bignum),
                                         &STRUCT(string),
                                         &STRUCT(bitset),
                                         &STRUCT(vector),
                                         &STRUCT(matrix),
                                         &STRUCT(bigmat),
                                         NULL};

#include "template_base.ct"

CGRAPH_INLINE static void *FUNCTION(NAME, _update)(void *cthis,
                                                   const cgraph_type_t type,
                                                   const cgraph_size_t len,
                                                   const cgraph_size_t size)
{
    TYPE *_cthis = (TYPE *)cthis;
    if (NULL != _cthis) {
#if defined(TYPE_OBJECT) || defined(TYPE_MOBJECT) || defined(TYPE_M3OBJECT) || defined(TYPE_POBJECT)
        CGRAPH_DTYPE_TYPE(_cthis) = type;
        CGRAPH_DTYPE_ACCESS(_cthis) = CGRAPH_TRUE;
        CGRAPH_DTYPE_HASHED(_cthis) = CGRAPH_FALSE;
#elif defined(TYPE_HOBJECT) || defined(TYPE_GOBJECT)
        CGRAPH_DTYPE_KTYPE(_cthis) = type;
        CGRAPH_DTYPE_KACCESS(_cthis) = CGRAPH_TRUE;
        CGRAPH_DTYPE_KHASHED(_cthis) = CGRAPH_FALSE;
        CGRAPH_DTYPE_VACCESS(_cthis) = CGRAPH_TRUE;
#else
#error !! unsupported object type !!
#endif
    }

    return _cthis;
}

CGRAPH_INLINE cgraph_size_t FUNCTION(NAME, len)(const TYPE *cthis)
{
    TYPE *_cthis = (TYPE *)cthis;
    cgraph_size_t _len = 0;
    if (NULL != _cthis) {
        cgraph_type_t _type = CGRAPH_DTYPE_TYPE(_cthis);
        /** _len = (ID == _type ? 1 : OBJECT(_type, len)(_cthis->data)); */
        _len = OBJECT(_type, len)(_cthis->data);
    }

    return _len;
}

CGRAPH_INLINE cgraph_size_t FUNCTION(NAME, size)(const TYPE *cthis)
{
    TYPE *_cthis = (TYPE *)cthis;
    cgraph_size_t _size = 0;
    if (NULL != _cthis) {
        cgraph_type_t _type = CGRAPH_DTYPE_TYPE(_cthis);
        /** _size = (ID == _type ? 1 : OBJECT(_type, size)(_cthis->data)); */
        _size = OBJECT(_type, size)(_cthis->data);
    }

    return _size;
}

CGRAPH_INLINE cgraph_size_t FUNCTION(NAME, msize)(const cgraph_type_t type,
                                                  const cgraph_size_t size)
{
    return FUNCTION(NAME, tsize)();
}

TYPE *FUNCTION(NAME, calloc)(const cgraph_type_t type,
                             const cgraph_size_t size)
{
    TYPE *cthis = cgraph_calloc(FUNCTION(NAME, tsize)());
    if ((NULL != cthis) && (ID != type)) {
        cthis->data = OBJECT(type, calloc)(type, size);
        if (NULL != cthis->data) {
            cthis = FUNCTION(NAME, _update)(cthis, type, 0, size);
        } else {
            cgraph_free(cthis);
        }
    }

    return cthis;
}

TYPE *FUNCTION(NAME, realloc)(TYPE *cthis, const cgraph_type_t type,
                              const cgraph_size_t old_size,
                              cgraph_size_t new_size, cgraph_bool_t *error)
{
    TYPE *_cthis = (TYPE *)cthis;
    cgraph_type_t _type = type;
    cgraph_size_t _size = 0;
    if (NULL != _cthis) {
        _type = CGRAPH_DTYPE_TYPE(_cthis);
        _size = FUNCTION(NAME, size)(_cthis);
    } else {
        _cthis = cgraph_calloc(FUNCTION(NAME, tsize)());
    }
    if (NULL != _cthis) {
        _cthis->data =
            OBJECT(_type, realloc)(_cthis->data, _type, _size, new_size, error);
    }

    return _cthis;
}

TYPE *FUNCTION(NAME, copy)(const TYPE *cthis, const cgraph_size_t size)
{
    TYPE *_cthis = (TYPE *)cthis;
    TYPE *_object = NULL;
    if (NULL != _cthis) {
        cgraph_type_t _type = CGRAPH_DTYPE_TYPE(_cthis);
        cgraph_size_t _old_size = OBJECT(_type, len)(_cthis->data);
        cgraph_size_t _size = _old_size > size ? size : _old_size;
        _object = (TYPE *)FUNCTION(NAME, calloc)(_type, _size);
        if (NULL != _object) {
            cgraph_memcpy(_object, _cthis, COPY_SIZE);
            cgraph_memcpy(_object->data, _cthis->data,
                          OBJECT(_type, msize)(_type, _size));
            OBJECT(_type, update)
            (_object->data, _type, -1, -1);
        }
    }

    return _object;
}

void FUNCTION(NAME, free)(TYPE *cthis)
{
    TYPE *_cthis = (TYPE *)cthis;
    if (NULL != _cthis) {
        cgraph_type_t _type = CGRAPH_DTYPE_TYPE(_cthis);
        OBJECT(_type, free)
        (_cthis->data);
        cgraph_free(_cthis);
    }
}

TYPE *FUNCTION(NAME, memcpy)(TYPE *x, const TYPE *y, const cgraph_size_t size)
{
    TYPE *_x = (TYPE *)x, *_y = (TYPE *)y;
    if (NULL != _x || NULL != _y) {
    }

    return _x;
}

cgraph_bool_t FUNCTION(NAME, check)(const TYPE *cthis)
{
    cgraph_bool_t flag = CGRAPH_FALSE;
    if (NULL != cthis) {
        cgraph_type_t type = CGRAPH_DTYPE_TYPE(cthis);
        OBJECT(type, check)
        (cthis->data, &flag);
    }

    return flag;
}

cgraph_size_t FUNCTION(NAME, hash)(const TYPE *cthis)
{
    cgraph_size_t hash = 0;
    if (NULL != cthis) {
        cgraph_type_t type = CGRAPH_DTYPE_TYPE(cthis);
        OBJECT(type, hash)
        (cthis->data, &hash);
    }

    return hash;
}

CGRAPH_INLINE cgraph_type_t FUNCTION(NAME, obj_type)(const TYPE *cthis)
{
    return (NULL != cthis) ? CGRAPH_DTYPE_KTYPE(cthis) : CGRAPH_FALSE;
}

CGRAPH_INLINE cgraph_bool_t FUNCTION(NAME, obj_accessiable)(const TYPE *cthis)
{
    return (NULL != cthis) ? CGRAPH_DTYPE_KACCESS(cthis) : CGRAPH_FALSE;
}

CGRAPH_INLINE cgraph_bool_t FUNCTION(NAME, obj_hashed)(const TYPE *cthis)
{
    return (NULL != cthis) ? CGRAPH_DTYPE_KHASHED(cthis) : CGRAPH_FALSE;
}

TYPE *FUNCTION(NAME, chgtype)(TYPE *cthis, const cgraph_type_t type,
                              const cgraph_size_t size)
{
    cgraph_type_t _type = type;
    void *_data = NULL;
    if (NULL != cthis) {
        _type = CGRAPH_DTYPE_TYPE(cthis);
    } else {
        cthis = cgraph_calloc(FUNCTION(NAME, tsize)());
    }
    if (NULL != cthis) {
        if (NULL != cthis->data) {
            if (_type == type) {
                cgraph_bool_t error = CGRAPH_FALSE;
                _data = OBJECT(_type, realloc)(_data, _type, 0, size, &error);
                if (CGRAPH_FALSE == error) {
                }
            } else {
                _data = OBJECT(_type, calloc)(_type, size);
            }

        } else {
            cthis->data = _data;
        }
    }

    return cthis;
}

CGRAPH_INLINE TYPE *FUNCTION(NAME, accessible)(TYPE *cthis)
{
    if (NULL != cthis) {
        CGRAPH_DTYPE_KACCESS(cthis) = CGRAPH_TRUE;
    }

    return cthis;
}

CGRAPH_INLINE TYPE *FUNCTION(NAME, unaccessible)(TYPE *cthis)
{
    if (NULL != cthis) {
        CGRAPH_DTYPE_KACCESS(cthis) = CGRAPH_FALSE;
    }

    return cthis;
}
