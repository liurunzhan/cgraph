/**
 * @brief all data and data structure types defined in this library
 * 
 * @struct CGRAPH_OBJECTS_NAME(NAME)
 */
CGVTable *CGRAPH_OBJECTS_NAME(NAME)[] = 
{
  &STRUCT(NAME),
  &STRUCT(bool),
  &STRUCT(int),
  &STRUCT(long),
  &STRUCT(int8),
  &STRUCT(int16),
  &STRUCT(int32),
  &STRUCT(int64),
  &STRUCT(float32),
  &STRUCT(float64),
  &STRUCT(time),
  &STRUCT(complex),
  &STRUCT(fraction),
  &STRUCT(bigint),
  &STRUCT(bignum),
  &STRUCT(string),
  &STRUCT(bitset),
  &STRUCT(vector),
  &STRUCT(matrix),
  &STRUCT(bigmat),
  NULL
};

#include "templete_base.ct"

CGRAPH_INLINE cgraph_size_t FUNCTION(NAME, len)(const void *cthis)
{
  TYPE *_cthis = (TYPE *)cthis;
  cgraph_size_t _len = 0;
  if(NULL != _cthis)
  {
    cgraph_type_t _type = CGRAPH_DTYPE_TYPE(_cthis);
    _len = (ID == _type ? 1 : OBJECT(_type, len)(_cthis->data));
  }

  return _len;
}

CGRAPH_INLINE cgraph_size_t FUNCTION(NAME, size)(const void *cthis)
{
  TYPE *_cthis = (TYPE *)cthis;
  cgraph_size_t _size = 0;
  if(NULL != _cthis)
  {
    cgraph_type_t _type = CGRAPH_DTYPE_TYPE(_cthis);
    _size = (ID == _type ? 1 : OBJECT(_type, size)(_cthis->data));
  }

  return _size;
}

CGRAPH_INLINE cgraph_size_t FUNCTION(NAME, msize)(const cgraph_type_t type, const cgraph_size_t size)
{
  return ID == type ? sizeof(TYPE) : sizeof(TYPE) + OBJECT(type, msize)(type, size);
}

CGRAPH_INLINE void *FUNCTION(NAME, update)(void *cthis, const cgraph_type_t type, const cgraph_size_t size)
{
  TYPE *_cthis = (TYPE *)cthis;
  if(NULL != _cthis)
  {
    CGRAPH_DTYPE_TYPE(_cthis) = type;
    _cthis->data = (((cgraph_addr8_t *)_cthis) + sizeof(TYPE));
    OBJECT(type, update)(_cthis->data, type, size);
  }

  return _cthis;
}

void *FUNCTION(NAME, calloc)(const cgraph_type_t type, const cgraph_size_t size)
{
  cgraph_size_t _size = OBJECT(type, msize)(type, size);
  TYPE *cthis = cgraph_calloc(_size);
  FUNCTION(NAME, update)(cthis, type, size);

  return cthis;
}

void *FUNCTION(NAME, realloc)(void *cthis, const cgraph_type_t type, const cgraph_size_t old_size, cgraph_size_t new_size, cgraph_bool_t *error)
{
  TYPE *_cthis = (TYPE *)cthis;
  cgraph_type_t _type = type;
  cgraph_size_t _size = 0;
  if(NULL != _cthis)
  {
    _type = CGRAPH_DTYPE_TYPE(_cthis);
    _size = OBJECT(_type, len)(_cthis->data);
  }
  else
  { _cthis = (TYPE *)cgraph_calloc(FUNCTION(NAME, tmemsize)()); }
  if((CGRAPH_OBJECT_T != _type) && (NULL != _cthis))
  {
    _cthis->data = OBJECT(_type, realloc)(_cthis->data, ID, _size, new_size, error);
    if((NULL != error) && (CGRAPH_FALSE == *error))
    { CGRAPH_DTYPE_TYPE(_cthis) = _type; }
    else if(NULL == _cthis->data)
    { cgraph_free(_cthis); }
  }

  return _cthis;
}

void *FUNCTION(NAME, copy)(const void *cthis, const cgraph_size_t size)
{
  TYPE *_cthis = (TYPE *)cthis;
  TYPE *_object = NULL;
  if(NULL != _cthis)
  {
    cgraph_type_t _type = CGRAPH_DTYPE_TYPE(_cthis);
    cgraph_size_t _old_size  = OBJECT(_type, len)(_cthis->data);
    cgraph_size_t _size = _old_size > size ? size : _old_size;
    _object = (TYPE *)FUNCTION(NAME, calloc)(_type, _size);
    if(NULL != _object)
    {
      void *tmp = NULL;
      cgraph_memcpy(_object, _cthis, FUNCTION(NAME, tsize)());
      _object->data = tmp;
    }
  }

  return _object;
}

void FUNCTION(NAME, free)(void *cthis)
{
  TYPE *_cthis = (TYPE *)cthis;
  if(NULL != _cthis)
  {
    cgraph_type_t type = CGRAPH_DTYPE_TYPE(_cthis);
    OBJECT(type, free)(_cthis->data);
  #if DEBUG
    fprintf(stdout, "FREE OBJECT TYPE : %d\n", type);
  #endif
    cgraph_free(_cthis);
  }
}

void *FUNCTION(NAME, chtype)(void *cthis, const cgraph_type_t type, const cgraph_size_t size)
{
  TYPE *_cthis = (TYPE *)cthis;
  void *_data = NULL;
  if(NULL != (_data = OBJECT(type, calloc)(type, size)))
  {
    cgraph_type_t old_type = CGRAPH_DTYPE_TYPE(_cthis);
    OBJECT(old_type, free)(_cthis->data);
    _cthis->data = _data;
    CGRAPH_DTYPE_TYPE(_cthis) = type;
  }

  return _cthis;
}

void *FUNCTION(NAME, visit)(void *cthis)
{
  return FUNCTION(NAME, accessible)((TYPE *)cthis);
}

void *FUNCTION(NAME, delete)(void *cthis)
{
  return FUNCTION(NAME, unaccessible)((TYPE *)cthis);
}

cgraph_size_t FUNCTION(NAME, hash)(const void *cthis)
{
  TYPE *_cthis = (TYPE *)cthis;
  cgraph_size_t hash = 0;
  if(NULL != _cthis)
  {
    cgraph_type_t type = CGRAPH_DTYPE_TYPE(_cthis);
    hash = OBJECT(type, hash)(_cthis->data);
  }

  return hash;
}

void *FUNCTION(NAME, accessible)(void *cthis)
{
  TYPE *_cthis = (TYPE *)cthis;
  if(NULL != _cthis)
  { CGRAPH_DTYPE_ACCESSIABLE(_cthis) = CGRAPH_TRUE; }

  return _cthis;
}

void *FUNCTION(NAME, unaccessible)(void *cthis)
{
  TYPE *_cthis = (TYPE *)cthis;
  if(NULL != _cthis)
  { CGRAPH_DTYPE_ACCESSIABLE(_cthis) = CGRAPH_FALSE; }

  return _cthis;
}

void *FUNCTION(NAME, hashed)(void *cthis)
{
  TYPE *_cthis = (TYPE *)cthis;
  if(NULL != _cthis)
  { CGRAPH_DTYPE_HASHED(_cthis) = CGRAPH_TRUE; }

  return _cthis;
}

void *FUNCTION(NAME, unhashed)(void *cthis)
{
  TYPE *_cthis = (TYPE *)cthis;
  if(NULL != _cthis)
  { CGRAPH_DTYPE_HASHED(_cthis) = CGRAPH_FALSE; }

  return _cthis;
}
