#include "template_base.ct"

#if !defined(CGRAPH_MEMORY_HEADER_SIZE) || (0 >= CGRAPH_MEMORY_HEADER_SIZE)
#error CGRAPH_MEMORY_HEADER_SIZE cannot be UNDEFINED or SMALLER THAN OR EQUAL TO ZERO
#endif

#if !defined(CGRAPH_MEMORY_FREED_SIZE) ||                                      \
    (CGRAPH_MEMORY_FREED_SIZE < CGRAPH_MEMORY_HEADER_SIZE)
#error CGRAPH_MEMORY_FREED_SIZE cannot be UNDEFINED or SMALLER THAN CGRAPH_MEMORY_HEADER_SIZE
#endif

__INLINE__ static void *FUNCTION(NAME, _update)(void *cthis,
                                                const cgraph_type_t type,
                                                const cgraph_size_t len,
                                                const cgraph_size_t size) {
  TYPE *_cthis = (TYPE *)cthis;
#ifdef TYPE_WITH_DATA
  if (NULL != _cthis) {
    _cthis->len = ((0 <= len) ? len : _cthis->len);
    _cthis->size = ((0 < size) ? size : _cthis->size);
#if (__STDC_VERSION__ >= 199901L)
    _cthis->data = (DATA_TYPE *)(&(_cthis->root[CGRAPH_MEMORY_HEADER_SIZE]));
#else
    _cthis->root =
        (DATA_TYPE *)CGRAPH_PTRADDR2V(_cthis, FUNCTION(NAME, tsize)());
    _cthis->data = _cthis->root + CGRAPH_MEMORY_HEADER_SIZE;
#endif /**< __STDC_VERSION__ */
    _cthis->data[_cthis->len] = DATA_END;
#ifdef TYPE_BITSET
    BITSET_BITPOS_UPDATE(_cthis, BITSET_BITPOS(_cthis));
#endif
  }
#endif

  return _cthis;
}

#ifdef TYPE_WITH_DATA
__INLINE__ DATA_TYPE *FUNCTION(NAME, data)(const TYPE *cthis) {
  return ((TYPE *)cthis)->data;
#else
__INLINE__ TYPE *FUNCTION(NAME, data)(const TYPE *cthis) {
  return (TYPE *)cthis;
#endif
}

__INLINE__ cgraph_size_t FUNCTION(NAME, len)(const TYPE *cthis) {
#ifdef TYPE_WITH_DATA
  return CGRAPH_LEN(cthis);
#else
  return NULL != cthis ? 1 : 0;
#endif
}

__INLINE__ cgraph_size_t FUNCTION(NAME, size)(const TYPE *cthis) {
#ifdef TYPE_WITH_DATA
  return CGRAPH_SIZE(cthis);
#else
  return NULL != cthis ? 1 : 0;
#endif
}

__INLINE__ cgraph_size_t FUNCTION(NAME, msize)(const cgraph_type_t type,
                                               const cgraph_size_t size) {
#ifdef TYPE_WITH_DATA
  return (0 < size) ? (sizeof(TYPE) +
                       (size + CGRAPH_MEMORY_FREED_SIZE) * sizeof(DATA_TYPE))
                    : 0;
#else
  return (0 < size) ? ((size + CGRAPH_MEMORY_FREED_SIZE) * sizeof(TYPE)) : 0;
#endif
}

TYPE *FUNCTION(NAME, calloc)(const cgraph_type_t type,
                             const cgraph_size_t size) {
  TYPE *cthis = (TYPE *)cgraph_calloc(FUNCTION(NAME, msize)(type, size));
#if defined(TYPE_BIGINT) || defined(TYPE_BIGNUM)
  cthis->postive = CGRAPH_TRUE;
#endif

  return FUNCTION(NAME, _update)(cthis, type, 0, size);
}

/**
 * if object is defined with data memory, its memory is re-allocated lazily
 */
TYPE *FUNCTION(NAME, realloc)(TYPE *cthis, const cgraph_type_t type,
                              const cgraph_size_t old_size,
                              cgraph_size_t new_size, cgraph_bool_t *error) {
#ifdef TYPE_WITH_DATA
  cgraph_size_t cthis_size = CGRAPH_SIZE(cthis), real_size = new_size;
  if (cthis_size > real_size) {
    cgraph_size_t tmp_size = real_size;
    if ((tmp_size = (CGRAPH_DATA_SIZE2 * real_size)) < cthis_size) {
      real_size = tmp_size;
    } else if ((tmp_size = (CGRAPH_DATA_SIZE1 * real_size)) < cthis_size) {
      real_size = tmp_size;
    } else if ((tmp_size = (CGRAPH_DATA_SIZE0 * real_size)) < cthis_size) {
      real_size = tmp_size;
    }
  } else {
    cgraph_size_t tmp_size = real_size;
    if (new_size < (tmp_size = (CGRAPH_DATA_SIZE1 * cthis_size))) {
      real_size = tmp_size;
    } else if (new_size < (tmp_size = (CGRAPH_DATA_SIZE0 * cthis_size))) {
      real_size = tmp_size;
    }
  }
  cthis = (TYPE *)cgraph_realloc(cthis, FUNCTION(NAME, msize)(type, cthis_size),
                                 FUNCTION(NAME, msize)(type, real_size), error);
  if ((NULL != error) && (CGRAPH_FALSE == *error)) {
    cthis = FUNCTION(NAME, _update)(cthis, type, -1, real_size);
  }

  return cthis;
#else
  return (TYPE *)cgraph_realloc(cthis, FUNCTION(NAME, msize)(type, old_size),
                                FUNCTION(NAME, msize)(type, new_size), error);
#endif
}

TYPE *FUNCTION(NAME, copy)(const TYPE *cthis, const cgraph_size_t size) {
  TYPE *_cthis = NULL;
  if (NULL != cthis) {
#ifdef TYPE_WITH_DATA
    cgraph_size_t _size = cthis->size;
    _cthis = FUNCTION(NAME, calloc)(DATA_ID, _size);
    _cthis = (TYPE *)cgraph_memcpy(_cthis, cthis,
                                   FUNCTION(NAME, msize)(DATA_ID, _size));
    _cthis = FUNCTION(NAME, _update)(_cthis, DATA_ID, -1, _size);
#else
    _cthis = FUNCTION(NAME, calloc)(ID, size);
    _cthis =
        (TYPE *)cgraph_memcpy(_cthis, cthis, FUNCTION(NAME, msize)(ID, size));
#endif
  }

  return _cthis;
}

void FUNCTION(NAME, free)(TYPE *cthis) { cgraph_free(cthis); }

TYPE *FUNCTION(NAME, memcpy)(TYPE *x, const TYPE *y, const cgraph_size_t size) {
  if (NULL != x || NULL != y) {
#ifdef TYPE_WITH_DATA
    cgraph_size_t _size = CGRAPH_MIN(x->size, y->size);
    x = cgraph_memcpy(x, y, FUNCTION(NAME, msize)(DATA_ID, _size));
    x = FUNCTION(NAME, _update)(x, DATA_ID, -1, _size);
#else
    x = cgraph_memcpy(x, y, FUNCTION(NAME, msize)(ID, size));
#endif
  }

  return x;
}

TYPE *FUNCTION(NAME, init)(TYPE *cthis, const TYPE *data,
                           const cgraph_size_t size) {
#ifdef TYPE_WITH_DATA
  if (NULL != data) {
    cgraph_size_t _size = CGRAPH_SIZE(cthis),
                  _len = ((0 < size) ? size : CGRAPH_LEN(data));
    cgraph_bool_t error = CGRAPH_FALSE;
    cthis = FUNCTION(NAME, realloc)(cthis, DATA_ID, _size, _len, &error);
    if (CGRAPH_FALSE == error) {
      cthis->data = cgraph_memcpy(cthis->data, data->data,
                                  FUNCTION(NAME, msize)(DATA_ID, _len));
      cthis = FUNCTION(NAME, _update)(cthis, DATA_ID, _len, _len);
    }
  }

  return cthis;
#else
  return (TYPE *)cgraph_memcpy(cthis, data, FUNCTION(NAME, msize)(ID, size));
#endif
}

#ifdef TYPE_WITH_DATA
TYPE *FUNCTION(NAME, initdt)(TYPE *cthis, const DATA_TYPE *data,
                             const cgraph_size_t size) {
  if (NULL != data) {
    cgraph_size_t _size = CGRAPH_SIZE(cthis),
                  _len = ((0 < size) ? size : CGRAPH_LEN(cthis));
    cgraph_bool_t error = CGRAPH_FALSE;
    cthis = FUNCTION(NAME, realloc)(cthis, DATA_ID, _size, _len, &error);
    if (CGRAPH_FALSE == error) {
      cthis->data =
          cgraph_memcpy(cthis->data, data, _len * FUNCTION(NAME, tdatsize)());
      cthis = FUNCTION(NAME, _update)(cthis, DATA_ID, _len, _len);
    }
  }
#else
TYPE *FUNCTION(NAME, initdt)(TYPE *cthis, const TYPE *data,
                             const cgraph_size_t size) {
  cthis = cgraph_memcpy(cthis, data, FUNCTION(NAME, msize)(ID, size));
#endif

  return cthis;
}

#ifdef TYPE_WITH_DATA
__INLINE__ cgraph_bool_t FUNCTION(NAME, isempty)(const TYPE *cthis) {
  return CGRAPH_TEST((NULL == cthis) || (0 >= cthis->len) ||
                     (cthis->len > cthis->size));
}
#else
__INLINE__ cgraph_bool_t FUNCTION(NAME, isempty)(const TYPE cthis) {
  return CGRAPH_FALSE;
}
#endif

#ifdef TYPE_WITH_DATA
__INLINE__ cgraph_bool_t FUNCTION(NAME, isnumber)(const TYPE *cthis) {
#if defined(TYPE_BIGINT) || defined(TYPE_BIGNUM)
  return CGRAPH_TEST(CGRAPH_HASDATA(cthis) && (cthis->len <= cthis->size));
#else
  return CGRAPH_FALSE;
#endif
}
#else
__INLINE__ cgraph_bool_t FUNCTION(NAME, isnumber)(const TYPE cthis) {
  return FUNCTION(NAME, check)(cthis);
}
#endif

#ifdef TYPE_WITH_DATA
__INLINE__ cgraph_bool_t FUNCTION(NAME, need_realloc)(const TYPE *cthis) {
  cgraph_bool_t res = CGRAPH_TRUE;
  if ((NULL != cthis) && (cthis->root != cthis->data) &&
      (cthis->len < cthis->size)) {
    res = CGRAPH_FALSE;
  }

  return res;
}
#else
__INLINE__ cgraph_bool_t FUNCTION(NAME, need_realloc)(const TYPE cthis) {
  return CGRAPH_FALSE;
}
#endif

#ifdef TYPE_WITH_DATA
__INLINE__ cgraph_int_t FUNCTION(NAME, cmpsignbit)(const TYPE *x,
                                                   const TYPE *y) {
#else
__INLINE__ cgraph_int_t FUNCTION(NAME, cmpsignbit)(const TYPE x, const TYPE y) {
#endif
  return CGRAPH_TEST(FUNCTION(NAME, signbit)(x) == FUNCTION(NAME, signbit)(y));
}

/**
 * @brief
 *
 */
#ifdef TYPE_WITH_DATA
__INLINE__ cgraph_size_t FUNCTION(NAME, minoflen)(const TYPE *cthis,
                                                  const cgraph_size_t len) {
  cgraph_size_t _len = len;
  if (NULL != cthis) {
    _len = (0 >= _len) ? ((0 >= cthis->len) ? cthis->size : cthis->len)
                       : CGRAPH_MIN(cthis->size, _len);
  }

  return _len;
}
#else
__INLINE__ cgraph_size_t FUNCTION(NAME, minoflen)(const TYPE cthis,
                                                  const cgraph_size_t len) {
  return 1;
}
#endif

#ifdef TYPE_WITH_DATA
TYPE *FUNCTION(NAME, zero)(TYPE *cthis) {
  if (NULL != cthis) {
    CGRAPH_DATA(cthis, 0) = DATA_ZERO;
    cthis->len = 1;
#if defined(TYPE_BIGINT) || defined(TYPE_BIGNUM)
    cthis->postive = CGRAPH_TRUE;
#ifdef TYPE_BIGNUM
    cthis->point = 0;
#endif
#elif defined(TYPE_BITSET)
    BITSET_BITPOS_UPDATE(cthis, 1);
#endif
  }

  return cthis;
}

TYPE *FUNCTION(NAME, one)(TYPE *cthis) {
  if (NULL != cthis) {
    CGRAPH_DATA(cthis, 0) = DATA_ONE;
    cthis->len = 1;
#if defined(TYPE_BIGINT) || defined(TYPE_BIGNUM)
    cthis->postive = CGRAPH_TRUE;
#ifdef TYPE_BIGNUM
    cthis->point = 0;
#endif
#elif defined(TYPE_BITSET)
    BITSET_BITPOS_UPDATE(cthis, 1);
#endif
  }

  return cthis;
}

TYPE *FUNCTION(NAME, ones)(TYPE *cthis) {
  if (NULL != cthis) {
    cgraph_memset(cthis->data, DATA_ONES, cthis->len);
  }

  return cthis;
}

TYPE *FUNCTION(NAME, rand)(TYPE *cthis) {
  if (NULL != cthis) {
    cgraph_size_t i;
    for (i = 0; i < cthis->len; i++) {
      cthis->data[i] = cgraph_rand32_uniform(DATA_MIN, DATA_MAX + 1);
    }
#if defined(TYPE_BIGNUM) || defined(TYPE_BIGINT)
    cthis->postive = cgraph_rand_bool();
#if defined(TYPE_BIGNUM)
    cthis->point = cgraph_rand_size(cthis->len);
#endif
#endif
  }

  return cthis;
}

TYPE *FUNCTION(NAME, min)(TYPE *cthis) {
  if (NULL != cthis) {
    cthis->len = (((0 < cthis->len) ? cthis->len : cthis->size));
#if defined(TYPE_BIGINT) || defined(TYPE_BIGNUM)
    cgraph_memset(cthis->data, DATA_MAX, cthis->len);
    cthis->postive = CGRAPH_FALSE;
#ifdef TYPE_BIGNUM
    cthis->point = cthis->len - 1;
#endif
#else
    cgraph_memset(cthis->data, DATA_MIN, cthis->len);
#endif
  }

  return cthis;
}

TYPE *FUNCTION(NAME, max)(TYPE *cthis) {
  if (NULL != cthis) {
    cthis->len = ((0 < cthis->len) ? cthis->len : cthis->size);
    cgraph_memset(cthis->data, DATA_MAX, cthis->len);
#if defined(TYPE_BIGINT) || defined(TYPE_BIGNUM)
    cthis->postive = CGRAPH_TRUE;
#ifdef TYPE_BIGNUM
    cthis->point = 0;
#endif
#endif
  }

  return cthis;
}

TYPE *FUNCTION(NAME, inf)(TYPE *cthis) {
  if (NULL != cthis) {
#if defined(TYPE_BIGNUM)
    cthis->postive = CGRAPH_TRUE;
    cthis->len = CGRAPH_CSTR_INFR_SIZE;
    cgraph_memcpy(cthis->data, CGRAPH_CSTR_INFR, CGRAPH_CSTR_INFR_SIZE);
#elif defined(TYPE_STRING)
    cthis->len = CGRAPH_CSTR_INF_SIZE;
    cgraph_memcpy(cthis->data, CGRAPH_CSTR_INF, CGRAPH_CSTR_INF_SIZE);
    cthis->data[CGRAPH_CSTR_INF_SIZE] = '\0';
#endif
  }

  return cthis;
}

TYPE *FUNCTION(NAME, pinf)(TYPE *cthis) {
  if (NULL != cthis) {
#if defined(TYPE_BIGNUM)
    cthis->postive = CGRAPH_TRUE;
    cthis->len = CGRAPH_CSTR_INFR_SIZE;
    cgraph_memcpy(cthis->data, CGRAPH_CSTR_INFR, CGRAPH_CSTR_INFR_SIZE);
#elif defined(TYPE_STRING)
    cthis->len = CGRAPH_CSTR_PINF_SIZE;
    cgraph_memcpy(cthis->data, CGRAPH_CSTR_PINF, CGRAPH_CSTR_PINF_SIZE);
    cthis->data[CGRAPH_CSTR_PINF_SIZE] = '\0';
#endif
  }

  return cthis;
}

TYPE *FUNCTION(NAME, ninf)(TYPE *cthis) {
  if (NULL != cthis) {
#if defined(TYPE_BIGNUM)
    cthis->postive = CGRAPH_FALSE;
    cthis->len = CGRAPH_CSTR_INFR_SIZE;
    cgraph_memcpy(cthis->data, CGRAPH_CSTR_INFR, CGRAPH_CSTR_INFR_SIZE);
#elif defined(TYPE_STRING)
    cthis->len = CGRAPH_CSTR_NINF_SIZE;
    cgraph_memcpy(cthis->data, CGRAPH_CSTR_NINF, CGRAPH_CSTR_NINF_SIZE);
    cthis->data[CGRAPH_CSTR_NINF_SIZE] = '\0';
#endif
  }

  return cthis;
}

TYPE *FUNCTION(NAME, nan)(TYPE *cthis) {
  if (NULL != cthis) {
#if defined(TYPE_BIGNUM) || defined(TYPE_STRING)
    cthis->len = CGRAPH_CSTR_NAN_SIZE;
    cgraph_memcpy(cthis->data, CGRAPH_CSTR_NAN, CGRAPH_CSTR_NAN_SIZE);
#if defined(TYPE_STRING)
    cthis->data[CGRAPH_CSTR_NAN_SIZE] = '\0';
#endif
#endif
  }

  return cthis;
}

cgraph_bool_t FUNCTION(NAME, iszero)(const TYPE *cthis) {
  cgraph_bool_t flag = CGRAPH_FALSE;
  if (NULL != cthis) {
    cgraph_size_t i;
    for (flag = CGRAPH_TRUE, i = 0; i < cthis->len; i++) {
      if (DATA_ZERO != cthis->data[i]) {
        flag = CGRAPH_FALSE;
        break;
      }
    }
  }

  return flag;
}

cgraph_bool_t FUNCTION(NAME, isone)(const TYPE *cthis) {
  cgraph_bool_t flag = CGRAPH_FALSE;
#ifdef TYPE_STRING
  if ((NULL != cthis) && (DATA_ONE == CGRAPH_DATA(cthis, cthis->len - 1))) {
#else
  if ((NULL != cthis) && (DATA_ONE == CGRAPH_DATA(cthis, 0))) {
#endif
    cgraph_size_t i;
#ifdef TYPE_STRING
    for (flag = CGRAPH_TRUE, i = 0; i < cthis->len - 1; i++) {
#else
    for (flag = CGRAPH_TRUE, i = 1; i < cthis->len; i++) {
#endif
      if (DATA_ZERO != cthis->data[i]) {
        flag = CGRAPH_FALSE;
        break;
      }
    }
  }

  return flag;
}

cgraph_bool_t FUNCTION(NAME, ismin)(const TYPE *cthis) {
  cgraph_bool_t flag = CGRAPH_FALSE;
  if (NULL != cthis) {
    cgraph_size_t i = 0;
    for (flag = CGRAPH_TRUE, i = 0; i < cthis->len; i++) {
#if defined(TYPE_BIGINT) || defined(TYPE_BIGNUM)
      if (DATA_MAX != cthis->data[i]) {
#else
      if (DATA_MIN != cthis->data[i]) {
#endif
        flag = CGRAPH_FALSE;
        break;
      }
    }
#if defined(TYPE_BIGINT) || defined(TYPE_BIGNUM)
    if ((CGRAPH_TRUE == flag) && (CGRAPH_TRUE == cthis->postive)) {
      flag = CGRAPH_FALSE;
    }
#endif
  }

  return flag;
}

cgraph_bool_t FUNCTION(NAME, ismax)(const TYPE *cthis) {
  cgraph_bool_t flag = CGRAPH_FALSE;
  if (NULL != cthis) {
    cgraph_size_t i = 0;
    for (flag = CGRAPH_TRUE, i = 0; i < cthis->len; i++) {
#if defined(TYPE_BIGINT) || defined(TYPE_BIGNUM)
      if (DATA_MAX != cthis->data[i]) {
#else
      if (DATA_MIN != cthis->data[i]) {
#endif
        flag = CGRAPH_FALSE;
        break;
      }
    }
#if defined(TYPE_BIGINT) || defined(TYPE_BIGNUM)
    if ((CGRAPH_TRUE == flag) && (CGRAPH_FALSE == cthis->postive)) {
      flag = CGRAPH_FALSE;
    }
#endif
  }

  return flag;
}
#endif

#ifdef TYPE_WITH_DATA
cgraph_bool_t FUNCTION(NAME, ne)(const TYPE *x, const TYPE *y) {
#else
cgraph_bool_t FUNCTION(NAME, ne)(const TYPE x, const TYPE y) {
#endif
  return NE(x, y);
}

#ifdef TYPE_WITH_DATA
cgraph_bool_t FUNCTION(NAME, ge)(const TYPE *x, const TYPE *y) {
#else
cgraph_bool_t FUNCTION(NAME, ge)(const TYPE x, const TYPE y) {
#endif
  return GE(x, y);
}

#ifdef TYPE_WITH_DATA
cgraph_bool_t FUNCTION(NAME, lt)(const TYPE *x, const TYPE *y) {
#else
cgraph_bool_t FUNCTION(NAME, lt)(const TYPE x, const TYPE y) {
#endif
  return LT(x, y);
}

#ifdef TYPE_WITH_DATA
cgraph_bool_t FUNCTION(NAME, le)(const TYPE *x, const TYPE *y) {
#else
cgraph_bool_t FUNCTION(NAME, le)(const TYPE x, const TYPE y) {
#endif
  return LE(x, y);
}

#ifdef TYPE_WITH_DATA
cgraph_size_t FUNCTION(NAME, print)(const TYPE *cthis) {
#else
cgraph_size_t FUNCTION(NAME, print)(const TYPE cthis) {
#endif
  return FUNCTION(NAME, fprint)(stdout, cthis);
}

#ifdef TYPE_WITH_DATA
cgraph_size_t FUNCTION(NAME, println)(const TYPE *cthis) {
#else
cgraph_size_t FUNCTION(NAME, println)(const TYPE cthis) {
#endif
  return FUNCTION(NAME, fprintln)(stdout, cthis);
}

#ifdef TYPE_WITH_DATA
cgraph_size_t FUNCTION(NAME, fprintln)(FILE *fp, const TYPE *cthis) {
#else
cgraph_size_t FUNCTION(NAME, fprintln)(FILE *fp, const TYPE cthis) {
#endif
  cgraph_size_t len = FUNCTION(NAME, fprint)(fp, cthis);
  if (0 < len) {
    len += cgraph_file_fprintln(fp);
  }

  return len;
}

#ifdef TYPE_WITH_DATA
cgraph_size_t FUNCTION(NAME, datfprintln)(FILE *fp, const TYPE *cthis) {
  cgraph_size_t len = 0;
  if (NULL != cthis) {
    cgraph_size_t i;
#ifdef TYPE_STRING
    DATA_TYPE *xd = CGRAPH_DATA_HADDR(cthis);
    for (i = cthis->len; i > 0; i--, xd++) {
      fprintf(fp, "%x", *xd);
    }
#else
    DATA_TYPE *xd = CGRAPH_DATA_TADDR(cthis);
    for (i = cthis->len; i > 0; i--, xd--) {
      fprintf(fp, "%x", *xd);
    }
#endif
    len = cthis->size + cgraph_file_fprintln(fp);
  }

  return len;
}
#else
cgraph_size_t FUNCTION(NAME, datfprintln)(FILE *fp, const TYPE cthis) {
  return 0;
}
#endif

#ifdef TYPE_WITH_DATA
DATA_TYPE *FUNCTION(NAME, datindex)(const TYPE *cthis,
                                    const cgraph_size_t datindex) {
  DATA_TYPE *res = NULL;
  if (CGRAPH_HASDATA(cthis)) {
    if (0 <= datindex) {
      res = (DATA_TYPE *)(&(cthis->data[datindex]));
    } else {
      res = (DATA_TYPE *)(&(cthis->data[cthis->len + datindex]));
    }
  }

  return res;
}
#else
TYPE *FUNCTION(NAME, datindex)(const TYPE *cthis,
                               const cgraph_size_t datindex) {
  return (TYPE *)cthis;
}
#endif

#ifdef TYPE_WITH_DATA
TYPE *FUNCTION(NAME, index)(const TYPE **cthis, const cgraph_size_t len,
                            const cgraph_size_t index) {
#else
TYPE *FUNCTION(NAME, index)(const TYPE *cthis, const cgraph_size_t len,
                            const cgraph_size_t index) {
#endif
  TYPE *res = NULL;
  if ((NULL != cthis) && (0 < len)) {
#ifdef TYPE_WITH_DATA
    res = (TYPE *)((0 <= index) ? cthis[index] : cthis[len + index]);
#else
    res = (TYPE *)((0 <= index) ? &cthis[index] : &cthis[len + index]);
#endif
  }

  return res;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, zeros1v)(TYPE **cthis, const cgraph_size_t len) {
#else
TYPE *FUNCTION(NAME, zeros1v)(TYPE *cthis, const cgraph_size_t len) {
#endif
  if (NULL != cthis) {
    CGRAPH_LOOP(i, 0, len)
#ifdef TYPE_WITH_DATA
    cthis[i] = FUNCTION(NAME, zero)(cthis[i]);
#else
    cthis[i] = FUNCTION(NAME, zero)();
#endif
    CGRAPH_LOOP_END
  }

  return cthis;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, ones1v)(TYPE **cthis, const cgraph_size_t len) {
#else
TYPE *FUNCTION(NAME, ones1v)(TYPE *cthis, const cgraph_size_t len) {
#endif
  if (NULL != cthis) {
    CGRAPH_LOOP(i, 0, len)
#ifdef TYPE_WITH_DATA
    cthis[i] = FUNCTION(NAME, one)(cthis[i]);
#else
    cthis[i] = FUNCTION(NAME, one)();
#endif
    CGRAPH_LOOP_END
  }

  return cthis;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, rand1v)(TYPE **cthis, const cgraph_size_t len) {
#else
TYPE *FUNCTION(NAME, rand1v)(TYPE *cthis, const cgraph_size_t len) {
#endif
  if (NULL != cthis) {
    CGRAPH_LOOP(i, 0, len)
#ifdef TYPE_WITH_DATA
    cthis[i] = FUNCTION(NAME, rand)(cthis[i]);
#else
    cthis[i] = FUNCTION(NAME, rand)();
#endif
    CGRAPH_LOOP_END
  }

  return cthis;
}

#ifdef TYPE_WITH_DATA
void FUNCTION(NAME, ascsort1v)(TYPE **cthis, const cgraph_size_t start,
                               const cgraph_size_t end) {
  cgraph_size_t left = start, right = end;
  TYPE *key = cthis[left];
#else
void FUNCTION(NAME, ascsort1v)(TYPE *cthis, const cgraph_size_t start,
                               const cgraph_size_t end) {
  cgraph_size_t left = start, right = end;
  TYPE key = cthis[left];
#endif

  while (left < right) {
    while ((left < right) && (GE(cthis[right], key))) {
      right--;
    }
    cthis[left] = cthis[right];
    while ((left < right) && (LE(cthis[left], key))) {
      left++;
    }
    cthis[right] = cthis[left];
  }
  cthis[left] = key;
  FUNCTION(NAME, ascsort1v)
  (cthis, start, left - 1);
  FUNCTION(NAME, ascsort1v)
  (cthis, left + 1, end);
}

#ifdef TYPE_WITH_DATA
void FUNCTION(NAME, descsort1v)(TYPE **cthis, const cgraph_size_t start,
                                const cgraph_size_t end) {
  cgraph_size_t left = start, right = end;
  TYPE *key = cthis[left];
#else
void FUNCTION(NAME, descsort1v)(TYPE *cthis, const cgraph_size_t start,
                                const cgraph_size_t end) {
  cgraph_size_t left = start, right = end;
  TYPE key = cthis[left];
#endif
  while (left < right) {
    while ((left < right) && (LE(cthis[right], key))) {
      right--;
    }
    cthis[left] = cthis[right];
    while ((left < right) && (GE(cthis[left], key))) {
      left++;
    }
    cthis[right] = cthis[left];
  }
  cthis[left] = key;
  FUNCTION(NAME, descsort1v)
  (cthis, start, left - 1);
  FUNCTION(NAME, descsort1v)
  (cthis, left + 1, end);
}

#ifdef TYPE_WITH_DATA
cgraph_bool_t FUNCTION(NAME, cmp1v)(const TYPE **x, const TYPE **y,
                                    const cgraph_size_t len,
                                    void (*func)(void *x, void *y, void *res)) {
  TYPE **_x = (TYPE **)x, **_y = (TYPE **)y;
#else
cgraph_bool_t FUNCTION(NAME, cmp1v)(const TYPE *x, const TYPE *y,
                                    const cgraph_size_t len,
                                    void (*func)(void *x, void *y, void *res)) {
  TYPE *_x = (TYPE *)x, *_y = (TYPE *)y;
#endif
  cgraph_bool_t flag = CGRAPH_FALSE;
  cgraph_size_t i = 0;
  for (; i < len; i++, _x++, _y++) {
    func(_x, _y, &flag);
    if (CGRAPH_FALSE == flag) {
      break;
    }
  }

  return flag;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, for1v)(TYPE **x, const cgraph_size_t len,
                             void (*func)(void *x))
#else
TYPE *FUNCTION(NAME, for1v)(TYPE *x, const cgraph_size_t len,
                            void (*func)(void *x))
#endif
{
  CGRAPH_LOOP(i, 0, len)
  func((TYPE *)&x[i]);
  CGRAPH_LOOP_END

  return x;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, for2v)(const TYPE **x, TYPE **y, const cgraph_size_t len,
                             void (*func)(void *x, void *y))
#else
TYPE *FUNCTION(NAME, for2v)(const TYPE *x, TYPE *y, const cgraph_size_t len,
                            void (*func)(void *x, void *y))
#endif
{
  CGRAPH_LOOP(i, 0, len)
  func((TYPE *)&x[i], &y[i]);
  CGRAPH_LOOP_END

  return y;
}

#ifdef TYPE_WITH_DATA
TYPE *FUNCTION(NAME, for2vc)(const TYPE **x, TYPE *y, const cgraph_size_t len,
                             void (*func)(void *x, void *y))
#else
TYPE FUNCTION(NAME, for2vc)(const TYPE *x, TYPE y, const cgraph_size_t len,
                            void (*func)(void *x, void *y))
#endif
{
  CGRAPH_LOOP(i, 0, len)
  func((TYPE *)&x[i], (TYPE *)&y);
  CGRAPH_LOOP_END

  return y;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, for3v)(const TYPE **x, const TYPE **y, TYPE **z,
                             const cgraph_size_t len,
                             void (*func)(void *x, void *y, void *res))
#else
TYPE *FUNCTION(NAME, for3v)(const TYPE *x, const TYPE *y, TYPE *z,
                            const cgraph_size_t len,
                            void (*func)(void *x, void *y, void *res))
#endif
{
  CGRAPH_LOOP(i, 0, len)
  func((TYPE *)&x[i], (TYPE *)&y[i], &z[i]);
  CGRAPH_LOOP_END

  return z;
}

#ifdef TYPE_WITH_DATA
TYPE *FUNCTION(NAME, for3vvc)(const TYPE **x, const TYPE **y, TYPE *z,
                              const cgraph_size_t len,
                              void (*func)(void *x, void *y, void *res))
#else
TYPE FUNCTION(NAME, for3vvc)(const TYPE *x, const TYPE *y, TYPE z,
                             const cgraph_size_t len,
                             void (*func)(void *x, void *y, void *res))
#endif
{
  CGRAPH_LOOP(i, 0, len)
  func((TYPE *)&x[i], (TYPE *)&y[i], (TYPE *)&z);
  CGRAPH_LOOP_END

  return z;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, for3vcv)(const TYPE **x, const TYPE *y, TYPE **z,
                               const cgraph_size_t len,
                               void (*func)(void *x, void *y, void *res))
#else
TYPE *FUNCTION(NAME, for3vcv)(const TYPE *x, const TYPE y, TYPE *z,
                              const cgraph_size_t len,
                              void (*func)(void *x, void *y, void *res))
#endif
{
  CGRAPH_LOOP(i, 0, len)
  func((TYPE *)&x[i], (TYPE *)&y, &z[i]);
  CGRAPH_LOOP_END

  return z;
}

#ifdef TYPE_WITH_DATA
TYPE *FUNCTION(NAME, for3cvc)(const TYPE *x, const TYPE **y, TYPE *z,
                              const cgraph_size_t len,
                              void (*func)(void *x, void *y, void *res))
#else
TYPE FUNCTION(NAME, for3cvc)(const TYPE x, const TYPE *y, TYPE z,
                             const cgraph_size_t len,
                             void (*func)(void *x, void *y, void *res))
#endif
{
  CGRAPH_LOOP(i, 0, len)
  func((TYPE *)&x, (TYPE *)&y[i], (TYPE *)&z);
  CGRAPH_LOOP_END

  return z;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, swap)(TYPE **cthis, const cgraph_size_t xstart,
                            const cgraph_size_t ystart, const cgraph_size_t len)
#else
TYPE *FUNCTION(NAME, swap)(TYPE *cthis, const cgraph_size_t xstart,
                           const cgraph_size_t ystart, const cgraph_size_t len)
#endif
{
  cgraph_size_t i = 0, _xstart = xstart, _ystart = ystart;
  for (; i < len; i++, _xstart++, _ystart++) {
    SWAP(cthis[_xstart], cthis[_ystart]);
  }

  return cthis;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, jswap)(TYPE **cthis, const cgraph_size_t xoffset,
                             const cgraph_size_t yoffset,
                             const cgraph_size_t unit, const cgraph_size_t len)
#else
TYPE *FUNCTION(NAME, jswap)(TYPE *cthis, const cgraph_size_t xoffset,
                            const cgraph_size_t yoffset,
                            const cgraph_size_t unit, const cgraph_size_t len)
#endif
{
  cgraph_size_t i = 0, _xindex = xoffset, _yindex = yoffset;
  for (; i < len; i++, _xindex += unit, _yindex += unit) {
    SWAP(cthis[_xindex], cthis[_yindex]);
  }

  return cthis;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, rtrans)(TYPE **cthis, const cgraph_size_t row,
                              const cgraph_size_t col)
#else
TYPE *FUNCTION(NAME, rtrans)(TYPE *cthis, const cgraph_size_t row,
                             const cgraph_size_t col)
#endif
{
  CGRAPH_LOOP(i, 0, row)
  cgraph_size_t row_i = i * row;
  CGRAPH_LOOP(j, i + 1, col)
  SWAP(cthis[row_i + j], cthis[col * j + i]);
  CGRAPH_LOOP_END
  CGRAPH_LOOP_END

  return cthis;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, subsym)(TYPE **cthis, const cgraph_size_t row,
                              const cgraph_size_t col)
#else
TYPE *FUNCTION(NAME, subsym)(TYPE *cthis, const cgraph_size_t row,
                             const cgraph_size_t col)
#endif
{
  CGRAPH_LOOP(i, 0, row)
  cgraph_size_t row_i = i * row;
  CGRAPH_LOOP(j, i + 1, col)
  SWAP(cthis[row_i + j], cthis[col * j + i]);
  CGRAPH_LOOP_END
  CGRAPH_LOOP_END

  return cthis;
}

#ifdef TYPE_WITH_DATA
cgraph_bool_t FUNCTION(NAME, issubsym)(TYPE **cthis, const cgraph_size_t row,
                                       const cgraph_size_t col)
#else
cgraph_bool_t FUNCTION(NAME, issubsym)(TYPE *cthis, const cgraph_size_t row,
                                       const cgraph_size_t col)
#endif
{
  cgraph_bool_t flag = CGRAPH_TRUE;
  CGRAPH_LOOP(i, 0, row)
  cgraph_size_t row_i = i * row;
  CGRAPH_LOOP(j, 0, col)
  if (NE(cthis[row_i + j], cthis[col * j + i])) {
    flag = CGRAPH_FALSE;
    break;
  }
  CGRAPH_LOOP_END
  CGRAPH_LOOP_END

  return flag;
}

#ifdef TYPE_WITH_DATA
cgraph_bool_t FUNCTION(NAME, isupptri)(TYPE **cthis, const cgraph_size_t row,
                                       const cgraph_size_t col)
#else
cgraph_bool_t FUNCTION(NAME, isupptri)(TYPE *cthis, const cgraph_size_t row,
                                       const cgraph_size_t col)
#endif
{
  cgraph_bool_t flag = CGRAPH_TRUE;
  CGRAPH_LOOP(i, 0, row)
  cgraph_size_t row_i = i * row;
  CGRAPH_LOOP(j, 0, i)
  if (!FUNCTION(NAME, iszero)(cthis[row_i + j])) {
    flag = CGRAPH_FALSE;
    break;
  }
  CGRAPH_LOOP_END
  CGRAPH_LOOP_END

  return flag;
}

#ifdef TYPE_WITH_DATA
cgraph_bool_t FUNCTION(NAME, islowtri)(TYPE **cthis, const cgraph_size_t row,
                                       const cgraph_size_t col)
#else
cgraph_bool_t FUNCTION(NAME, islowtri)(TYPE *cthis, const cgraph_size_t row,
                                       const cgraph_size_t col)
#endif
{
  cgraph_bool_t flag = CGRAPH_TRUE;
  CGRAPH_LOOP(i, 0, row)
  cgraph_size_t row_i = i * row;
  CGRAPH_LOOP(j, i + 1, col)
  if (!FUNCTION(NAME, iszero)(cthis[row_i + j])) {
    flag = CGRAPH_FALSE;
    break;
  }
  CGRAPH_LOOP_END
  CGRAPH_LOOP_END

  return flag;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, ror1)(TYPE **cthis, const cgraph_size_t row,
                            const cgraph_size_t col)
#else
TYPE *FUNCTION(NAME, ror1)(TYPE *cthis, const cgraph_size_t row,
                           const cgraph_size_t col)
#endif
{
  cgraph_size_t i = 0, j;
  for (; i < row / 2; i++) {
    cgraph_size_t start = i, end = col - 1 - i;
    for (j = start; j < end; j++) {
      cgraph_size_t end2 = col - 1 - j;
      ROR4(cthis[i * row + j], cthis[j * col + end], cthis[end * row + end2],
           cthis[end2 * col + i]);
    }
  }

  return cthis;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, ror2)(TYPE **cthis, const cgraph_size_t row,
                            const cgraph_size_t col)
#else
TYPE *FUNCTION(NAME, ror2)(TYPE *cthis, const cgraph_size_t row,
                           const cgraph_size_t col)
#endif
{
  CGRAPH_LOOP(i, 0, row)
  cgraph_size_t row_i = i * row;
  CGRAPH_LOOP(j, i + 1, col)
  SWAP(cthis[row_i + j], cthis[col * j + i]);
  CGRAPH_LOOP_END
  CGRAPH_LOOP_END

  return cthis;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, ror3)(TYPE **cthis, const cgraph_size_t row,
                            const cgraph_size_t col)
#else
TYPE *FUNCTION(NAME, ror3)(TYPE *cthis, const cgraph_size_t row,
                           const cgraph_size_t col)
#endif
{
  CGRAPH_LOOP(i, 0, row)
  cgraph_size_t row_i = i * row;
  CGRAPH_LOOP(j, i + 1, col)
  SWAP(cthis[row_i + j], cthis[col * j + i]);
  CGRAPH_LOOP_END
  CGRAPH_LOOP_END

  return cthis;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, ror4)(TYPE **cthis, const cgraph_size_t row,
                            const cgraph_size_t col)
#else
TYPE *FUNCTION(NAME, ror4)(TYPE *cthis, const cgraph_size_t row,
                           const cgraph_size_t col)
#endif
{
  return cthis;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, rol1)(TYPE **cthis, const cgraph_size_t row,
                            const cgraph_size_t col)
#else
TYPE *FUNCTION(NAME, rol1)(TYPE *cthis, const cgraph_size_t row,
                           const cgraph_size_t col)
#endif
{
  CGRAPH_LOOP(i, 0, row)
  cgraph_size_t row_i = i * row;
  CGRAPH_LOOP(j, i + 1, col)
  SWAP(cthis[row_i + j], cthis[col * j + i]);
  CGRAPH_LOOP_END
  CGRAPH_LOOP_END

  return cthis;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, rol2)(TYPE **cthis, const cgraph_size_t row,
                            const cgraph_size_t col)
#else
TYPE *FUNCTION(NAME, rol2)(TYPE *cthis, const cgraph_size_t row,
                           const cgraph_size_t col)
#endif
{
  CGRAPH_LOOP(i, 0, row)
  cgraph_size_t row_i = i * row;
  CGRAPH_LOOP(j, i + 1, col)
  SWAP(cthis[row_i + j], cthis[col * j + i]);
  CGRAPH_LOOP_END
  CGRAPH_LOOP_END

  return cthis;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, rol3)(TYPE **cthis, const cgraph_size_t row,
                            const cgraph_size_t col)
#else
TYPE *FUNCTION(NAME, rol3)(TYPE *cthis, const cgraph_size_t row,
                           const cgraph_size_t col)
#endif
{
  CGRAPH_LOOP(i, 0, row)
  cgraph_size_t row_i = i * row;
  CGRAPH_LOOP(j, i + 1, col)
  SWAP(cthis[row_i + j], cthis[col * j + i]);
  CGRAPH_LOOP_END
  CGRAPH_LOOP_END

  return cthis;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, rol4)(TYPE **cthis, const cgraph_size_t row,
                            const cgraph_size_t col)
#else
TYPE *FUNCTION(NAME, rol4)(TYPE *cthis, const cgraph_size_t row,
                           const cgraph_size_t col)
#endif
{
  return cthis;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, ext2d)(TYPE **cthis, const cgraph_size_t old_row,
                             const cgraph_size_t old_col,
                             const cgraph_size_t ext_row,
                             const cgraph_size_t ext_col)
#else
TYPE *FUNCTION(NAME, ext2d)(TYPE *cthis, const cgraph_size_t old_row,
                            const cgraph_size_t old_col,
                            const cgraph_size_t ext_row,
                            const cgraph_size_t ext_col)
#endif
{
  cgraph_size_t old_size = old_row * old_col * FUNCTION(NAME, tptrsize)(),
                new_size = (old_row + ext_row) * (old_col + ext_col) *
                           FUNCTION(NAME, tptrsize)();
  cgraph_bool_t error = CGRAPH_FALSE;
  cthis = cgraph_realloc(cthis, old_size, new_size, &error);
  if (CGRAPH_FALSE == error) {
  }

  return cthis;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, ext2d_zero)(TYPE **cthis, const cgraph_size_t old_row,
                                  const cgraph_size_t old_col,
                                  const cgraph_size_t ext_row,
                                  const cgraph_size_t ext_col)
#else
TYPE *FUNCTION(NAME, ext2d_zero)(TYPE *cthis, const cgraph_size_t old_row,
                                 const cgraph_size_t old_col,
                                 const cgraph_size_t ext_row,
                                 const cgraph_size_t ext_col)
#endif
{
  cgraph_size_t old_size = old_row * old_col * FUNCTION(NAME, tptrsize)(),
                new_size = (old_row + ext_row) * (old_col + ext_col) *
                           FUNCTION(NAME, tptrsize)();
  cgraph_bool_t error = CGRAPH_FALSE;
  cthis = cgraph_realloc(cthis, old_size, new_size, &error);
  if (CGRAPH_FALSE == error) {
  }

  return cthis;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME,
                ext3d)(TYPE **cthis, const cgraph_size_t old_x,
                       const cgraph_size_t old_y, const cgraph_size_t old_z,
                       const cgraph_size_t ext_x, const cgraph_size_t ext_y,
                       const cgraph_size_t ext_z)
#else
TYPE *FUNCTION(NAME,
               ext3d)(TYPE *cthis, const cgraph_size_t old_x,
                      const cgraph_size_t old_y, const cgraph_size_t old_z,
                      const cgraph_size_t ext_x, const cgraph_size_t ext_y,
                      const cgraph_size_t ext_z)
#endif
{
  cgraph_size_t old_size = old_x * old_y * old_z * FUNCTION(NAME, tptrsize)(),
                new_size = (old_x + ext_x) * (old_y + ext_y) * (old_z + ext_z) *
                           FUNCTION(NAME, tptrsize)();
  cgraph_bool_t error = CGRAPH_FALSE;
  cthis = cgraph_realloc(cthis, old_size, new_size, &error);
  if (CGRAPH_FALSE == error) {
  }

  return cthis;
}

#ifdef TYPE_WITH_DATA
TYPE **
FUNCTION(NAME, ext3d_zero)(TYPE **cthis, const cgraph_size_t old_x,
                           const cgraph_size_t old_y, const cgraph_size_t old_z,
                           const cgraph_size_t ext_x, const cgraph_size_t ext_y,
                           const cgraph_size_t ext_z)
#else
TYPE *FUNCTION(NAME,
               ext3d_zero)(TYPE *cthis, const cgraph_size_t old_x,
                           const cgraph_size_t old_y, const cgraph_size_t old_z,
                           const cgraph_size_t ext_x, const cgraph_size_t ext_y,
                           const cgraph_size_t ext_z)
#endif
{
  cgraph_size_t old_size = old_x * old_y * old_z * FUNCTION(NAME, tptrsize)(),
                new_size = (old_x + ext_x) * (old_y + ext_y) * (old_z + ext_z) *
                           FUNCTION(NAME, tptrsize)();
  cgraph_bool_t error = CGRAPH_FALSE;
  cthis = cgraph_realloc(cthis, old_size, new_size, &error);
  if (CGRAPH_FALSE == error) {
  }

  return cthis;
}

/**
 * A = [[0 1] [2 3]]
 * det A = 0 x 3 - 1 x 2
 */
#ifdef TYPE_WITH_DATA
TYPE *FUNCTION(NAME, det2x2)(const TYPE **cthis, TYPE *res0, TYPE *res1,
                             TYPE *res) {
  res0 = MUL(cthis[0], cthis[2], res0);
  res1 = MUL(cthis[1], cthis[3], res1);
  res = SUB(res0, res1, res);

  return res;
}
#else
TYPE *FUNCTION(NAME, det2x2)(const TYPE *cthis, TYPE *res0, TYPE *res1,
                             TYPE *res) {
  *res0 = MUL(cthis[0], cthis[2]);
  *res1 = MUL(cthis[1], cthis[3]);
  *res = SUB(*res0, *res1);

  return res;
}
#endif

/**
 * A = [[0 1 2] [3 4 5] [6 7 8]]
 * det A = 0 x (4 x 8 - 5 x 7) - 1 x (3 x 8 - 5 x 6) + 2 x (3 x 7 - 4 x 6)
 *       = 0 x (4 x 8 - 5 x 7) + 1 x (5 x 6 - 3 x 8) + 2 x (3 x 7 - 4 x 6)
 */
#ifdef TYPE_WITH_DATA
TYPE *FUNCTION(NAME, det3x3)(const TYPE **cthis, TYPE *res0, TYPE *res1,
                             TYPE *res2, TYPE *res) {
  res0 = MUL(cthis[4], cthis[8], res0);
  res1 = MUL(cthis[5], cthis[7], res1);
  res2 = SUB(res0, res1, res2);
  res0 = MUL(cthis[3], cthis[8], res0);
  res1 = MUL(cthis[5], cthis[6], res1);
  res = SUB(res1, res0, res);
  res0 = ADD(res, res2, res0);
  res = ASSIGN(res0, res);
  res0 = MUL(cthis[3], cthis[7], res0);
  res1 = MUL(cthis[4], cthis[6], res1);
  res2 = SUB(res0, res1, res2);
  res0 = ADD(res, res2, res0);
  res = ASSIGN(res0, res);

  return res;
}
#else
TYPE *FUNCTION(NAME, det3x3)(const TYPE *cthis, TYPE *res0, TYPE *res1,
                             TYPE *res2, TYPE *res) {
  *res0 = MUL(cthis[4], cthis[8]);
  *res1 = MUL(cthis[5], cthis[7]);
  *res2 = SUB(*res0, *res1);
  *res0 = MUL(cthis[3], cthis[8]);
  *res1 = MUL(cthis[5], cthis[6]);
  *res = SUB(*res1, *res0);
  *res0 = ADD(*res, *res2);
  *res = ASSIGN(*res0, *res);
  *res0 = MUL(cthis[3], cthis[7]);
  *res1 = MUL(cthis[4], cthis[6]);
  *res2 = SUB(*res0, *res1);
  *res0 = ADD(*res, *res2);
  *res = ASSIGN(*res0, *res);

  return res;
}
#endif

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, conv)(const TYPE **x, const TYPE **y,
                            const cgraph_size_t xlen, const cgraph_size_t ylen,
                            TYPE *res0, TYPE **res) {
  cgraph_size_t i = 0, j;
  for (; i < (xlen + ylen - 1); i++) {
    for (j = 0; (j <= i) && (j < xlen); j++) {
      ZERO(res[i]);
      if (i < (ylen + j)) {
        res0 = MUL(x[j], y[i - j], res0);
        res[i] = ADD(res[i], res0, res[i]);
      }
    }
  }

  return res;
}
#else
TYPE *FUNCTION(NAME, conv)(const TYPE *x, const TYPE *y,
                           const cgraph_size_t xlen, const cgraph_size_t ylen,
                           TYPE *res0, TYPE *res) {
  cgraph_size_t i = 0, j;
  for (; i < (xlen + ylen - 1); i++) {
    res[i] = ZERO;
    for (j = 0; (j <= i) && (j < xlen); j++) {
      if (i < (ylen + j)) {
        *res0 = MUL(x[j], y[i - j]);
        res[i] = ADD(res[i], *res0);
      }
    }
  }

  return res;
}
#endif
