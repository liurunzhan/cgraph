#include "template_struct.ct"

TYPE *FUNCTION(NAME, create)(const cgraph_type_t type, const cgraph_size_t row,
                             const cgraph_size_t column) {
  cgraph_size_t size = row * column;
  TYPE *cthis = FUNCTION(NAME, calloc)(type, size);
  if (NULL != cthis) {
    MATRIX_INDEX_SET(cthis, row, column);
    cthis->len = size;
  }

  return cthis;
}

TYPE *FUNCTION(NAME, retype)(TYPE *cthis, const cgraph_type_t type) {
  return FUNCTION(NAME, realloc)(cthis, type, CGRAPH_SIZE(cthis),
                                 CGRAPH_SIZE(cthis), NULL);
}

TYPE *FUNCTION(NAME, resize)(TYPE *cthis, const cgraph_type_t type,
                             const cgraph_size_t row,
                             const cgraph_size_t column) {
  cgraph_size_t old_size = FUNCTION(NAME, size_rowcol)(cthis);
  cgraph_size_t new_size = row * column;
  cgraph_bool_t error = CGRAPH_FALSE;
  cthis = FUNCTION(NAME, realloc)(cthis, type, old_size, new_size, &error);
  if (CGRAPH_FALSE == error) {
    MATRIX_INDEX_SET(cthis, row, column);
    cthis->len = new_size;
  }

  return cthis;
}

__INLINE__ cgraph_size_t FUNCTION(NAME, index_row)(const TYPE *cthis) {
  return CGRAPH_MATRIX_ROW(cthis);
}

__INLINE__ cgraph_size_t FUNCTION(NAME, index_column)(const TYPE *cthis) {
  return CGRAPH_MATRIX_COLUMN(cthis);
}

__INLINE__ cgraph_size_t FUNCTION(NAME, size_rowcol)(const TYPE *cthis) {
  return CGRAPH_MATRIX_SIZE(cthis);
}

__INLINE__ cgraph_bool_t FUNCTION(NAME, isempty)(const TYPE *cthis) {
  cgraph_bool_t res = CGRAPH_TRUE;
  if (NULL != cthis) {
    res = (0 == MATRIX_ROW(cthis)) || (0 == MATRIX_COLUMN(cthis));
  }

  return res;
}

__INLINE__ cgraph_bool_t FUNCTION(NAME, isnumber)(const TYPE *cthis) {
  cgraph_bool_t res = CGRAPH_FALSE;
  if (NULL != cthis) {
    res = (1 == MATRIX_ROW(cthis)) && (1 == MATRIX_COLUMN(cthis));
  }

  return res;
}

__INLINE__ cgraph_bool_t FUNCTION(NAME, issquare)(const TYPE *cthis) {
  cgraph_bool_t res = CGRAPH_FALSE;
  if (NULL != cthis) {
    res =
        (MATRIX_ROW(cthis) == MATRIX_COLUMN(cthis)) && (1 < MATRIX_ROW(cthis));
  }

  return res;
}

__INLINE__ cgraph_bool_t FUNCTION(NAME, ismatrix_row)(const TYPE *cthis) {
  cgraph_bool_t res = CGRAPH_FALSE;
  if (NULL != cthis) {
    res = (1 == MATRIX_COLUMN(cthis)) && (1 < MATRIX_ROW(cthis));
  }

  return res;
}

__INLINE__ cgraph_bool_t FUNCTION(NAME, ismatrix_column)(const TYPE *cthis) {
  cgraph_bool_t res = CGRAPH_FALSE;
  if (NULL != cthis) {
    res = (1 == MATRIX_ROW(cthis)) && (1 < MATRIX_COLUMN(cthis));
  }

  return res;
}

__INLINE__ cgraph_bool_t FUNCTION(NAME, ismatrix)(const TYPE *cthis) {
  cgraph_bool_t res = CGRAPH_FALSE;
  if (NULL != cthis) {
    res = (1 < MATRIX_COLUMN(cthis)) && (1 < MATRIX_ROW(cthis));
  }

  return res;
}
