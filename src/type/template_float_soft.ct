/**
 * software-defined float point numbers
 * IEEE Standard 754 for Binary Floating-Point Arithmetic
 * Refered from
 * https://people.eecs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF
 * stored in memory:
 * msb                                    lsb
 * [sign bit] [exponent bits] [fraction bits]
 * x = sign * frac * 2 ^ (exp - bias)
 * |          | sign(b) | exp(b) | bias(u) | frac(b) |
 * |   :-:    |   :-:   |   :-:  |   :-:   |   :-:   |
 * | float8   |    1    |     3  |      3  |      4  |
 * | float16  |    1    |     7  |     63  |      8  |
 * | float32  |    1    |     8  |    127  |     23  |
 * | float64  |    1    |    11  |   1023  |     52  |
 * | float80  |    1    |    15  |  16383  |     63  |
 * | float128 |    1    |    15  |  16383  |    112  |
 * where
 *   1) b is bit number
 *   2) u is unsigned decimal number
 */
#include "template_data.ct"

__INLINE cgraph_bool_t FUNCTION(NAME, check)(const TYPE cthis) { return 0; }

cgraph_size_t FUNCTION(NAME, hash)(const TYPE cthis) {
  cgraph_size_t hash = 0;

  return hash;
}

cgraph_size_t FUNCTION(NAME, fprint)(FILE *fp, const TYPE cthis) { return 0; }

cgraph_size_t FUNCTION(NAME, snprint)(cgraph_char_t *cbuf,
                                      const cgraph_size_t size,
                                      const TYPE cthis) {
  return 0;
}

cgraph_char_t *FUNCTION(NAME, encode)(const TYPE x) { return ""; }

TYPE FUNCTION(NAME, initsef)(const cgraph_bool_t signbit, const DATA_TYPE exp,
                             const DATA_UTYPE frac) {
  TYPE res;

  return res;
}

TYPE FUNCTION(NAME, fmt)(const TYPE x) {
  TYPE res;
  DATA_TYPE exp = FLOAT_SOFT_EXP(x), frac = FLOAT_SOFT_FRAC_FMT(x);
  while (!(frac & (0x01U << (FRAC_OFFSET - 1)))) {
    frac >>= 1;
    exp += 1;
  }
  res = FLOAT_SOFT_TOFRAC(frac);
  res += FLOAT_SOFT_TOEXP(exp);

  return res;
}

TYPE FUNCTION(NAME, one)(void) { return EXP_MASK << EXP_OFFSET; }

TYPE FUNCTION(NAME, zero)(void) { return 0; }

TYPE FUNCTION(NAME, opp)(const TYPE x) {
  return (TYPE)(x ^ (SIG_MASK << SIG_OFFSET));
}

TYPE FUNCTION(NAME, rand)(void) { return 0; }

TYPE FUNCTION(NAME, fabs)(const TYPE x) {
  return (x & (~(SIG_MASK << SIG_OFFSET)));
}

TYPE FUNCTION(NAME, inv)(const TYPE x) {
  TYPE res;

  return res;
}

cgraph_bool_t FUNCTION(NAME, gr)(const TYPE x, const TYPE y) {
  return FUNCTION(NAME, gr_s)(x, y);
}

cgraph_bool_t FUNCTION(NAME, isone)(const TYPE x) {
  DATA_TYPE exp = FLOAT_SOFT_EXP(x), frac = FLOAT_SOFT_FRAC_FMT(x);

  return (EXP_MASK == exp) && (0 == frac);
}

cgraph_bool_t FUNCTION(NAME, iszero)(const TYPE x) {
  DATA_TYPE exp = FLOAT_SOFT_EXP(x), frac = FLOAT_SOFT_FRAC_FMT(x);

  return (0 == exp) && (0 == frac);
}

cgraph_bool_t FUNCTION(NAME, test)(const TYPE x) {
  return FUNCTION(NAME, ls)(x, MAX) && FUNCTION(NAME, gr)(x, MIN);
}

cgraph_bool_t FUNCTION(NAME, isnan)(const TYPE x) {
  DATA_TYPE exp = FLOAT_SOFT_EXP(x), frac = FLOAT_SOFT_FRAC_FMT(x);

  return (EXP_MASK == exp) && frac;
}

cgraph_bool_t FUNCTION(NAME, ispinf)(const TYPE x) { return PINF == x; }

cgraph_bool_t FUNCTION(NAME, isninf)(const TYPE x) { return NINF == x; }

cgraph_bool_t FUNCTION(NAME, isinf)(const TYPE x) {
  return (PINF == x) || (NINF == x);
}

TYPE FUNCTION(NAME, add)(const TYPE x, const TYPE y) {
  DATA_TYPE x_sig = FLOAT_SOFT_SIG(x), x_exp = FLOAT_SOFT_EXP(x),
            x_frac = FLOAT_SOFT_FRAC(x);
  DATA_TYPE y_sig = FLOAT_SOFT_SIG(y), y_exp = FLOAT_SOFT_EXP(y),
            y_frac = FLOAT_SOFT_FRAC(y);
  TYPE res;
  while (x_exp != y_exp) {
    if (x_exp > y_exp) {
      y_frac >>= 1;
      y_exp += 1;
    } else {
      x_frac <<= 1;
      x_exp -= 1;
    }
  }
  res = FLOAT_SOFT_TOFRAC(x_frac + y_frac);
  res += FLOAT_SOFT_TOEXP(x_exp);

  return res;
}

TYPE FUNCTION(NAME, sub)(const TYPE x, const TYPE y) {
  return FUNCTION(NAME, add)(x, FUNCTION(NAME, opp)(y));
}

TYPE FUNCTION(NAME, mul)(const TYPE x, const TYPE y) {
  DATA_TYPE x_sig = FLOAT_SOFT_SIG(x), x_exp = FLOAT_SOFT_EXP(x),
            x_frac = FLOAT_SOFT_FRAC(x);
  DATA_TYPE y_sig = FLOAT_SOFT_SIG(y), y_exp = FLOAT_SOFT_EXP(y),
            y_frac = FLOAT_SOFT_FRAC(y);
  TYPE res = FLOAT_SOFT_TOEXP(x_exp + y_exp);
  res += FLOAT_SOFT_TOFRAC(x_frac) * FLOAT_SOFT_TOFRAC(y_frac);
  res = (x_sig == y_sig) ? FUNCTION(NAME, fabs)(res) : FUNCTION(NAME, opp)(res);

  return res;
}

TYPE FUNCTION(NAME, div)(const TYPE x, const TYPE y) {
  DATA_TYPE x_sig = FLOAT_SOFT_SIG(x), x_exp = FLOAT_SOFT_EXP(x),
            x_frac = FLOAT_SOFT_FRAC(x);
  DATA_TYPE y_sig = FLOAT_SOFT_SIG(y), y_exp = FLOAT_SOFT_EXP(y),
            y_frac = FLOAT_SOFT_FRAC(y);
  TYPE res = FLOAT_SOFT_TOEXP(x_exp - y_exp);
  res += FLOAT_SOFT_TOFRAC(x_frac) / FLOAT_SOFT_TOFRAC(y_frac);
  res = (x_sig == y_sig) ? FUNCTION(NAME, fabs)(res) : FUNCTION(NAME, opp)(res);

  return res;
}

cgraph_int_t FUNCTION(NAME, signbit)(const TYPE x) {
  return (x >> SIG_OFFSET) & SIG_MASK;
}

TYPE FUNCTION(NAME, frexp)(const TYPE x, TYPE *y) {
  if (NULL != y) {
    *y = FLOAT_SOFT_EXP(x);
  }

  return FLOAT_SOFT_FRAC(x);
}

TYPE FUNCTION(NAME, ldexp)(const TYPE x, const TYPE y) {
  return FLOAT_SOFT(FLOAT_SOFT_SIG(x), FLOAT_SOFT_FRAC(x), FLOAT_SOFT_EXP(y));
}

TYPE FUNCTION(NAME, int)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, mod)(const TYPE x, const TYPE y) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, floor)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, ceil)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, fmod)(const TYPE x, const TYPE y) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, modf)(const TYPE x, TYPE *y) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, abs)(const TYPE x) {
  return (x & (~(SIG_MASK << SIG_OFFSET)));
}

TYPE FUNCTION(NAME, log)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, log2)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, log10)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, exp)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, sqrt)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, cube)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, pow)(const TYPE x, const TYPE y) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, sin)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, cos)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, tan)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, cot)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, sec)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, csc)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, sinh)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, cosh)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, tanh)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, coth)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, sech)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, csch)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, asin)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, acos)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, atan)(const TYPE x) {
  TYPE res = 0;

  return res;
}

cgraph_bool_t FUNCTION(NAME, eq_s)(const TYPE x, const TYPE y) {
  return FUNCTION(NAME, fabs)(FUNCTION(NAME, sub)(x, y)) < EPSILON;
}

cgraph_bool_t FUNCTION(NAME, ne_s)(const TYPE x, const TYPE y) {
  return CGRAPH_NTEST(FUNCTION(NAME, eq_s)(x, y));
}

cgraph_bool_t FUNCTION(NAME, gr_s)(const TYPE x, const TYPE y) {
  cgraph_bool_t flag = CGRAPH_FALSE;
  DATA_TYPE x_sig = FLOAT_SOFT_SIG(x), x_exp = FLOAT_SOFT_EXP(x),
            x_frac = FLOAT_SOFT_FRAC(x);
  DATA_TYPE y_sig = FLOAT_SOFT_SIG(y), y_exp = FLOAT_SOFT_EXP(y),
            y_frac = FLOAT_SOFT_FRAC(y);
  if ((x_exp > y_exp) || ((x_exp == y_exp) && (x_frac > y_frac))) {
    flag = CGRAPH_TRUE;
  }
  if ((x_sig > y_sig) || ((x_sig == y_sig) && x_sig)) {
    flag = CGRAPH_NTEST(flag);
  }

  return flag;
}

cgraph_bool_t FUNCTION(NAME, ge_s)(const TYPE x, const TYPE y) {
  return CGRAPH_NTEST(FUNCTION(NAME, gr_s)(y, x));
}

cgraph_bool_t FUNCTION(NAME, ls_s)(const TYPE x, const TYPE y) {
  return FUNCTION(NAME, gr)(y, x);
}

cgraph_bool_t FUNCTION(NAME, le_s)(const TYPE x, const TYPE y) {
  return CGRAPH_NTEST(FUNCTION(NAME, gr_s)(x, y));
}

TYPE FUNCTION(NAME, tofrac)(const cgraph_int_t x) {
  cgraph_size_t bits = x;

  return x;
}

TYPE FUNCTION(NAME, setfrac)(const TYPE x, const cgraph_int_t bit) {
  return (TYPE)(x | (((1U << bit) & FRAC_MASK) << FRAC_OFFSET));
}

TYPE FUNCTION(NAME, setfracs)(const TYPE x, const cgraph_int_t y) {
  return FLOAT_SOFT_FRAC_SET(x, y);
}

TYPE FUNCTION(NAME, clrfrac)(const TYPE x, const cgraph_int_t bit) {
  return (TYPE)(x & ((~((1U << bit) & FRAC_MASK)) << FRAC_OFFSET));
}

TYPE FUNCTION(NAME, clrfracs)(const TYPE x) { return FLOAT_SOFT_FRAC_CLR(x); }

TYPE FUNCTION(NAME, shlfrac)(const TYPE x, const cgraph_int_t y) {
  TYPE res = FLOAT_SOFT_FRAC_CLR(x);
  res += FLOAT_SOFT_TOFRAC(FLOAT_SOFT_FRAC(x) << y);

  return res;
}

TYPE FUNCTION(NAME, shrfrac)(const TYPE x, const cgraph_int_t y) {
  TYPE res = FLOAT_SOFT_FRAC_CLR(x);
  res += FLOAT_SOFT_TOFRAC(FLOAT_SOFT_FRAC(x) >> y);

  return res;
}

TYPE FUNCTION(NAME, addfrac)(const TYPE x, const cgraph_int_t y) {
  TYPE res = FLOAT_SOFT_FRAC_CLR(x);
  res += FLOAT_SOFT_TOFRAC(FLOAT_SOFT_FRAC(x) + y);

  return res;
}

TYPE FUNCTION(NAME, subfrac)(const TYPE x, const cgraph_int_t y) {
  TYPE res = FLOAT_SOFT_FRAC_CLR(x);
  res += FLOAT_SOFT_TOFRAC(FLOAT_SOFT_FRAC(x) - y);

  return res;
}

TYPE FUNCTION(NAME, mulfrac)(const TYPE x, const cgraph_int_t y) {
  TYPE res = FLOAT_SOFT_FRAC_CLR(x);
  res += FLOAT_SOFT_TOFRAC(FLOAT_SOFT_FRAC(x) * y);

  return res;
}

TYPE FUNCTION(NAME, divfrac)(const TYPE x, const cgraph_int_t y) {
  TYPE res = FLOAT_SOFT_FRAC_CLR(x);
  res += FLOAT_SOFT_TOFRAC(FLOAT_SOFT_FRAC(x) / y);

  return res;
}

TYPE FUNCTION(NAME, setexp)(const TYPE x, const cgraph_int_t bit) {
  return (TYPE)(x | (((1U << bit) & EXP_MASK) << EXP_OFFSET));
}

TYPE FUNCTION(NAME, setexps)(const TYPE x, const cgraph_int_t y) {
  return FLOAT_SOFT_EXP_SET(x, y);
}

TYPE FUNCTION(NAME, clrexp)(const TYPE x, const cgraph_int_t bit) {
  return (TYPE)(x & ((~((1U << bit) & EXP_MASK)) << EXP_OFFSET));
}

TYPE FUNCTION(NAME, clrexps)(const TYPE x) { return FLOAT_SOFT_EXP_CLR(x); }

TYPE FUNCTION(NAME, shlexp)(const TYPE x, const cgraph_int_t y) {
  TYPE res = FLOAT_SOFT_EXP_CLR(x);
  res += FLOAT_SOFT_TOEXP(FLOAT_SOFT_EXP(x) << y);

  return res;
}

TYPE FUNCTION(NAME, shrexp)(const TYPE x, const cgraph_int_t y) {
  TYPE res = FLOAT_SOFT_EXP_CLR(x);
  res += FLOAT_SOFT_TOEXP(FLOAT_SOFT_EXP(x) >> y);

  return res;
}

TYPE FUNCTION(NAME, addexp)(const TYPE x, const cgraph_int_t y) {
  TYPE res = FUNCTION(NAME, clrexps)(x);
  res += FLOAT_SOFT_TOEXP(FLOAT_SOFT_EXP(x) + y);

  return res;
}

TYPE FUNCTION(NAME, subexp)(const TYPE x, const cgraph_int_t y) {
  TYPE res = FUNCTION(NAME, clrexps)(x);
  res += FLOAT_SOFT_TOEXP(FLOAT_SOFT_EXP(x) - y);

  return res;
}

TYPE FUNCTION(NAME, mulexp)(const TYPE x, const cgraph_int_t y) {
  TYPE res = FUNCTION(NAME, clrexps)(x);
  res += FLOAT_SOFT_TOEXP(FLOAT_SOFT_EXP(x) * y);

  return res;
}

TYPE FUNCTION(NAME, divexp)(const TYPE x, const cgraph_int_t y) {
  TYPE res = FUNCTION(NAME, clrexps)(x);
  res += FLOAT_SOFT_TOEXP(FLOAT_SOFT_EXP(x) / y);

  return res;
}

TYPE FUNCTION(NAME, initf32)(const cgraph_float32_t x) {
  TYPE res;

  return res;
}

cgraph_float32_t FUNCTION(NAME, tof32)(const TYPE x) {
  cgraph_float32_t res;

  return res;
}

TYPE FUNCTION(NAME, initf64)(const cgraph_float64_t x) {
  TYPE res;

  return res;
}

cgraph_float64_t FUNCTION(NAME, tof64)(const TYPE x) {
  cgraph_float64_t res;

  return res;
}
