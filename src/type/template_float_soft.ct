/**
 * software-defined float point numbers
 * IEEE Standard 754 for Binary Floating-Point Arithmetic
 * Refered from
 * https://people.eecs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF
 * stored in memory:
 * msb                                    lsb
 * [sign bit] [exponent bits] [fraction bits]
 * x = frac * 2 ^ (exp - bias)
 * |          | sig(ub) | exp(ub) | frac(ub) | bias(ud) |
 * |   :-:    |   :-:   |   :-:   |   :-:    |   :-:    |
 * | float8   |    1    |     3   |      4   |       3  |
 * | float16  |    1    |     7   |      8   |      63  |
 * | float32  |    1    |     8   |     23   |     127  |
 * | float64  |    1    |    11   |     52   |    1023  |
 * | float80  |    1    |    15   |     63   |   16383  |
 * | float128 |    1    |    15   |    112   |   16383  |
 * where ub means unsigned bit
 *       ud means unsigned decimal number
 */

TYPE FUNCTION(NAME, setfrac_s)(const TYPE x, const cgraph_int_t y) {
  return (TYPE)(x | (((1U << y) & FRAC_MASK) << FRAC_OFFSET));
}

TYPE FUNCTION(NAME, setfracs_s)(const TYPE x, const cgraph_int_t y) {
  return FLOAT_SOFT_FRAC_SET(x, y);
}

TYPE FUNCTION(NAME, clrfrac_s)(const TYPE x, const cgraph_int_t y) {
  return (TYPE)(x & ((~((1U << y) & FRAC_MASK)) << FRAC_OFFSET));
}

TYPE FUNCTION(NAME, clrfracs_s)(const TYPE x) { return FLOAT_SOFT_FRAC_CLR(x); }

TYPE FUNCTION(NAME, shlfrac_s)(const TYPE x, const cgraph_int_t y) {
  TYPE res = FLOAT_SOFT_FRAC_CLR(x);
  res += FLOAT_SOFT_TOFRAC(FLOAT_SOFT_FRAC(x) << y);

  return res;
}

TYPE FUNCTION(NAME, shrfrac_s)(const TYPE x, const cgraph_int_t y) {
  TYPE res = FLOAT_SOFT_FRAC_CLR(x);
  res += FLOAT_SOFT_TOFRAC(FLOAT_SOFT_FRAC(x) >> y);

  return res;
}

TYPE FUNCTION(NAME, addfrac_s)(const TYPE x, const cgraph_int_t y) {
  TYPE res = FLOAT_SOFT_FRAC_CLR(x);
  res += FLOAT_SOFT_TOFRAC(FLOAT_SOFT_FRAC(x) + y);

  return res;
}

TYPE FUNCTION(NAME, subfrac_s)(const TYPE x, const cgraph_int_t y) {
  TYPE res = FLOAT_SOFT_FRAC_CLR(x);
  res += FLOAT_SOFT_TOFRAC(FLOAT_SOFT_FRAC(x) - y);

  return res;
}

TYPE FUNCTION(NAME, mulfrac_s)(const TYPE x, const cgraph_int_t y) {
  TYPE res = FLOAT_SOFT_FRAC_CLR(x);
  res += FLOAT_SOFT_TOFRAC(FLOAT_SOFT_FRAC(x) * y);

  return res;
}

TYPE FUNCTION(NAME, divfrac_s)(const TYPE x, const cgraph_int_t y) {
  TYPE res = FLOAT_SOFT_FRAC_CLR(x);
  res += FLOAT_SOFT_TOFRAC(FLOAT_SOFT_FRAC(x) / y);

  return res;
}

TYPE FUNCTION(NAME, setexp_s)(const TYPE x, const cgraph_int_t y) {
  return (TYPE)(x | (((1U << y) & EXP_MASK) << EXP_OFFSET));
}

TYPE FUNCTION(NAME, setexps_s)(const TYPE x, const cgraph_int_t y) {
  return FLOAT_SOFT_EXP_SET(x, y);
}

TYPE FUNCTION(NAME, clrexp_s)(const TYPE x, const cgraph_int_t y) {
  return (TYPE)(x & ((~((1U << y) & EXP_MASK)) << EXP_OFFSET));
}

TYPE FUNCTION(NAME, clrexps_s)(const TYPE x) { return FLOAT_SOFT_EXP_CLR(x); }

TYPE FUNCTION(NAME, shlexp_s)(const TYPE x, const cgraph_int_t y) {
  TYPE res = FLOAT_SOFT_EXP_CLR(x);
  res += FLOAT_SOFT_TOEXP(FLOAT_SOFT_EXP(x) << y);

  return res;
}

TYPE FUNCTION(NAME, shrexp_s)(const TYPE x, const cgraph_int_t y) {
  TYPE res = FLOAT_SOFT_EXP_CLR(x);
  res += FLOAT_SOFT_TOEXP(FLOAT_SOFT_EXP(x) >> y);

  return res;
}

TYPE FUNCTION(NAME, addexp_s)(const TYPE x, const cgraph_int_t y) {
  TYPE res = FUNCTION(NAME, clrexps_s)(x);
  res += FLOAT_SOFT_TOEXP(FLOAT_SOFT_EXP(x) + y);

  return res;
}

TYPE FUNCTION(NAME, subexp_s)(const TYPE x, const cgraph_int_t y) {
  TYPE res = FUNCTION(NAME, clrexps_s)(x);
  res += FLOAT_SOFT_TOEXP(FLOAT_SOFT_EXP(x) - y);

  return res;
}

TYPE FUNCTION(NAME, mulexp_s)(const TYPE x, const cgraph_int_t y) {
  TYPE res = FUNCTION(NAME, clrexps_s)(x);
  res += FLOAT_SOFT_TOEXP(FLOAT_SOFT_EXP(x) * y);

  return res;
}

TYPE FUNCTION(NAME, divexp_s)(const TYPE x, const cgraph_int_t y) {
  TYPE res = FUNCTION(NAME, clrexps_s)(x);
  res += FLOAT_SOFT_TOEXP(FLOAT_SOFT_EXP(x) / y);

  return res;
}

TYPE FUNCTION(NAME, initf32)(const cgraph_float32_t x) {
  TYPE res;

  return res;
}

cgraph_float32_t FUNCTION(NAME, tof32)(const TYPE x) {
  cgraph_float32_t res;

  return res;
}

TYPE FUNCTION(NAME, initf64)(const cgraph_float64_t x) {
  TYPE res;

  return res;
}

cgraph_float64_t FUNCTION(NAME, tof64)(const TYPE x) {
  cgraph_float64_t res;

  return res;
}

TYPE FUNCTION(NAME, opp_s)(const TYPE x) {
  return (TYPE)(x ^ (SIG_MASK << SIG_OFFSET));
}

TYPE FUNCTION(NAME, fabs_s)(const TYPE x) {
  return (TYPE)(x | (SIG_MASK << SIG_OFFSET));
}

TYPE FUNCTION(NAME, inv_s)(const TYPE x) {
  TYPE res;

  return res;
}

cgraph_bool_t FUNCTION(NAME, eq_s)(const TYPE x, const TYPE y) {
  cgraph_bool_t flag = CGRAPH_FALSE;

  return flag;
}

cgraph_bool_t FUNCTION(NAME, ne_s)(const TYPE x, const TYPE y) {
  return CGRAPH_NTEST(FUNCTION(NAME, eq_s)(x, y));
}

cgraph_bool_t FUNCTION(NAME, gr_s)(const TYPE x, const TYPE y) {
  cgraph_bool_t flag = CGRAPH_FALSE;
  if ((FLOAT_SOFT_EXP(x) > FLOAT_SOFT_EXP(y)) ||
      ((FLOAT_SOFT_EXP(x) == FLOAT_SOFT_EXP(y)) &&
       (FLOAT_SOFT_FRAC(x) > FLOAT_SOFT_FRAC(y)))) {
    flag = CGRAPH_TRUE;
  }
  if ((FLOAT_SOFT_SIG(x) > FLOAT_SOFT_SIG(y)) ||
      ((FLOAT_SOFT_SIG(x) == FLOAT_SOFT_SIG(y)) && FLOAT_SOFT_SIG(x))) {
    flag = CGRAPH_NTEST(flag);
  }

  return flag;
}

cgraph_bool_t FUNCTION(NAME, ge_s)(const TYPE x, const TYPE y) {
  return CGRAPH_NTEST(FUNCTION(NAME, gr_s)(y, x));
}

cgraph_bool_t FUNCTION(NAME, ls_s)(const TYPE x, const TYPE y) {
  return FUNCTION(NAME, gr_s)(y, x);
}

cgraph_bool_t FUNCTION(NAME, le_s)(const TYPE x, const TYPE y) {
  return CGRAPH_NTEST(FUNCTION(NAME, gr)(x, y));
}

TYPE FUNCTION(NAME, add_s)(const TYPE x, const TYPE y) {
  TYPE res, _x = x, _y = y;
  while (1) {
    if (FLOAT_SOFT_EXP(_x) > FLOAT_SOFT_EXP(_y)) {
      _y = FUNCTION(NAME, addexp_s)(_y, 1);
      _y = FUNCTION(NAME, shrfrac_s)(_y, 1);
    } else if (FLOAT_SOFT_EXP(_x) < FLOAT_SOFT_EXP(_y)) {
      _x = FUNCTION(NAME, addexp_s)(_x, 1);
      _x = FUNCTION(NAME, shlfrac_s)(_x, 1);
    } else {
      break;
    }
  }
  res = FLOAT_SOFT_TOFRAC(FLOAT_SOFT_FRAC(_x) + FLOAT_SOFT_FRAC(_y));
  res += FLOAT_SOFT_TOEXP(FLOAT_SOFT_EXP(_x));

  return res;
}

TYPE FUNCTION(NAME, sub_s)(const TYPE x, const TYPE y) {
  return FUNCTION(NAME, add_s)(x, FUNCTION(NAME, opp_s)(y));
}

TYPE FUNCTION(NAME, mul_s)(const TYPE x, const TYPE y) {
  TYPE res = FLOAT_SOFT_TOEXP(FLOAT_SOFT_EXP(x) + FLOAT_SOFT_EXP(y));
  res += FLOAT_SOFT_TOFRAC(FLOAT_SOFT_FRAC(x) * FLOAT_SOFT_FRAC(y));
  res = (FLOAT_SOFT_SIG(x) == FLOAT_SOFT_SIG(y)) ? FUNCTION(NAME, fabs_s)(res)
                                                 : FUNCTION(NAME, opp_s)(res);

  return res;
}

TYPE FUNCTION(NAME, div_s)(const TYPE x, const TYPE y) {
  TYPE res = FLOAT_SOFT_TOEXP(FLOAT_SOFT_EXP(x) - FLOAT_SOFT_EXP(y));
  res += FLOAT_SOFT_TOFRAC(FLOAT_SOFT_FRAC(x) / FLOAT_SOFT_FRAC(y));
  res = (FLOAT_SOFT_SIG(x) == FLOAT_SOFT_SIG(y)) ? FUNCTION(NAME, fabs_s)(res)
                                                 : FUNCTION(NAME, opp_s)(res);

  return res;
}

cgraph_int_t FUNCTION(NAME, frexp_s)(const TYPE x, cgraph_int_t *y) {
  if (NULL != y) {
    *y = FLOAT_SOFT_EXP(x);
  }

  return FLOAT_SOFT_FRAC(x);
}

TYPE FUNCTION(NAME, int_s)(const TYPE x, const TYPE y) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, mod_s)(const TYPE x, const TYPE y) {
  TYPE res = 0;

  return res;
}

cgraph_int_t FUNCTION(NAME, floor_s)(const TYPE x) {
  cgraph_int_t res = 0;

  return res;
}

cgraph_int_t FUNCTION(NAME, ceil_s)(const TYPE x) {
  cgraph_int_t res = 0;

  return res;
}

TYPE FUNCTION(NAME, fmod_s)(const TYPE x, const TYPE y) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, modf_s)(const TYPE x, const TYPE *y) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, abs_s)(const TYPE x) {
  TYPE res = (TYPE)x;
#if __PLAT_ENDIAN == __PLAT_ENDIAN_LITTLE
  ((cgraph_uint8_t *)(&res))[0] &= 0x7F;
#elif __PLAT_ENDIAN == __PLAT_ENDIAN_BIG
  ((cgraph_uint8_t *)(&res))[TYPE_BITS - 1] &= 0x7F;
#else
  cgraph_bool_t isbigendian = CGRAPH_TRUE;
  cgraph_file_os(NULL, NULL, NULL, &isbigendian);
  if (CGRAPH_TRUE == isbigendian) {
    ((cgraph_uint8_t *)(&res))[TYPE_BITS - 1] &= 0x7F;
  } else {
    ((cgraph_uint8_t *)(&res))[0] &= 0x7F;
  }
#endif

  return res;
}

TYPE FUNCTION(NAME, log_s)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, log2_s)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, log10_s)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, exp_s)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, sqrt_s)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, pow_s)(const TYPE x, const TYPE y) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, sin_s)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, cos_s)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, tan_s)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, cot_s)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, sec_s)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, csc_s)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, sinh_s)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, cosh_s)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, tanh_s)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, coth_s)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, sech_s)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, csch_s)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, asin_s)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, acos_s)(const TYPE x) {
  TYPE res = 0;

  return res;
}

TYPE FUNCTION(NAME, atan_s)(const TYPE x) {
  TYPE res = 0;

  return res;
}

#include "template_float.ct"
