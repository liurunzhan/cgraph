#include "template_data.ct"

__INLINE__ cgraph_bool_t FUNCTION(NAME, check)(const TYPE cthis) {
#if defined(TYPE_BOOL) || defined(TYPE_LOGIC)
  return CGRAPH_TEST(0 == (cthis & (~MASK)));
#else
  return CGRAPH_TRUE;
#endif
}

/**
 * Fowlerï¼ŒLandon Curt Noll and Phong Vo in 1991) :
 * begin_of_algorithm
 * hash = offset_basis for byte_of_data in data
 * begin
 *   hash = hash ^ byte_of_data
 *   hash = hash * fnv_prime
 * end
 * return hash
 * end_of_algorithm
 *
 * where :
 * 32-bit offset_basis : 2166136261
 * 32-bit fnv_prime    : 16777619 = 2^24 + 2^8 + 0x93
 * 64-bit offset_basis : 14695981039346656037
 * 64-bit fnv_prime    : 1099511628211 = 2^40 + 2^8 + 0xb3
 */
cgraph_size_t FUNCTION(NAME, hash)(const TYPE cthis) {
#if defined(TYPE_INT)
  cgraph_size_t hash = 2166136261UL;
  char *byte = (char *)&cthis;
  cgraph_size_t i;
  for (i = 0; i < sizeof(TYPE); i++) {
    hash = (hash ^ byte[i]) * 16777619UL;
  }
#elif defined(TYPE_INT32) || defined(TYPE_LONG_SIZE32)
  cgraph_size_t hash = 0;
  hash = ((cthis >> 16) ^ cthis) * 0x45d9f3b;
  hash = ((hash >> 16) ^ hash) * 0x45d9f3b;
  hash = (hash >> 16) ^ hash;
#elif defined(TYPE_INT64) || defined(TYPE_LONG_SIZE64)
  cgraph_size_t hash = 0;
#elif defined(TYPE_INT128)
  cgraph_size_t hash = 0;
#else
  cgraph_size_t hash = cthis;
#endif

  return hash;
}

cgraph_size_t FUNCTION(NAME, fprint)(FILE *fp, const TYPE cthis) {
  return cgraph_file_fprintf(fp, OUT_FMT,
#if defined(TYPE_BOOL) || defined(TYPE_LOGIC) || defined(TYPE_INT128)
                             FUNCTION(NAME, encode)(cthis)
#else
                             cthis
#endif
  );
}

cgraph_size_t FUNCTION(NAME, snprint)(cgraph_char_t *cbuf,
                                      const cgraph_size_t size,
                                      const TYPE cthis) {

  return cgraph_file_snprintf(cbuf, size, OUT_FMT,
#if defined(TYPE_BOOL) || defined(TYPE_LOGIC) || defined(TYPE_INT128)
                              FUNCTION(NAME, encode)(cthis)
#else
                              cthis
#endif
  );
}

__INLINE__ cgraph_int_t FUNCTION(NAME, signbit)(const TYPE x) {
  return CGRAPH_BFLAG(x, BITS);
}

__INLINE__ TYPE FUNCTION(NAME, zero)(void) { return ZERO; }

__INLINE__ TYPE FUNCTION(NAME, one)(void) { return ONE; }

__INLINE__ TYPE FUNCTION(NAME, ones)(void) { return ONES; }

TYPE FUNCTION(NAME, rand)(void) {
#if defined(TYPE_INT64) || defined(TYPE_LONG_SIZE64)
  return cgraph_rand64_rand();
#else
  return cgraph_rand32_rand() & MASK;
#endif
}

UTYPE FUNCTION(NAME, urand)(void) { return (UTYPE)FUNCTION(NAME, rand)(); }

__INLINE__ TYPE FUNCTION(NAME, inv)(const TYPE x) {
  return (ONE == x) ? ONE : ZERO;
}

__INLINE__ TYPE FUNCTION(NAME, unit)(void) { return ONE; }

__INLINE__ TYPE FUNCTION(NAME, unit_inv)(void) { return ONE; }

__INLINE__ TYPE FUNCTION(NAME, min)(void) { return MIN; }

__INLINE__ TYPE FUNCTION(NAME, max)(void) { return MAX; }

__INLINE__ TYPE FUNCTION(NAME, nan)(void) { return NAN; }

__INLINE__ TYPE FUNCTION(NAME, inf)(void) { return MAX; }

__INLINE__ TYPE FUNCTION(NAME, pinf)(void) { return MAX; }

__INLINE__ TYPE FUNCTION(NAME, ninf)(void) { return MIN; }

TYPE *FUNCTION(NAME, initargs)(TYPE *cthis, const cgraph_size_t size,
                               const TYPE first, ...) {
  if (CGRAPH_ISBUF(cthis, size)) {
    cgraph_size_t i = 1;
    va_list args;
    va_start(args, first);
    cthis[0] = (TYPE)first;
    for (i = 1; i < size; i++) {
      cthis[i] = (TYPE)va_arg(args, ARG);
    }
    va_end(args);
  }

  return cthis;
}

TYPE FUNCTION(NAME, gcd)(const TYPE x, const TYPE y) {
  UTYPE _x = CGRAPH_ABS(x), _y = CGRAPH_ABS(y);
  if (1 >= _x) {
    return _x;
  }
  if ((1 >= _y)) {
    return _y;
  }
#if BITS > 16
  if (_x > (_y << 8) || (_y > (_x << 8))) {
    while ((_x %= _y) && (_y %= _x)) {
    }
    _x += _y;
  } else {
#endif
    while (_x != _y) {
      if (_x < _y) {
        SWAP(_x, _y);
      }
      _x -= _y;
      if ((1 == _x) || (1 == _y)) {
        _x = 1;
        break;
      }
    }
#if BITS > 16
  }
#endif

  return (TYPE)_x;
}

TYPE FUNCTION(NAME, lcm)(const TYPE x, const TYPE y) {
  TYPE gcd = FUNCTION(NAME, gcd)(x, y);
  return ((0 == gcd) ? 0 : ((1 == gcd) ? (x * y) : (x / gcd * y)));
}

__INLINE__ TYPE FUNCTION(NAME, mod2)(const TYPE x, const TYPE y) {
#if defined(TYPE_BOOL) || defined(TYPE_LOGIC)
  return (CGRAPH_FALSE != y) ? x : CGRAPH_FALSE;
#else
  return ((y < BITS) && (y >= 0)) ? (x & (~(MIN << y))) : x;
#endif
}

__INLINE__ TYPE FUNCTION(NAME, ceil)(const TYPE x) { return x; }

__INLINE__ TYPE FUNCTION(NAME, floor)(const TYPE x) { return x; }

__INLINE__ TYPE FUNCTION(NAME, ceil2x)(const TYPE x, const TYPE y) {
  return (x + y - 1) / y;
}

__INLINE__ TYPE FUNCTION(NAME, floor2x)(const TYPE x, const TYPE y) {
  return x / y;
}

__INLINE__ cgraph_size_t FUNCTION(NAME, bitceil)(const cgraph_size_t bits) {
  return (bits + BITS - 1) & (~(BITS - 1));
}

__INLINE__ cgraph_size_t FUNCTION(NAME, ubitceil)(const cgraph_size_t bits) {
  return (bits + BITS - 1) & (~(BITS - 1));
}

__INLINE__ cgraph_size_t FUNCTION(NAME, bitfloor)(const cgraph_size_t bits) {
  return bits >> L2BITS;
}

__INLINE__ cgraph_size_t FUNCTION(NAME, ubitfloor)(const cgraph_size_t bits) {
  return bits >> L2BITS;
}

__INLINE__ cgraph_size_t FUNCTION(NAME, bitmod)(const cgraph_size_t bits) {
  return bits & (BITS - 1);
}

__INLINE__ cgraph_size_t FUNCTION(NAME, ubitmod)(const cgraph_size_t bits) {
  return bits & (BITS - 1);
}

__INLINE__ cgraph_bool_t FUNCTION(NAME, inrange)(const TYPE start,
                                                 const TYPE end,
                                                 const TYPE num) {
  return (start < end) ? CGRAPH_TEST((UTYPE)(num - start) < (end - start))
                       : CGRAPH_TEST((UTYPE)(num - end) < (start - end));
}

__INLINE__ cgraph_bool_t FUNCTION(NAME,
                                  in2ranges)(const TYPE start0, const TYPE end0,
                                             const TYPE start1, const TYPE end1,
                                             const TYPE num) {
  return FUNCTION(NAME, inrange)(start0, end0, num) &&
         FUNCTION(NAME, inrange)(start1, end1, num);
}

__INLINE__ cgraph_bool_t FUNCTION(NAME,
                                  in3ranges)(const TYPE start0, const TYPE end0,
                                             const TYPE start1, const TYPE end1,
                                             const TYPE start2, const TYPE end2,
                                             const TYPE num) {
  return FUNCTION(NAME, inrange)(start0, end0, num) &&
         FUNCTION(NAME, inrange)(start1, end1, num) &&
         FUNCTION(NAME, inrange)(start2, end2, num);
}

cgraph_size_t FUNCTION(NAME, startswith0)(const TYPE x) {
  cgraph_size_t cnt = 0;
  UTYPE mask = MSB;
  for (; mask && (!(mask & x)); mask >>= 1, cnt++) {
  }

  return cnt;
}

cgraph_size_t FUNCTION(NAME, startswith1)(const TYPE x) {
  cgraph_size_t cnt = 0;
  UTYPE mask = MSB;
  for (; mask && (mask & x); mask >>= 1, cnt++) {
  }

  return cnt;
}

cgraph_size_t FUNCTION(NAME, endswith0)(const TYPE x) {
  cgraph_size_t cnt = 0;
  UTYPE mask = LSB;
  for (; mask && (!(mask & x)); mask <<= 1, cnt++) {
  }

  return cnt;
}

cgraph_size_t FUNCTION(NAME, endswith1)(const TYPE x) {
  cgraph_size_t cnt = 0;
  UTYPE mask = LSB;
  for (; mask && (!(mask & x)); mask <<= 1, cnt++) {
  }

  return cnt;
}

cgraph_size_t FUNCTION(NAME, max0)(const TYPE x) {
  cgraph_size_t cnt = 0, len = 0;
  UTYPE mask = LSB;
  CGRAPH_LOOP(i, 0, BITS)
  if (!(mask & x)) {
    cnt += 1;
    if (len < cnt) {
      len = cnt;
    }
  } else {
    cnt = 0;
  }
  mask <<= 1;
  CGRAPH_LOOP_END

  return len;
}

cgraph_size_t FUNCTION(NAME, max1)(const TYPE x) {
  cgraph_size_t cnt = 0, len = 0;
  UTYPE mask = LSB;
  CGRAPH_LOOP(i, 0, BITS)
  if (mask & x) {
    cnt += 1;
    if (len < cnt) {
      len = cnt;
    }
  } else {
    cnt = 0;
  }
  mask <<= 1;
  CGRAPH_LOOP_END

  return len;
}

cgraph_size_t FUNCTION(NAME, min0)(const TYPE x) {
  cgraph_size_t cnt = 0, len = BITS;
  UTYPE mask = LSB;
  CGRAPH_LOOP(i, 0, BITS)
  if (!(mask & x)) {
    cnt += 1;
    if (len > cnt) {
      len = cnt;
    }
  } else {
    cnt = 0;
  }
  mask <<= 1;
  CGRAPH_LOOP_END

  return len;
}

cgraph_size_t FUNCTION(NAME, min1)(const TYPE x) {
  cgraph_size_t cnt = 0, len = BITS;
  UTYPE mask = LSB;
  CGRAPH_LOOP(i, 0, BITS)
  if (mask & x) {
    cnt += 1;
    if (len > cnt) {
      len = cnt;
    }
  } else {
    cnt = 0;
  }
  mask <<= 1;
  CGRAPH_LOOP_END

  return len;
}

cgraph_size_t FUNCTION(NAME, abitlen)(const UTYPE data) {
#if defined(TYPE_BOOL) || defined(TYPE_LOGIC)
  return 1;
#else
  UTYPE _data = data;
  cgraph_size_t len = 0;
  while (0 != _data) {
    _data >>= 1;
    len += 1;
  }

  return (0 == len) ? 1 : len;
#endif
}

__INLINE__ TYPE FUNCTION(NAME, shl)(const TYPE x, const cgraph_size_t len) {
  const UTYPE ux = ABS(x), sign = (0 <= x) ? ZERO : MSB;

  return ((0 <= len) ? (ux << len) : (ux >> (-len))) | sign;
}

__INLINE__ TYPE FUNCTION(NAME, shr)(const TYPE x, const cgraph_size_t len) {
  return FUNCTION(NAME, shl)(x, -len);
}

__INLINE__ TYPE FUNCTION(NAME, rol)(const TYPE x, const cgraph_size_t len) {
  const UTYPE ux = ABS(x), sign = (0 <= x) ? ZERO : MSB, len_mod = len % BITS;

  return ((0 <= len_mod) ? ((ux << len_mod) | (ux >> (BITS - len_mod)))
                         : ((ux >> (-len_mod)) | (ux << (BITS + len_mod)))) |
         sign;
}

__INLINE__ TYPE FUNCTION(NAME, ror)(const TYPE x, const cgraph_size_t len) {
  return FUNCTION(NAME, rol)(x, -len);
}

__INLINE__ UTYPE FUNCTION(NAME, and)(const UTYPE x, const UTYPE y) {
  return AND(x, y);
}

__INLINE__ UTYPE FUNCTION(NAME, or)(const UTYPE x, const UTYPE y) {
  return OR(x, y);
}

__INLINE__ UTYPE FUNCTION(NAME, not )(const UTYPE x) { return NOT(x); }

__INLINE__ UTYPE FUNCTION(NAME, xor)(const UTYPE x, const UTYPE y) {
  return XOR(x, y);
}

__INLINE__ UTYPE FUNCTION(NAME, xnor)(const UTYPE x, const UTYPE y) {
  return XNOR(x, y);
}

__INLINE__ UTYPE FUNCTION(NAME, rotl)(const UTYPE x, const cgraph_size_t bits) {
  return CGRAPH_ROTL(x, BITS, bits);
}

__INLINE__ UTYPE FUNCTION(NAME, rotr)(const UTYPE x, const cgraph_size_t bits) {
  return CGRAPH_ROTR(x, BITS, bits);
}

__INLINE__ UTYPE FUNCTION(NAME, bit)(const UTYPE x,
                                     const cgraph_size_t position) {
  cgraph_size_t _position = CGRAPH_POS(position, BITS);
  return (BITS < _position) ? CGRAPH_BIT(x, _position) : 0;
}

__INLINE__ UTYPE FUNCTION(NAME, set)(const UTYPE x,
                                     const cgraph_size_t position) {
  cgraph_size_t _position = CGRAPH_POS(position, BITS);
  return (BITS < _position) ? CGRAPH_BSET(x, _position) : x;
}

__INLINE__ UTYPE FUNCTION(NAME, clr)(const UTYPE x,
                                     const cgraph_size_t position) {
  cgraph_size_t _position = CGRAPH_POS(position, BITS);
  return (BITS < _position) ? CGRAPH_BCLR(x, _position) : x;
}

__INLINE__ UTYPE FUNCTION(NAME, bits)(const UTYPE x, const cgraph_size_t from,
                                      const cgraph_size_t to) {
  cgraph_size_t _from = CGRAPH_POS(from, BITS), _to = CGRAPH_POS(to, BITS);
  return (_to > _from) ? CGRAPH_BITS(x, _from, _to)
                       : (((_to < _from) ? CGRAPH_BITS(x, _to, _from)
                                         : ((x >> from) & ONE)));
}

__INLINE__ UTYPE FUNCTION(NAME, sets)(const UTYPE x, const cgraph_size_t from,
                                      const cgraph_size_t to) {
  cgraph_size_t _from = CGRAPH_POS(from, BITS), _to = CGRAPH_POS(to, BITS);
  return (_to > _from) ? CGRAPH_BSETS(x, _from, _to)
                       : ((_to < _from) ? CGRAPH_BSETS(x, _to, _from)
                                        : (x | (ONE << from)));
}

__INLINE__ UTYPE FUNCTION(NAME, clrs)(const UTYPE x, const cgraph_size_t from,
                                      const cgraph_size_t to) {
  cgraph_size_t _from = CGRAPH_POS(from, BITS), _to = CGRAPH_POS(to, BITS);
  return (_to > _from) ? CGRAPH_BCLRS(x, _from, _to)
                       : ((_to < _from) ? CGRAPH_BCLRS(x, _to, _from)
                                        : (x & (~(ONE << from))));
}

__INLINE__ UTYPE FUNCTION(NAME, swapbit)(const UTYPE x) {
#if defined(TYPE_BOOL) || defined(TYPE_LOGIC)
  return x;
#else
  UTYPE res = x;
  res = ((res & MASK1) >> 1) | ((res & ~MASK1) << 1);
  res = ((res & MASK2) >> 2) | ((res & ~MASK2) << 2);
  res = ((res & MASK4) >> 4) | ((res & ~MASK4) << 4);
#if defined(TYPE_INT16)
  res = ((res & MASK8) >> 8) | ((res & ~MASK8) << 8);
#elif defined(TYPE_INT32) || defined(TYPE_INT) || defined(TYPE_LONG_SIZE32)
  res = ((res & MASK8) >> 8) | ((res & ~MASK8) << 8);
  res = ((res & MASK16) >> 16) | ((res & ~MASK16) << 16);
#elif defined(TYPE_INT64) || defined(TYPE_LONG_SIZE64)
  res = ((res & MASK8) >> 8) | ((res & ~MASK8) << 8);
  res = ((res & MASK16) >> 16) | ((res & ~MASK16) << 16);
  res = ((res & MASK32) >> 32) | ((res & ~MASK32) << 32);
#endif

  return res;
#endif
}

__INLINE__ UTYPE FUNCTION(NAME, swapbyte)(const UTYPE x) {
#if defined(TYPE_BOOL) || defined(TYPE_LOGIC)
  return x;
#else
  UTYPE res = x;
#if defined(TYPE_INT16)
  res = ((res & MASK8) >> 8) | ((res & ~MASK8) << 8);
#elif defined(TYPE_INT32) || defined(TYPE_INT) || defined(TYPE_LONG_SIZE32)
  res = ((res & MASK8) >> 8) | ((res & ~MASK8) << 8);
  res = ((res & MASK16) >> 16) | ((res & ~MASK16) << 16);
#elif defined(TYPE_INT64) || defined(TYPE_LONG_SIZE64)
  res = ((res & MASK8) >> 8) | ((res & ~MASK8) << 8);
  res = ((res & MASK16) >> 16) | ((res & ~MASK16) << 16);
  res = ((res & MASK32) >> 32) | ((res & ~MASK32) << 32);
#endif

  return res;
#endif
}

__INLINE__ UTYPE FUNCTION(NAME, swaphfwd)(const UTYPE x) {
#if defined(TYPE_BOOL) || defined(TYPE_LOGIC)
  return x;
#else
  UTYPE res = x;
#if defined(TYPE_INT32) || defined(TYPE_INT) || defined(TYPE_LONG_SIZE32)
  res = ((res & MASK16) >> 16) | ((res & ~MASK16) << 16);
#elif defined(TYPE_INT64) || defined(TYPE_LONG_SIZE64)
  res = ((res & MASK16) >> 16) | ((res & ~MASK16) << 16);
  res = ((res & MASK32) >> 32) | ((res & ~MASK32) << 32);
#endif

  return res;
#endif
}

__INLINE__ UTYPE FUNCTION(NAME, swapword)(const UTYPE x) {
#if defined(TYPE_BOOL) || defined(TYPE_LOGIC)
  return x;
#else
  UTYPE res = x;
#if defined(TYPE_INT64) || defined(TYPE_LONG_SIZE64)
  res = ((res & MASK32) >> 32) | ((res & ~MASK32) << 32);
#endif

  return res;
#endif
}

__INLINE__ cgraph_bool_t FUNCTION(NAME, iszero)(const TYPE x) {
#if defined(TYPE_BOOL) || defined(TYPE_LOGIC)
  return CGRAPH_TEST((CGRAPH_FALSE == x));
#else
  return CGRAPH_TEST((ZERO == x));
#endif
}

__INLINE__ cgraph_bool_t FUNCTION(NAME, isone)(const TYPE x) {
#if defined(TYPE_BOOL) || defined(TYPE_LOGIC)
  return CGRAPH_TEST((CGRAPH_TRUE == x));
#else
  return CGRAPH_TEST((ONE == x));
#endif
}

__INLINE__ cgraph_bool_t FUNCTION(NAME, isodd)(const TYPE x) {
  return CGRAPH_TEST(x & LSB);
}

__INLINE__ cgraph_bool_t FUNCTION(NAME, iseven)(const TYPE x) {
  return CGRAPH_TEST((~x) & LSB);
}

__INLINE__ cgraph_bool_t FUNCTION(NAME, ispow2)(const TYPE x) {
  return CGRAPH_TEST(!(x & (x - 1)));
}

__INLINE__ cgraph_bool_t FUNCTION(NAME, ispos)(const TYPE x) {
  return CGRAPH_TEST((~x) >> (BITS - 1));
}

__INLINE__ cgraph_bool_t FUNCTION(NAME, isneg)(const TYPE x) {
  return CGRAPH_TEST(x >> (BITS - 1));
}

__INLINE__ cgraph_bool_t FUNCTION(NAME, ismin)(const TYPE x) {
  return CGRAPH_TEST((MIN == x));
}

__INLINE__ cgraph_bool_t FUNCTION(NAME, ismax)(const TYPE x) {
  return CGRAPH_TEST((MAX == x));
}

__INLINE__ cgraph_bool_t FUNCTION(NAME, isinf)(const TYPE x) {
  return CGRAPH_FALSE;
}

__INLINE__ cgraph_bool_t FUNCTION(NAME, ispinf)(const TYPE x) {
  return CGRAPH_FALSE;
}

__INLINE__ cgraph_bool_t FUNCTION(NAME, isninf)(const TYPE x) {
  return CGRAPH_FALSE;
}

__INLINE__ cgraph_bool_t FUNCTION(NAME, isx)(const TYPE x) {
#if defined(TYPE_LOGIC)
  return CGRAPH_TEST((CGRAPH_LX == x));
#else
  return CGRAPH_FALSE;
#endif
}

__INLINE__ cgraph_bool_t FUNCTION(NAME, isz)(const TYPE x) {
#if defined(TYPE_LOGIC)
  return CGRAPH_TEST((CGRAPH_LZ == x));
#else
  return CGRAPH_FALSE;
#endif
}

__INLINE__ cgraph_bool_t FUNCTION(NAME, isnan)(const TYPE x) {
#if defined(TYPE_LOGIC)
  return CGRAPH_TEST(DATA_ISNAN(x));
#else
  return CGRAPH_FALSE;
#endif
}

cgraph_bool_t FUNCTION(NAME, eq)(const TYPE x, const TYPE y) {
  return EQ(x, y);
}

cgraph_bool_t FUNCTION(NAME, gr)(const TYPE x, const TYPE y) {
  return GR(x, y);
}

__INLINE__ TYPE FUNCTION(NAME, add)(const TYPE x, const TYPE y) {
  return ADD(x, y);
}

__INLINE__ TYPE FUNCTION(NAME, sub)(const TYPE x, const TYPE y) {
  return SUB(x, y);
}

__INLINE__ TYPE FUNCTION(NAME, mul)(const TYPE x, const TYPE y) {
  return MUL(x, y);
}

__INLINE__ TYPE FUNCTION(NAME, div)(const TYPE x, const TYPE y) {
  return DIV(x, y);
}

__INLINE__ TYPE FUNCTION(NAME, pow)(const TYPE x, const TYPE y) {
  return POW(x, y);
}

__INLINE__ TYPE FUNCTION(NAME, mod)(const TYPE x, const TYPE y) {
  return MOD(x, y);
}

__INLINE__ TYPE FUNCTION(NAME, mean)(const TYPE x, const TYPE y) {
  return (x + y) / 2;
}

/** hmean(x, y) = 1/(1/x+1/y) = (xy)/(x+y) */
__INLINE__ TYPE FUNCTION(NAME, hmean)(const TYPE x, const TYPE y) {
  return (x * y) / (x + y);
}

cgraph_size_t FUNCTION(NAME, cntones)(const UTYPE x) {
#if defined(TYPE_BOOL) || defined(TYPE_LOGIC)
  return CGRAPH_TEST(x);
#else
  TYPE _x = x;
  cgraph_size_t cnt = 0;
  for (cnt = 0; _x; cnt++) {
    _x &= (_x - 1);
  }

  return cnt;
#endif
}

cgraph_size_t FUNCTION(NAME, cntzeros)(const UTYPE x) {
#if defined(TYPE_BOOL) || defined(TYPE_LOGIC)
  return CGRAPH_NTEST(x);
#else
  TYPE _x = x;
  cgraph_size_t cnt;
  if (0 == _x) {
    cnt = 1;
  } else {
    for (cnt = 0; _x; cnt++) {
      _x |= (_x + 1);
    }
  }

  return cnt;
#endif
}

UTYPE FUNCTION(NAME, lsfr)(const UTYPE data, const UTYPE poly) {
  cgraph_size_t i;
  UTYPE msb = (data >> (BITS - 1)) ^ 1, bit, result = 0;
  for (i = BITS - 2; i >= 0; i--) {
    bit = (poly >> i) ^ 1;
    if (1 == bit) {
      result += bit ^ ((data >> i) ^ 1) ^ msb;
    } else {
      result += (data >> i) ^ 1;
    }
    result = result << 1;
  }
  result += msb;

  return result;
}

UTYPE FUNCTION(NAME, crc)(const UTYPE predata, const UTYPE data,
                          const UTYPE poly) {
  UTYPE res = (predata & MASK), temp = (data & res & MASK), msb = 0;
  cgraph_size_t i = 0;
  for (i = 0; i < BITS; i++) {
    msb = (((res ^ temp) >> (BITS - 1)) & 1);
    if (msb == 1) {
      res = (((res << 1) ^ MASK) & poly);
    } else {
      res = (res << 1);
    }
    temp = (temp << 1);
  }

  return res;
}

#include "template_int_soft.ct"
