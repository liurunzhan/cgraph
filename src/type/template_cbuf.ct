/** c-type buffer */
#ifndef CGRAPH_CBUF_SIZE
#error undefined needed macro CGRAPH_CBUF_SIZE
#endif

#ifndef CGRAPH_CBUF_PTR
#error undefined needed macro CGRAPH_CBUF_PTR
#endif

static cgraph_char_t __cgraph_cbuf__[CGRAPH_CBUF_SIZE];
/**
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   NOTICE   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 * The address that CGRAPH_CBUF_PTR points to can be changed by other processes,
 * therefore, CGRAPH_CBUF_PTR is defined as "cgraph_char_t *volatile" to
 * prevent from over-optimization by compilers.
 */
static cgraph_char_t *volatile CGRAPH_CBUF_PTR = __cgraph_cbuf__;

#define CGRAPH_CBUF_LEN                                                        \
  (*(cgraph_size_t *)(CGRAPH_CBUF_PTR - sizeof(cgraph_size_t)))

__INLINE__ cgraph_size_t FUNCTION(NAME, buflen)(void) {
  cgraph_size_t buflen = CGRAPH_CBUF_SIZE;
  if (__cgraph_cbuf__ != CGRAPH_CBUF_PTR) {
    buflen = CGRAPH_CBUF_LEN;
  }

  return buflen;
}

void FUNCTION(NAME, bufclr)(void) {
  cgraph_memset(CGRAPH_CBUF_PTR, 0, FUNCTION(NAME, buflen)());
}

void FUNCTION(NAME, bufput)(FILE *fp, const cgraph_size_t len) {
  cgraph_char_t *ptr = CGRAPH_CBUF_PTR;
  cgraph_size_t buflen = CGRAPH_CBUF_SIZE, len_min;
  if (__cgraph_cbuf__ != CGRAPH_CBUF_PTR) {
    ptr -= sizeof(cgraph_size_t);
    buflen = *(cgraph_size_t *)ptr;
  }
  len_min = (0 < len) ? CGRAPH_MIN(buflen, len) : buflen;
  CGRAPH_LOOP(i, 0, len_min)
  fputc(cgraph_math_dec2hex((CGRAPH_CBUF_PTR[i] >> 8) & 0xFF), fp);
  fputc(cgraph_math_dec2hex(CGRAPH_CBUF_PTR[i] & 0xFF), fp);
  CGRAPH_LOOP_END
}

void FUNCTION(NAME, bufputln)(FILE *fp, const cgraph_size_t len) {
  FUNCTION(NAME, bufput)(fp, len);
  cgraph_file_fprintln(fp);
}

void FUNCTION(NAME, bufmem)(const cgraph_size_t size) {
  if (CGRAPH_CBUF_SIZE < size) {
    cgraph_char_t *ptr = NULL;
    cgraph_bool_t error = CGRAPH_FALSE;
    if (__cgraph_cbuf__ == CGRAPH_CBUF_PTR) {
      ptr = cgraph_calloc(sizeof(cgraph_size_t) + size);
    } else {
      ptr = CGRAPH_CBUF_PTR - sizeof(cgraph_size_t);
      ptr = cgraph_realloc(ptr, sizeof(cgraph_size_t) + CGRAPH_CBUF_LEN,
                           sizeof(cgraph_size_t) + size, &error);
    }
    if ((NULL != ptr) && (CGRAPH_FALSE == error)) {
      *(cgraph_size_t *)ptr = size;
      ptr += sizeof(cgraph_size_t);
    } else {
      ptr = __cgraph_cbuf__;
    }
    CGRAPH_CBUF_PTR = ptr;
  } else {
    FUNCTION(NAME, bufdel)();
  }
}

__INLINE__ void FUNCTION(NAME, bufdel)(void) {
  if (__cgraph_cbuf__ != CGRAPH_CBUF_PTR) {
    cgraph_char_t *ptr = CGRAPH_CBUF_PTR - sizeof(cgraph_size_t);
    cgraph_free(ptr);
    CGRAPH_CBUF_PTR = __cgraph_cbuf__;
  } else {
    cgraph_memset(__cgraph_cbuf__, 0, CGRAPH_CBUF_SIZE);
  }
}
