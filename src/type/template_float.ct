#include "template_data.ct"

cgraph_char_t *FUNCTION(NAME, encode)(const TYPE x) { return ""; }

cgraph_size_t FUNCTION(NAME, hash)(const TYPE cthis) {
  cgraph_size_t hash = 0;
  if (DATA_ISNAN(cthis)) {
    hash = CGRAPH_FLOAT_NAN_HASH;
  } else if (DATA_ISPINF(cthis)) {
    hash = CGRAPH_FLOAT_PINF_HASH;
  } else if (DATA_ISNINF(cthis)) {
    hash = CGRAPH_FLOAT_NINF_HASH;
  } else {
    TYPE ipart = floor(cthis), fpart = cthis - ipart;
    cgraph_size_t hash_ipart = (cgraph_size_t)(ipart),
                  hash_fpart = (cgraph_size_t)(((TYPE)ABS(fpart - EPSILON)) *
                                               EPSILON_LEN);
    hash = (hash_ipart << HASH_OFFSET) ^ hash_fpart;
  }

  return CGRAPH_ABS(hash);
}

cgraph_bool_t FUNCTION(NAME, check)(const TYPE cthis) {
  return CGRAPH_TEST(DATA_TEST(cthis));
}

cgraph_size_t FUNCTION(NAME, fprint)(FILE *fp, const TYPE cthis) {
  return fprintf(fp, OUT_FMT,
#if defined(TYPE_FLOAT32) || defined(TYPE_FLOAT64)
                 cthis
#else
                 FUNCTION(NAME, encode)(cthis)
#endif
  );
}

cgraph_size_t FUNCTION(NAME, snprint)(cgraph_char_t *cbuf,
                                      const cgraph_size_t size,
                                      const TYPE cthis) {
  return cgraph_file_snprintf(cbuf, size, OUT_FMT,
#if defined(TYPE_FLOAT32) || defined(TYPE_FLOAT64)
                              cthis
#else
                              FUNCTION(NAME, encode)(cthis)
#endif
  );
}

TYPE *FUNCTION(NAME, initargs)(TYPE *cthis, const cgraph_size_t size,
                               const TYPE first, ...) {
  if (CGRAPH_ISBUF(cthis, size)) {
    va_list args;
    cgraph_size_t i = 1;
    va_start(args, first);
    cthis[0] = (TYPE)first;
    for (i = 1; i < size; i++) {
      cthis[i] = (TYPE)va_arg(args, ARG);
    }
    va_end(args);
  }

  return cthis;
}

__INLINE TYPE FUNCTION(NAME, zero)(void) { return ZERO; }

__INLINE TYPE FUNCTION(NAME, one)(void) { return ONE; }

__INLINE TYPE FUNCTION(NAME, ones)(void) { return ONES; }

TYPE FUNCTION(NAME, rand)(void) {
#ifdef TYPE_FLAOT32
  return 1.0 * cgraph_rand32_rand();
#else
  return 1.0 * cgraph_rand64_rand();
#endif
}

__INLINE TYPE FUNCTION(NAME, unit)(void) { return ONE; }

__INLINE TYPE FUNCTION(NAME, unit_inv)(void) { return ONE; }

__INLINE TYPE FUNCTION(NAME, min)(void) { return MIN; }

__INLINE TYPE FUNCTION(NAME, max)(void) { return MAX; }

__INLINE TYPE FUNCTION(NAME, nan)(void) { return NAN; }

__INLINE TYPE FUNCTION(NAME, inf)(void) { return PINF; }

__INLINE TYPE FUNCTION(NAME, pinf)(void) { return PINF; }

__INLINE TYPE FUNCTION(NAME, ninf)(void) { return NINF; }

TYPE FUNCTION(NAME, abs)(const TYPE x) { return ABS(x); }

/**
 * @brief Newton-Raphson method to get square root of a number
 *        x(n+1) = 0.5 * (x(n) + a / x(n))
 *        where x(0) = 0.5 * x
 */
TYPE FUNCTION(NAME, sqrt)(const TYPE x) {
  TYPE _x, _y = MATH_ERROR;
  if (GR(x, ZERO)) {
    _y = 0.5 * x;
    do {
      _x = _y;
      _y = 0.5 * (_x + x / _x);
    } while (NE(_x, _y));
  }

  return _y;
}

/**
 * @brief Newton-Raphson method to get cube root of a number
 *        x(n+1) = (2 * x(n) + a / (x(n)^2)) / 3
 *        where x(0) = x / 3.0;
 */
TYPE FUNCTION(NAME, cube)(const TYPE x) {
  TYPE _x, _y = x / 3.0;
  do {
    _x = _y;
    _y = (2.0 * _x + x / _x / _x) / 3.0;
  } while (NE(_x, _y));

  return _y;
}

TYPE FUNCTION(NAME, exp)(const TYPE x) {
  TYPE res = 0.0, each = 1.0;
  cgraph_int_t i = 1;
  for (i = 1; GR(ABS(each), 0.0); i++) {
    res += each;
    each = x / i * each;
  }

  return res;
}

TYPE FUNCTION(NAME, pi)(void) {
  TYPE res = 0.0, num1 = 3.2, num2 = -4.0 / 239, each = 1.0;
  cgraph_int_t i = 1;
  for (i = 1; GR(ABS(each), 0.0); i += 2) {
    each = (num1 + num2) / i;
    res += each;
    num1 /= -25;
    num2 /= -57121;
  }

  return res;
}

__INLINE cgraph_int_t FUNCTION(NAME, signbit)(const TYPE x) {
  return CGRAPH_TEST(x > 0.0);
}

__INLINE cgraph_bool_t FUNCTION(NAME, iszero)(const TYPE x) {
  return CGRAPH_TEST(EQ(x, 0.0));
}

__INLINE cgraph_bool_t FUNCTION(NAME, isone)(const TYPE x) {
  return CGRAPH_TEST(EQ(x, 1.0));
}

__INLINE cgraph_bool_t FUNCTION(NAME, ispos)(const TYPE x) {
  return CGRAPH_TEST(DATA_ISPOS(x));
}

__INLINE cgraph_bool_t FUNCTION(NAME, isneg)(const TYPE x) {
  return CGRAPH_TEST(DATA_ISNEG(x));
}

__INLINE cgraph_bool_t FUNCTION(NAME, ismin)(const TYPE x) {
  return CGRAPH_TEST(EQ(x, MIN));
}

__INLINE cgraph_bool_t FUNCTION(NAME, ismax)(const TYPE x) {
  return CGRAPH_TEST(EQ(x, MAX));
}

__INLINE cgraph_bool_t FUNCTION(NAME, isnan)(const TYPE x) {
  return CGRAPH_TEST(DATA_ISNAN(x));
}

__INLINE cgraph_bool_t FUNCTION(NAME, isinf)(const TYPE x) {
  return CGRAPH_TEST(DATA_ISINF(x));
}

__INLINE cgraph_bool_t FUNCTION(NAME, ispinf)(const TYPE x) {
  return CGRAPH_TEST(DATA_ISPINF(x));
}

__INLINE cgraph_bool_t FUNCTION(NAME, isninf)(const TYPE x) {
  return CGRAPH_TEST(DATA_ISNINF(x));
}

__INLINE cgraph_bool_t FUNCTION(NAME, isx)(const TYPE x) {
  return FUNCTION(NAME, isnan)(x);
}

__INLINE cgraph_bool_t FUNCTION(NAME, isz)(const TYPE x) {
  return FUNCTION(NAME, isinf)(x);
}

cgraph_bool_t FUNCTION(NAME, eq)(const TYPE x, const TYPE y) {
  return EQ(x, y);
}

cgraph_bool_t FUNCTION(NAME, gr)(const TYPE x, const TYPE y) {
  return GR(x, y);
}

__INLINE cgraph_int_t FUNCTION(NAME, fexp)(const TYPE x) {
  cgraph_int_t res = 0;
  FREXP(x, &res, NULL);

  return res;
}

__INLINE TYPE FUNCTION(NAME, add)(const TYPE x, const TYPE y) {
  return ADD(x, y, NULL);
}

__INLINE TYPE FUNCTION(NAME, sub)(const TYPE x, const TYPE y) {
  return SUB(x, y, NULL);
}

__INLINE TYPE FUNCTION(NAME, mul)(const TYPE x, const TYPE y) {
  return MUL(x, y, NULL);
}

__INLINE TYPE FUNCTION(NAME, div)(const TYPE x, const TYPE y) {
  return DIV(x, y, NULL);
}

__INLINE TYPE FUNCTION(NAME, idiv)(const TYPE x, const TYPE y) {
#if __STDC_VERSION__ < 199901L
  cgraph_float64_t res;
#else
  TYPE res = 0.0;
#endif
  MODF(x / y, &res, NULL);

  return (TYPE)res;
}

__INLINE TYPE FUNCTION(NAME, mod)(const TYPE x, const TYPE y) {
  return MOD(x, y, NULL);
}

__INLINE TYPE FUNCTION(NAME, mean)(const TYPE x, const TYPE y) {
  return 0.5 * (x + y);
}

/** hmean(x, y) = 1/(1/x+1/y) = (xy)/(x+y) */
__INLINE TYPE FUNCTION(NAME, hmean)(const TYPE x, const TYPE y) {
  return (x * y) / (x + y);
}

/**
 * @brief get the minimum value in given range [start, end]
 */
TYPE FUNCTION(NAME, rmin)(const TYPE start, const TYPE end,
                          TYPE func(const TYPE x)) {
  TYPE x_min = start, y_min = func(x_min), x = start, y = y_min;
  while (LS(x, end)) {
  }

  return x_min;
}

/**
 * @brief gradient descent to get the minimum value in given range [start,
 * end]
 */
TYPE FUNCTION(NAME, rmin_gradient_descent)(const TYPE start, const TYPE end,
                                           const TYPE alpha,
                                           TYPE func(const TYPE x)) {
  TYPE x_min = start, y_min = func(x_min), x, y;

  return x_min;
}

/**
 * @brief get the minimum value in given range [start, end]
 */
TYPE FUNCTION(NAME, rmax)(const TYPE start, const TYPE end,
                          TYPE func(const TYPE x)) {
  TYPE x_max = start, y_max = func(x_max), x, y;
  while (1) {
  }

  return x_max;
}

/**
 * @brief gradient boosting to get the minimum value in given range [start,
 * end]
 */
TYPE FUNCTION(NAME, rmax_gradient_boosting)(const TYPE start, const TYPE end,
                                            const TYPE alpha,
                                            TYPE func(const TYPE x)) {
  TYPE x_max = start, y_max = func(x_max), x, y;

  return x_max;
}

/**
 * @brief binary search to get the equation solution in given range [start, end]
 */
TYPE FUNCTION(NAME, reqt_bsearch)(const TYPE start, const TYPE end,
                                  TYPE func(const TYPE x)) {
  TYPE _start = start, _end = end, _middle;
  TYPE _start_res = func(start), _end_res = func(end), _middle_res;
  if (FUNCTION(NAME, cmpsignbit)(_start_res, _end_res)) {
    return CGRAPH_MIN(_start, _end);
  }
  do {
    _middle = 0.5 * (_start + _end);
    _middle_res = func(_middle);
    if (!FUNCTION(NAME, cmpsignbit)(_start_res, _end_res)) {
      _end = _middle;
      _end_res = _middle_res;
    } else {
      _start = _middle;
      _start_res = _middle_res;
    }
  } while (NE(_start, _end));

  return _middle;
}

/**
 * @brief binary search to get the equation solution in given range [start, end]
 */
TYPE FUNCTION(NAME, reqt_secant_method)(const TYPE start, const TYPE end,
                                        TYPE func(const TYPE x)) {
  TYPE _x0 = start, _x1 = end, _x2;
  TYPE _x0_res = func(start), _x1_res = func(end), _x2_res;
  do {
    _x2 = _x1 - (_x1 - _x0) / (_x1_res - _x0_res) * _x1_res;
    _x2_res = func(_x2);
    _x0 = _x1;
    _x0_res = _x1_res;
    _x1 = _x2;
    _x1 = _x2_res;
  } while (NE(_x2_res, 0.0));

  return _x2;
}

/**
 * @brief binary search to get the equation solution in given range [start, end]
 */
TYPE FUNCTION(NAME, reqt_inverse_interpolation)(const TYPE start,
                                                const TYPE end,
                                                TYPE func(const TYPE x)) {
  TYPE _start = start, _end = end, _middle;
  TYPE _start_res = func(start), _end_res = func(end), _middle_res;
  if (FUNCTION(NAME, cmpsignbit)(_start_res, _end_res)) {
    return CGRAPH_MIN(_start, _end);
  }
  do {
    _middle = (_start * _end_res - _end * _start_res) / (_end_res - _start_res);
    _middle_res = func(_middle);
    if (!FUNCTION(NAME, cmpsignbit)(_start_res, _end_res)) {
      _end = _middle;
      _end_res = _middle_res;
    } else {
      _start = _middle;
      _start_res = _middle_res;
    }
  } while (NE(_start, _end));

  return _middle;
}

/**
 * @brief fixed point
 *   x = f(x)
 */
TYPE FUNCTION(NAME, reqt_fixed_point)(const TYPE x, TYPE func(const TYPE x)) {
  TYPE _x, _y = x;
  do {
    _x = _y;
    _y = func(_x);
  } while (NE(_x, _y));

  return _y;
}

TYPE FUNCTION(NAME, reqt_fixed_point_lambda)(const TYPE x, const TYPE lambda,
                                             TYPE func(const TYPE x)) {
  TYPE _x, _y = x;
  do {
    _x = _y;
    _y = _x - lambda * func(_x);
  } while (NE(_x, _y));

  return _y;
}

/**
 * @brief
 *
 */
TYPE FUNCTION(NAME, sdiff)(const TYPE x, const TYPE step,
                           TYPE func(const TYPE x)) {
  return (func(x + step) - func(x)) / x;
}

/**
 * @brief s-4 Runge-Kutta
 *        dy = f(x, y)
 *        delta = x(n+1) - x(n)
 *        y(n+1) = y(n) + delta/6.0 * (k1 + 2k2+ 2k3 + k4)
 *        where :
 *        k1 = f(x(n), y(n))
 *        k2 = f(x(n)+delta/2, y(n)+delta/2*k1)
 *        k3 = f(x(n)+delta/2, y(n)+delta/2*k2)
 *        k4 = f(x(n)+delta, y(n)+delta*k3)
 */
TYPE FUNCTION(NAME,
              rdiff_runge_kutta_s4)(const TYPE x_start, const TYPE x_end,
                                    const TYPE y_start, const TYPE step,
                                    TYPE func(const TYPE x, const TYPE y)) {
  TYPE _step_2 = 0.5 * step, _step_6 = step / 6.0, _step_3 = step / 3.0;
  TYPE _x = x_start, _y = y_start, k1 = 0.0, k2 = 0.0, k3 = 0.0, k4 = 0.0;
  do {
    k1 = func(_x, _y);
    _x += _step_2;
    k2 = func(_x, _y + _step_2 * k1);
    k3 = func(_x, _y + _step_2 * k2);
    _x += _step_2;
    k4 = func(_x, _y + _step_2 * k3);
    _y += (_step_6 * (k1 + k4) + _step_3 * (k2 + k3));
  } while (LS(_x, x_end));

  return _y;
}

TYPE FUNCTION(NAME, rdiff_kutta_s4)(const TYPE x_start, const TYPE x_end,
                                    const TYPE y_start, const TYPE step,
                                    TYPE func(const TYPE x, const TYPE y)) {
  TYPE _step_3 = step / 3.0, _step_8 = 0.125 * step, _step3_8 = 0.375 * step;
  TYPE _x = x_start, _y = y_start, k1 = 0.0, k2 = 0.0, k3 = 0.0, k4 = 0.0;
  do {
    k1 = func(_x, _y);
    _x += _step_3;
    k2 = func(_x, _y + _step_3 * k1);
    _x += _step_3;
    k3 = func(_x, _y - _step_3 * k1 + step * k2);
    _x += _step_3;
    k4 = func(_x, _y + step * (k1 - k2 + k3));
    _y += (_step_8 * (k1 + k4) + _step3_8 * (k2 + k3));
  } while (LS(_x, x_end));

  return _y;
}

/**
 * @brief
 *
 */
TYPE FUNCTION(NAME, sint)(const TYPE x, const TYPE step,
                          TYPE func(const TYPE x)) {
  return 0.5 * x * (func(x) + func(x + step));
}

/**
 * @brief trapezoidal sint operation
 *        delta = x(n+1) - x(n)
 *        df = 0.5 * delta * (f(x(n)) + f(x(n+1)))
 */
TYPE FUNCTION(NAME, rint_trapezoidal)(const TYPE start, const TYPE end,
                                      const TYPE step,
                                      TYPE func(const TYPE x)) {
  TYPE _step = 0.5 * step, _res = 0.0;
  if (EQ(start, end)) {
    _res = 0.0;
  } else {
    TYPE _start = start, _end = end;
    if (GR(start, end)) {
      _start = end;
      _end = start;
    }
    do {
      _res += _step * (func(_start) + func(_start + step));
      _start += step;
    } while (LS(_start, _end));
    if (GR(start, end)) {
      _res = -1.0 * _res;
    }
  }

  return _res;
}

/**
 * @brief simpson integral operation
 *        delta = x(n+1) - x(n)
 *        df = (delta / 6.0 * (
 *             f(x(n)) +
 *             4.0 * f(x(n) + 0.5 * delta) +
 *             f(x(n+1))
 *             )
 */
TYPE FUNCTION(NAME, rint_simpson)(const TYPE start, const TYPE end,
                                  const TYPE step, TYPE func(const TYPE x)) {
  TYPE _step = step / 6.0, _res = 0.0;
  if (EQ(start, end)) {
    _res = 0.0;
  } else {
    TYPE _start = start, _end = end;
    if (GR(start, end)) {
      _start = end;
      _end = start;
    }
    do {
      _res += _step * (func(_start) + 4.0 * func(_start + 0.5 * step) +
                       func(_start + step));
      _start += step;
    } while (LS(_start, _end));
    if (GR(start, end)) {
      _res = -1.0 * _res;
    }
  }

  return _res;
}

/**
 * @brief 3/8 rule simpson integral operation
 *        delta = x(n+1) - x(n)
 *        df = 0.125 * delta * (
 *             f(x(n)) +
 *             3.0 * (f(x(n) + delta / 3.0) + f(x(n) + delta * 2.0 / 3.0)) +
 *             f(x(n+1))
 *             )
 */
TYPE FUNCTION(NAME, rint_simpson38)(const TYPE start, const TYPE end,
                                    const TYPE step, TYPE func(const TYPE x)) {
  TYPE _step = 0.125 * step, _res = 0.0;
  if (EQ(start, end)) {
    _res = 0.0;
  } else {
    TYPE _start = start, _end = end;
    if (GR(start, end)) {
      _start = end;
      _end = start;
    }
    do {
      _res +=
          _step *
          (func(_start) +
           3.0 * (func(_start + step / 3.0) + func(_start + 2.0 / 3.0 * step)) +
           func(_start + step));
      _start += step;
    } while (LS(_start, _end));
    if (GR(start, end)) {
      _res = -1.0 * _res;
    }
  }

  return _res;
}

/**
 * @brief cotes integral operation
 *        delta = x(n+1) - x(n)
 *        df = delta / 90.0 * (
 *             7.0 * (f(x(n)) + f(x(n+1))) +
 *             32.0 * (f(x(n) + delta * 0.25) + f(x(n) + delta * 0.75)) +
 *             12.0 * f(x(n) + delta * 0.5))
 *             )
 */
TYPE FUNCTION(NAME, rint_cotes)(const TYPE start, const TYPE end,
                                const TYPE step, TYPE func(const TYPE x)) {
  TYPE _step = step / 90.0, _res = 0.0;
  if (EQ(start, end)) {
    _res = 0.0;
  } else {
    cgraph_size_t i = 0;
    TYPE _start = start, _end = end;
    if (GR(start, end)) {
      _start = end;
      _end = start;
    }
    for (i = 0; LS(_start, _end); i++) {
      _res +=
          _step *
          (7.0 * (func(_start) + func(_start + step)) +
           32.0 * (func(_start + 0.25 * step) + func(_start + 0.75 * step)) +
           12.0 * func(_start + 0.5 * step));
      _start += step;
    }
    if (GR(start, end)) {
      _res = -1.0 * _res;
    }
  }

  return _res;
}

/**
 * @brief logistic function
 *        f(x) = 1 / (1 + exp(-x))
 */
TYPE FUNCTION(NAME, logistic)(const TYPE x) {
  return 1.0 / (1.0 + exp(-1.0 * x));
}

TYPE FUNCTION(NAME, gamma)(const TYPE x, const TYPE step) {
  TYPE res = 0.0;

  return res;
}

TYPE FUNCTION(NAME, beta)(const TYPE x, const TYPE step) {
  TYPE res = 0.0;

  return res;
}
