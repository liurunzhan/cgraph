/**
 * @struct CGRAPH_OBJECTS_NAME(NAME)
 * @brief all data and data structure types defined in this library
 * @param NAME type name
 */
cgraph_vtable_t *CGRAPH_OBJECTS_NAME(NAME)[] = {
    &STRUCT(NAME),    &STRUCT(bool),     &STRUCT(logic),    &STRUCT(int),
    &STRUCT(long),    &STRUCT(int8),     &STRUCT(int16),    &STRUCT(int32),
    &STRUCT(int64),   &STRUCT(int128),   &STRUCT(float8),   &STRUCT(float16),
    &STRUCT(float32), &STRUCT(float64),  &STRUCT(float128), &STRUCT(time),
    &STRUCT(complex), &STRUCT(fraction), &STRUCT(point2d),  &STRUCT(point3d),
    &STRUCT(bigint),  &STRUCT(bignum),   &STRUCT(string),   &STRUCT(bitset),
    &STRUCT(vector),  &STRUCT(matrix),   &STRUCT(bigmat),   NULL};

#include "template_base.ct"

__INLINE static void *FUNCTION(NAME, _update)(void *cthis,
                                              const cgraph_type_t type,
                                              const cgraph_size_t len,
                                              const cgraph_size_t size) {
  TYPE *_cthis = (TYPE *)cthis;
  if (NULL != _cthis) {
#if defined(TYPE_OBJECT) || defined(TYPE_MOBJECT) || defined(TYPE_M3OBJECT) || \
    defined(TYPE_POBJECT)
    CGRAPH_DTYPE_TYPE(_cthis) = type;
    CGRAPH_DTYPE_ACCESS(_cthis) = CGRAPH_TRUE;
    CGRAPH_DTYPE_HASH(_cthis) = CGRAPH_FALSE;
#elif defined(TYPE_HOBJECT) || defined(TYPE_GOBJECT)
    CGRAPH_DTYPE_KTYPE(_cthis) = type;
    CGRAPH_DTYPE_KACCESS(_cthis) = CGRAPH_TRUE;
    CGRAPH_DTYPE_KHASH(_cthis) = CGRAPH_FALSE;
    CGRAPH_DTYPE_VACCESS(_cthis) = CGRAPH_TRUE;
#endif
  }

  return _cthis;
}

__INLINE DATA_TYPE *FUNCTION(NAME, data)(const TYPE *cthis) {
  return ((TYPE *)cthis)->data;
}

__INLINE cgraph_size_t FUNCTION(NAME, len)(const TYPE *cthis) {
  TYPE *_cthis = (TYPE *)cthis;
  cgraph_size_t _len = 0;
  if (NULL != _cthis) {
    cgraph_type_t _type = CGRAPH_DTYPE_TYPE(_cthis);
    /** _len = (ID == _type ? 1 : OBJECT(_type, len)(_cthis->data)); */
    _len = OBJECT(_type, len)(_cthis->data);
  }

  return _len;
}

__INLINE cgraph_size_t FUNCTION(NAME, size)(const TYPE *cthis) {
  TYPE *_cthis = (TYPE *)cthis;
  cgraph_size_t _size = 0;
  if (NULL != _cthis) {
    cgraph_type_t _type = CGRAPH_DTYPE_TYPE(_cthis);
    /** _size = (ID == _type ? 1 : OBJECT(_type, size)(_cthis->data)); */
    _size = OBJECT(_type, size)(_cthis->data);
  }

  return _size;
}

__INLINE cgraph_size_t FUNCTION(NAME, msize)(const cgraph_type_t type,
                                             const cgraph_size_t size) {
  return FUNCTION(NAME, tsize)();
}

TYPE *FUNCTION(NAME, calloc)(const cgraph_type_t type,
                             const cgraph_size_t size) {
  TYPE *cthis = cgraph_calloc(FUNCTION(NAME, tsize)());
  if ((NULL != cthis) && (ID != type)) {
    cthis->data = OBJECT(type, calloc)(type, size);
    if (NULL != cthis->data) {
      cthis = FUNCTION(NAME, _update)(cthis, type, -1, size);
    } else {
      cgraph_free(cthis);
    }
  }

  return cthis;
}

TYPE *FUNCTION(NAME, realloc)(TYPE *cthis, const cgraph_type_t type,
                              const cgraph_size_t old_size,
                              cgraph_size_t new_size, cgraph_bool_t *error) {
  TYPE *_cthis = (TYPE *)cthis;
  cgraph_type_t _type = type;
  cgraph_size_t _size = 0;
  if (NULL != _cthis) {
    _type = CGRAPH_DTYPE_TYPE(_cthis);
    _size = FUNCTION(NAME, size)(_cthis);
  } else {
    _cthis = cgraph_calloc(FUNCTION(NAME, tsize)());
  }
  if (NULL != _cthis) {
    _cthis->data =
        OBJECT(_type, realloc)(_cthis->data, _type, _size, new_size, error);
  }

  return _cthis;
}

TYPE *FUNCTION(NAME, copy)(const TYPE *cthis, const cgraph_size_t size) {
  TYPE *_cthis = (TYPE *)cthis;
  TYPE *_object = NULL;
  if (NULL != _cthis) {
    cgraph_type_t _type = CGRAPH_DTYPE_TYPE(_cthis);
    cgraph_size_t _old_size = OBJECT(_type, len)(_cthis->data);
    cgraph_size_t _size = _old_size > size ? size : _old_size;
    _object = (TYPE *)FUNCTION(NAME, calloc)(_type, _size);
    if (NULL != _object) {
      cgraph_memcpy(_object, _cthis, COPY_SIZE);
      cgraph_memcpy(_object->data, _cthis->data,
                    OBJECT(_type, msize)(_type, _size));
      OBJECT(_type, update)
      (_object->data, _type, -1, -1);
    }
  }

  return _object;
}

void FUNCTION(NAME, free)(TYPE *cthis) {
  TYPE *_cthis = (TYPE *)cthis;
  if (NULL != _cthis) {
    cgraph_type_t _type = CGRAPH_DTYPE_TYPE(_cthis);
    OBJECT(_type, free)
    (_cthis->data);
    cgraph_free(_cthis);
  }
}

TYPE *FUNCTION(NAME, memcpy)(TYPE *x, const TYPE *y, const cgraph_size_t size) {
  TYPE *_x = (TYPE *)x, *_y = (TYPE *)y;
  if (NULL != _x || NULL != _y) {
  }

  return _x;
}

cgraph_bool_t FUNCTION(NAME, check)(const TYPE *cthis) {
  cgraph_bool_t flag = CGRAPH_FALSE;
  if (NULL != cthis) {
    cgraph_type_t type = CGRAPH_DTYPE_TYPE(cthis);
    OBJECT(type, check)
    (cthis->data, &flag);
  }

  return flag;
}

cgraph_size_t FUNCTION(NAME, hash)(const TYPE *cthis) {
  cgraph_size_t hash = 0;
  if ((NULL != cthis) && (CGRAPH_TRUE == CGRAPH_DTYPE_CONST(cthis)) &&
      (CGRAPH_TRUE == CGRAPH_DTYPE_HASH(cthis))) {
    cgraph_type_t type = CGRAPH_DTYPE_TYPE(cthis);
    OBJECT(type, hash)
    (cthis->data, &hash);
  }

  return hash;
}

__INLINE cgraph_type_t FUNCTION(NAME, type)(const TYPE *cthis) {
  return (NULL != cthis) ? CGRAPH_DTYPE_TYPE(cthis) : CGRAPH_FALSE;
}

__INLINE cgraph_bool_t FUNCTION(NAME, isaccess)(const TYPE *cthis) {
  return (NULL != cthis) ? CGRAPH_DTYPE_ACCESS(cthis) : CGRAPH_FALSE;
}

__INLINE cgraph_bool_t FUNCTION(NAME, isconst)(const TYPE *cthis) {
  return (NULL != cthis) ? CGRAPH_DTYPE_CONST(cthis) : CGRAPH_FALSE;
}

__INLINE cgraph_bool_t FUNCTION(NAME, ishash)(const TYPE *cthis) {
  return (NULL != cthis) ? CGRAPH_DTYPE_HASH(cthis) : CGRAPH_FALSE;
}

TYPE *FUNCTION(NAME, chtype)(TYPE *cthis, const cgraph_type_t type,
                             const cgraph_size_t size) {
  cgraph_type_t _type = type;
  void *_data = NULL;
  if (NULL != cthis) {
    _type = CGRAPH_DTYPE_TYPE(cthis);
  } else {
    cthis = cgraph_calloc(FUNCTION(NAME, tsize)());
  }
  if (NULL != cthis) {
    if (NULL == cthis->data) {
      _data = OBJECT(_type, calloc)(_type, size);
      if (NULL != _data) {
        CGRAPH_DTYPE_TYPE(cthis) = _type;
        cthis->data = _data;
      }
    }
    if (NULL != cthis->data) {
      if (_type != type) {
        _data = OBJECT(_type, calloc)(_type, size);
        if (NULL != _data) {
          OBJECT(_type, free)(cthis->data);
          CGRAPH_DTYPE_TYPE(cthis) = _type;
          cthis->data = _data;
        }
      } else {
        cgraph_bool_t error = CGRAPH_FALSE;
        _data = OBJECT(_type, realloc)(_data, _type, 0, size, &error);
        if (CGRAPH_FALSE == error) {
          cthis->data = _data;
        }
      }
    }
  }

  return cthis;
}

__INLINE TYPE *FUNCTION(NAME, setaccess)(TYPE *cthis) {
  if (NULL != cthis) {
    CGRAPH_DTYPE_ACCESS(cthis) = CGRAPH_TRUE;
  }

  return cthis;
}

__INLINE TYPE *FUNCTION(NAME, unsetaccess)(TYPE *cthis) {
  if (NULL != cthis) {
    CGRAPH_DTYPE_ACCESS(cthis) = CGRAPH_FALSE;
  }

  return cthis;
}

__INLINE TYPE *FUNCTION(NAME, setconst)(TYPE *cthis) {
  if (NULL != cthis) {
    CGRAPH_DTYPE_CONST(cthis) = CGRAPH_TRUE;
  }

  return cthis;
}

__INLINE TYPE *FUNCTION(NAME, unsetconst)(TYPE *cthis) {
  if (NULL != cthis) {
    CGRAPH_DTYPE_CONST(cthis) = CGRAPH_FALSE;
  }

  return cthis;
}

__INLINE TYPE *FUNCTION(NAME, sethash)(TYPE *cthis) {
  if (NULL != cthis) {
    CGRAPH_DTYPE_HASH(cthis) = CGRAPH_TRUE;
  }

  return cthis;
}

__INLINE TYPE *FUNCTION(NAME, unsethash)(TYPE *cthis) {
  if (NULL != cthis) {
    CGRAPH_DTYPE_HASH(cthis) = CGRAPH_FALSE;
  }

  return cthis;
}

TYPE *FUNCTION(NAME, abs)(TYPE *cthis) { return cthis; }

TYPE *FUNCTION(NAME, ceil)(const TYPE *x, TYPE *y) { return y; }

TYPE *FUNCTION(NAME, floor)(const TYPE *x, TYPE *y) { return y; }

TYPE *FUNCTION(NAME, pow)(const TYPE *x, const TYPE *y, TYPE *z) { return z; }

TYPE *FUNCTION(NAME, sin)(const TYPE *x, TYPE *y) { return y; }

TYPE *FUNCTION(NAME, cos)(const TYPE *x, TYPE *y) { return y; }

TYPE *FUNCTION(NAME, tan)(const TYPE *x, TYPE *y) { return y; }

TYPE *FUNCTION(NAME, asin)(const TYPE *x, TYPE *y) { return y; }

TYPE *FUNCTION(NAME, acos)(const TYPE *x, TYPE *y) { return y; }

TYPE *FUNCTION(NAME, atan)(const TYPE *x, TYPE *y) { return y; }

TYPE *FUNCTION(NAME, sinh)(const TYPE *x, TYPE *y) { return y; }

TYPE *FUNCTION(NAME, cosh)(const TYPE *x, TYPE *y) { return y; }

TYPE *FUNCTION(NAME, tanh)(const TYPE *x, TYPE *y) { return y; }

TYPE *FUNCTION(NAME, log)(const TYPE *x, TYPE *y) { return y; }

TYPE *FUNCTION(NAME, log2)(const TYPE *x, TYPE *y) { return y; }

TYPE *FUNCTION(NAME, log10)(const TYPE *x, TYPE *y) { return y; }

TYPE *FUNCTION(NAME, exp)(const TYPE *x, TYPE *y) { return y; }

TYPE *FUNCTION(NAME, sqrt)(const TYPE *x, TYPE *y) { return y; }
