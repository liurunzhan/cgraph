#include "template_base.ct"

#if !defined(CGRAPH_MEMORY_HEADER_SIZE) || (0 >= CGRAPH_MEMORY_HEADER_SIZE)
#error CGRAPH_MEMORY_HEADER_SIZE cannot be UNDEFINED or SMALLER THAN OR EQUAL TO ZERO
#endif

#if !defined(CGRAPH_MEMORY_FREED_SIZE) ||                                      \
    (CGRAPH_MEMORY_FREED_SIZE < CGRAPH_MEMORY_HEADER_SIZE)
#error CGRAPH_MEMORY_FREED_SIZE cannot be UNDEFINED or SMALLER THAN CGRAPH_MEMORY_HEADER_SIZE
#endif

__INLINE__ static void *FUNCTION(NAME, _update)(void *cthis,
                                                const cgraph_type_t type,
                                                const cgraph_size_t len,
                                                const cgraph_size_t size) {
  TYPE *_cthis = (TYPE *)cthis;
  if (NULL != _cthis) {
    CGRAPH_DTYPE_TYPE(_cthis) = type;
    _cthis->len = ((0 <= len) ? len : _cthis->len);
    _cthis->size = ((_cthis->size < size) ? size : _cthis->size);
#if defined(TYPE_MATRIX) || defined(TYPE_BIGMAT) || defined(TYPE_SPAMAT)
    _cthis->row = ((0 <= len) ? len : _cthis->row);
    _cthis->column = ((0 < _cthis->column) ? _cthis->column : 0);
#elif defined(TYPE_MATRIX3D) || defined(TYPE_BIGMAT3D) || defined(TYPE_SPAMAT3D)
    _cthis->index_i = ((0 <= len) ? len : _cthis->index_i);
    _cthis->index_j = ((0 < _cthis->index_j) ? _cthis->index_j : 0);
    _cthis->index_k = ((0 < _cthis->index_k) ? _cthis->index_k : 0);
#endif
    _cthis->root =
        (DATA_TYPE *)CGRAPH_PTRADDR2V(_cthis, FUNCTION(NAME, tsize)());
    _cthis->data = (DATA_TYPE *)CGRAPH_PTRADDR2V(
        _cthis->root, CGRAPH_MEMORY_HEADER_SIZE * OBJECT(type, tptrsize)());
  }

  return _cthis;
}

__INLINE__ DATA_TYPE *FUNCTION(NAME, data)(const TYPE *cthis) {
  return ((TYPE *)cthis)->data;
}

__INLINE__ cgraph_size_t FUNCTION(NAME, len)(const TYPE *cthis) {
  return CGRAPH_LEN(cthis);
}

__INLINE__ cgraph_size_t FUNCTION(NAME, size)(const TYPE *cthis) {
  return CGRAPH_SIZE(cthis);
}

__INLINE__ cgraph_size_t FUNCTION(NAME, msize)(const cgraph_type_t type,
                                               const cgraph_size_t size) {
#if defined(TYPE_BIGMAT)
  return (0 < size)
             ? (FUNCTION(NAME, tsize)() +
                (size + CGRAPH_MEMORY_FREED_SIZE) * OBJECT(type, tbmatsize)())
             : 0;
#else
  return (0 < size)
             ? (FUNCTION(NAME, tsize)() +
                (size + CGRAPH_MEMORY_FREED_SIZE) * OBJECT(type, tstrusize)())
             : 0;
#endif
}

TYPE *FUNCTION(NAME, calloc)(const cgraph_type_t type,
                             const cgraph_size_t size) {
  TYPE *cthis = (TYPE *)cgraph_calloc(FUNCTION(NAME, msize)(ID, size));

  return FUNCTION(NAME, _update)(cthis, type, -1, size);
}

/**
 * if object is defined with data memory, its memory is re-allocated lazily
 */
TYPE *FUNCTION(NAME, realloc)(TYPE *cthis, const cgraph_type_t type,
                              const cgraph_size_t old_size,
                              cgraph_size_t new_size, cgraph_bool_t *error) {
  cgraph_size_t size = 0;
  cgraph_type_t _type = type;
  if (NULL != cthis) {
    _type = CGRAPH_DTYPE_TYPE(cthis);
    size = FUNCTION(NAME, msize)(_type, cthis->size);
  }
  cthis = (TYPE *)cgraph_realloc(cthis, size,
                                 FUNCTION(NAME, msize)(_type, new_size), error);
  if ((NULL != error) && (CGRAPH_FALSE == *error)) {
    cthis = FUNCTION(NAME, _update)(cthis, _type, -1, new_size);
  }

  return cthis;
}

TYPE *FUNCTION(NAME, copy)(const TYPE *cthis, const cgraph_size_t size) {
  TYPE *_cthis = (TYPE *)cthis;
  TYPE *_object = NULL;
  if (NULL != _cthis) {
    cgraph_type_t _type = CGRAPH_DTYPE_TYPE(_cthis);
    cgraph_size_t _old_size = OBJECT(_type, len)(_cthis->data);
    cgraph_size_t _size = _old_size > size ? size : _old_size;
    _object = (TYPE *)FUNCTION(NAME, calloc)(_type, _size);
    if (NULL != _object) {
      cgraph_memcpy(_object, _cthis, FUNCTION(NAME, tsize)());
      FUNCTION(NAME, _update)
      (_object, _type, -1, _size);
      cgraph_memcpy(_object->data, _cthis->data,
                    OBJECT(_type, msize)(_type, _size));
    }
  }

  return _object;
}

void FUNCTION(NAME, free)(TYPE *cthis) {
  if (NULL != cthis) {
    cgraph_type_t type = CGRAPH_DTYPE_TYPE(cthis);
    /**missing iterator to free data objects! */
    if ((0 == type) || (CGRAPH_DTYPE_PTR_MIN <= type)) {
      OBJECT(type, for1v)
      (cthis->root, cthis->size, OBJECT(type, free));
    }
    cgraph_free(cthis);
  }
}

TYPE *FUNCTION(NAME, memcpy)(TYPE *x, const TYPE *y, const cgraph_size_t size) {
  TYPE *_x = (TYPE *)x, *_y = (TYPE *)y;
  if (NULL != _x || NULL != _y) {
  }

  return _x;
}

DATA_TYPE *FUNCTION(NAME, datindex)(const TYPE *cthis,
                                    const cgraph_size_t datindex) {
  DATA_TYPE *res = NULL;
  if ((NULL != cthis) && (cthis->len > CGRAPH_ABS(datindex))) {
    cgraph_type_t type = 0;
    res = OBJECT(type, index)(cthis->data, cthis->len, datindex);
  }

  return res;
}

TYPE *FUNCTION(NAME, index)(const TYPE **cthis, const cgraph_size_t len,
                            const cgraph_size_t index) {

  TYPE *res = NULL;
  if ((NULL != cthis) && (len > CGRAPH_ABS(index))) {
    res = (TYPE *)((index >= 0) ? cthis[index] : cthis[len + index]);
  }

  return res;
}

cgraph_size_t FUNCTION(NAME, hash)(const TYPE *cthis) {
  TYPE *_cthis = (TYPE *)cthis;
  cgraph_size_t hash = USIZE_C(0);
  if (NULL != _cthis) {
  }

  return hash;
}

cgraph_bool_t FUNCTION(NAME, check)(const TYPE *cthis) {
  cgraph_bool_t flag = CGRAPH_FALSE;
  if (NULL != cthis) {
#if defined(TYPE_MATRIX) || defined(TYPE_BIGMAT) || defined(TYPE_SPAMAT)
    if ((0 < CGRAPH_MATRIX_ROW(cthis)) && (0 < CGRAPH_MATRIX_COLUMN(cthis))) {
#elif defined(TYPE_MATRIX3D) || defined(TYPE_BIGMAT3D) || defined(TYPE_SPAMAT3D)
    if ((0 < CGRAPH_MATRIX3D_INDEX_I(cthis)) &&
        (0 < CGRAPH_MATRIX3D_INDEX_J(cthis)) &&
        (0 < CGRAPH_MATRIX3D_INDEX_K(cthis))) {
#else
    if ((0 < cthis->len) && (0 < cthis->size)) {
#endif
      flag = CGRAPH_TRUE;
    }
  }

  return flag;
}

cgraph_bool_t FUNCTION(NAME, ne)(const TYPE *x, const TYPE *y) {
  return CGRAPH_NTEST(FUNCTION(NAME, eq)(x, y));
}

cgraph_size_t FUNCTION(NAME, fprint)(FILE *fp, const TYPE *cthis) {
  cgraph_size_t len = 0;
  if (NULL != cthis) {
    cgraph_type_t type = CGRAPH_DTYPE_TYPE(cthis);
  }

  return len;
}

cgraph_size_t FUNCTION(NAME, print)(const TYPE *cthis) {
  return FUNCTION(NAME, fprint)(stdout, cthis);
}