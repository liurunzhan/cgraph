#include "template_base.ct"

CGRAPH_INLINE static void *FUNCTION(NAME, _update)(void *cthis,
                                                   const cgraph_type_t type,
                                                   const cgraph_size_t len,
                                                   const cgraph_size_t size)
{
    TYPE *_cthis = (TYPE *)cthis;
#ifdef TYPE_WITH_DATA
    if (NULL != _cthis) {
        _cthis->len = ((0 < len) ? len : _cthis->len);
        _cthis->size = ((_cthis->size < size) ? size : _cthis->size);
#if (CGRAPH_STDC_VERSION >= 199901L)
        _cthis->data =
            (DATA_TYPE *)(&(_cthis->root[CGRAPH_MEMORY_HEADER_SIZE]));
#else
        _cthis->root =
            (DATA_TYPE *)CGRAPH_PTRADDR2V(_cthis, FUNCTION(NAME, tsize)());
        _cthis->data = _cthis->root + CGRAPH_MEMORY_HEADER_SIZE;
#endif /**< CGRAPH_STDC_VERSION */
        _cthis->data[_cthis->len] = 0;
    }
#endif
    return _cthis;
}

CGRAPH_INLINE cgraph_size_t FUNCTION(NAME, len)(const TYPE *cthis)
{
#ifdef TYPE_WITH_DATA
    return CGRAPH_LEN(cthis);
#else
    return NULL != cthis ? 1 : 0;
#endif
}

CGRAPH_INLINE cgraph_size_t FUNCTION(NAME, size)(const TYPE *cthis)
{
#ifdef TYPE_WITH_DATA
    return CGRAPH_SIZE(cthis);
#else
    return NULL != cthis ? 1 : 0;
#endif
}

CGRAPH_INLINE cgraph_size_t FUNCTION(NAME, msize)(const cgraph_type_t type,
                                                  const cgraph_size_t size)
{
#ifdef TYPE_WITH_DATA
    return sizeof(TYPE) + (size + CGRAPH_MEMORY_FREED_SIZE) * sizeof(DATA_TYPE);
#else
    return (size + CGRAPH_MEMORY_FREED_SIZE) * sizeof(TYPE);
#endif
}

TYPE *FUNCTION(NAME, calloc)(const cgraph_type_t type, const cgraph_size_t size)
{
    TYPE *cthis = (TYPE *)cgraph_calloc(FUNCTION(NAME, msize)(type, size));

    return FUNCTION(NAME, _update)(cthis, type, 0, size);
}

TYPE *FUNCTION(NAME, realloc)(TYPE *cthis, const cgraph_type_t type,
                              const cgraph_size_t old_size,
                              cgraph_size_t new_size, cgraph_bool_t *error)
{
#ifdef TYPE_WITH_DATA
    TYPE *_cthis = cthis;
    cgraph_size_t _size =
        ((NULL != _cthis) ? FUNCTION(NAME, msize)(type, _cthis->size) : 0);
    _cthis = (TYPE *)cgraph_realloc(
        _cthis, _size, FUNCTION(NAME, msize)(type, new_size), error);
    if ((NULL != error) && (CGRAPH_FALSE == *error)) {
        _cthis = FUNCTION(NAME, _update)(_cthis, type, -1, new_size);
    }
#else
    TYPE *_cthis =
        (TYPE *)cgraph_realloc(cthis, FUNCTION(NAME, msize)(type, old_size),
                               FUNCTION(NAME, msize)(type, new_size), error);
#endif

    return _cthis;
}

TYPE *FUNCTION(NAME, copy)(const TYPE *cthis, const cgraph_size_t size)
{
    TYPE *_cthis = (TYPE *)cthis, *_object = NULL;
    if (NULL != _cthis) {
#ifdef TYPE_WITH_DATA
        cgraph_size_t _size = _cthis->size;
        _object = FUNCTION(NAME, calloc)(DATA_ID, _size);
        _object = (TYPE *)cgraph_memcpy(_object, _cthis,
                                        FUNCTION(NAME, msize)(DATA_ID, _size));
        _object = FUNCTION(NAME, _update)(_object, DATA_ID, -1, _size);
#else
        _object = FUNCTION(NAME, calloc)(ID, size);
        _object = (TYPE *)cgraph_memcpy(_object, _cthis,
                                        FUNCTION(NAME, msize)(ID, size));
#endif
    }

    return _object;
}

void FUNCTION(NAME, free)(TYPE *cthis) { cgraph_free(cthis); }

TYPE *FUNCTION(NAME, memcpy)(TYPE *x, const TYPE *y, const cgraph_size_t size)
{
    TYPE *_x = (TYPE *)x, *_y = (TYPE *)y;
    if (NULL != _x || NULL != _y) {
#ifdef TYPE_WITH_DATA
        cgraph_size_t _size = CGRAPH_MIN(_x->size, _y->size);
        _x = cgraph_memcpy(_x, _y, FUNCTION(NAME, msize)(DATA_ID, _size));
        _x = FUNCTION(NAME, _update)(_x, DATA_ID, -1, _size);
#else
        _x = cgraph_memcpy(_x, _y, FUNCTION(NAME, msize)(ID, size));
#endif
    }

    return _x;
}

TYPE *FUNCTION(NAME, init)(TYPE *cthis, const TYPE *data,
                           const cgraph_size_t size)
{
#ifdef TYPE_WITH_DATA
    if (NULL != data) {
        cgraph_size_t _size = CGRAPH_SIZE(cthis);
        cgraph_bool_t error = CGRAPH_FALSE;
        cthis = FUNCTION(NAME, realloc)(cthis, DATA_ID, _size, size, &error);
        if (CGRAPH_FALSE == error) {
            cthis->data = cgraph_memcpy(cthis->data, data->data,
                                        FUNCTION(NAME, msize)(DATA_ID, size));
            cthis = FUNCTION(NAME, _update)(cthis, DATA_ID, size, -1);
        }
    }
#else
    cthis = cgraph_memcpy(cthis, data, FUNCTION(NAME, msize)(ID, size));
#endif

    return cthis;
}

#ifdef TYPE_WITH_DATA
TYPE *FUNCTION(NAME, initd)(TYPE *cthis, const DATA_TYPE *data,
                            const cgraph_size_t size)
{
    if (NULL != data) {
        cgraph_size_t _size = CGRAPH_SIZE(cthis);
        cgraph_bool_t error = CGRAPH_FALSE;
        cthis = FUNCTION(NAME, realloc)(cthis, DATA_ID, _size, size, &error);
        if (CGRAPH_FALSE == error) {
            cthis->data = cgraph_memcpy(cthis->data, data,
                                        size * FUNCTION(NAME, tdatsize)());
            cthis->len = size;
            cthis->data[size] = 0;
        }
    }
#else
TYPE *FUNCTION(NAME, initd)(TYPE *cthis, const TYPE *data,
                            const cgraph_size_t size)
{
    cthis = cgraph_memcpy(cthis, data, FUNCTION(NAME, msize)(ID, size));
#endif

    return cthis;
}

#ifdef TYPE_WITH_DATA
void FUNCTION(NAME, ascsort)(TYPE **cthis, const cgraph_size_t start,
                             const cgraph_size_t end)
{
    cgraph_size_t left = start, right = end;
    TYPE *key = cthis[left];
#else
void FUNCTION(NAME, ascsort)(TYPE *cthis, const cgraph_size_t start,
                             const cgraph_size_t end)
{
    cgraph_size_t left = start, right = end;
    TYPE key = cthis[left];
#endif

    while (left < right) {
        while ((left < right) && (GE(cthis[right], key))) {
            right--;
        }
        cthis[left] = cthis[right];
        while ((left < right) && (LE(cthis[left], key))) {
            left++;
        }
        cthis[right] = cthis[left];
    }
    cthis[left] = key;
    FUNCTION(NAME, ascsort)
    (cthis, start, left - 1);
    FUNCTION(NAME, ascsort)
    (cthis, left + 1, end);
}

#ifdef TYPE_WITH_DATA
void FUNCTION(NAME, descsort)(TYPE **cthis, const cgraph_size_t start,
                              const cgraph_size_t end)
{
    cgraph_size_t left = start, right = end;
    TYPE *key = cthis[left];
#else
void FUNCTION(NAME, descsort)(TYPE *cthis, const cgraph_size_t start,
                              const cgraph_size_t end)
{
    cgraph_size_t left = start, right = end;
    TYPE key = cthis[left];
#endif
    while (left < right) {
        while ((left < right) && (LE(cthis[right], key))) {
            right--;
        }
        cthis[left] = cthis[right];
        while ((left < right) && (GE(cthis[left], key))) {
            left++;
        }
        cthis[right] = cthis[left];
    }
    cthis[left] = key;
    FUNCTION(NAME, descsort)
    (cthis, start, left - 1);
    FUNCTION(NAME, descsort)
    (cthis, left + 1, end);
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, exchange)(TYPE **cthis, const cgraph_size_t startx,
                                const cgraph_size_t starty,
                                const cgraph_size_t len)
#else
TYPE *FUNCTION(NAME, exchange)(TYPE *cthis, const cgraph_size_t startx,
                               const cgraph_size_t starty,
                               const cgraph_size_t len)
#endif
{
    return cthis;
}

#ifdef TYPE_WITH_DATA
cgraph_bool_t FUNCTION(NAME, cmp)(const TYPE **x, const TYPE **y,
                                  const cgraph_size_t len, cgraph_pfunc3_t iter)
{
    TYPE **_x = (TYPE **)x, **_y = (TYPE **)y;
#else
cgraph_bool_t FUNCTION(NAME, cmp)(const TYPE *x, const TYPE *y,
                                  const cgraph_size_t len, cgraph_pfunc3_t iter)
{
    TYPE *_x = (TYPE *)x, *_y = (TYPE *)y;
#endif
    cgraph_bool_t flag = CGRAPH_FALSE;
    cgraph_size_t i;
    for (i = 0; i < len; i++, _x++, _y++) {
        iter(_x, _y, &flag);
        if (CGRAPH_TRUE == flag) {
            break;
        }
    }

    return flag;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, iter1v)(TYPE **x, const cgraph_size_t len,
                              cgraph_pfunc1_t iter)
#else
TYPE *FUNCTION(NAME, iter1v)(TYPE *x, const cgraph_size_t len,
                             cgraph_pfunc1_t iter)
#endif
{
    cgraph_size_t i;
    for (i = 0; i < len; i++) {
        iter((TYPE *)&x[i]);
    }

    return x;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, iter2v)(const TYPE **x, TYPE **y, const cgraph_size_t len,
                              cgraph_pfunc2_t iter)
#else
TYPE *FUNCTION(NAME, iter2v)(const TYPE *x, TYPE *y, const cgraph_size_t len,
                             cgraph_pfunc2_t iter)
#endif
{
    cgraph_size_t i;
    for (i = 0; i < len; i++) {
        iter((TYPE *)&x[i], &y[i]);
    }

    return y;
}

#ifdef TYPE_WITH_DATA
TYPE *FUNCTION(NAME, iter2vc)(const TYPE **x, TYPE *y, const cgraph_size_t len,
                              cgraph_pfunc2_t iter)
#else
TYPE FUNCTION(NAME, iter2vc)(const TYPE *x, TYPE y, const cgraph_size_t len,
                             cgraph_pfunc2_t iter)
#endif
{
    cgraph_size_t i;
    for (i = 0; i < len; i++) {
        iter((TYPE *)&x[i], (TYPE *)&y);
    }

    return y;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, iter3v)(const TYPE **x, const TYPE **y, TYPE **z,
                              const cgraph_size_t len, cgraph_pfunc3_t iter)
#else
TYPE *FUNCTION(NAME, iter3v)(const TYPE *x, const TYPE *y, TYPE *z,
                             const cgraph_size_t len, cgraph_pfunc3_t iter)
#endif
{
    cgraph_size_t i;
    for (i = 0; i < len; i++) {
        iter((TYPE *)&x[i], (TYPE *)&y[i], &z[i]);
    }

    return z;
}

#ifdef TYPE_WITH_DATA
TYPE *FUNCTION(NAME, iter3vvc)(const TYPE **x, const TYPE **y, TYPE *z,
                               const cgraph_size_t len, cgraph_pfunc3_t iter)
#else
TYPE FUNCTION(NAME, iter3vvc)(const TYPE *x, const TYPE *y, TYPE z,
                              const cgraph_size_t len, cgraph_pfunc3_t iter)
#endif
{
    cgraph_size_t i;
    for (i = 0; i < len; i++) {
        iter((TYPE *)&x[i], (TYPE *)&y[i], (TYPE *)&z);
    }

    return z;
}

#ifdef TYPE_WITH_DATA
TYPE **FUNCTION(NAME, iter3vcv)(const TYPE **x, const TYPE *y, TYPE **z,
                                const cgraph_size_t len, cgraph_pfunc3_t iter)
#else
TYPE *FUNCTION(NAME, iter3vcv)(const TYPE *x, const TYPE y, TYPE *z,
                               const cgraph_size_t len, cgraph_pfunc3_t iter)
#endif
{
    cgraph_size_t i;
    for (i = 0; i < len; i++) {
        iter((TYPE *)&x[i], (TYPE *)&y, &z[i]);
    }

    return z;
}

#ifdef TYPE_WITH_DATA
TYPE *FUNCTION(NAME, iter3cvc)(const TYPE *x, const TYPE **y, TYPE *z,
                               const cgraph_size_t len, cgraph_pfunc3_t iter)
#else
TYPE FUNCTION(NAME, iter3cvc)(const TYPE x, const TYPE *y, TYPE z,
                              const cgraph_size_t len, cgraph_pfunc3_t iter)
#endif
{
    cgraph_size_t i;
    for (i = 0; i < len; i++) {
        iter((TYPE *)&x, (TYPE *)&y[i], (TYPE *)&z);
    }

    return z;
}

#ifdef TYPE_WITH_DATA
TYPE *FUNCTION(NAME, det2x2)(TYPE **cthis, TYPE *res0, TYPE *res1, TYPE *res)
{
    res0 = MUL(cthis[0], cthis[2], res0);
    res1 = MUL(cthis[1], cthis[3], res1);
    res = ADD(res0, res1, res);
    return res;
}
#else
TYPE *FUNCTION(NAME, det2x2)(TYPE *cthis, TYPE *res0, TYPE *res1, TYPE *res)
{
    *res0 = MUL(cthis[0], cthis[2], *res0);
    *res1 = MUL(cthis[1], cthis[3], *res1);
    *res = ADD(*res0, *res1, *res);
    return res;
}
#endif