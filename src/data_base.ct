/*******************************************************************************
This is a data templete file defined in GRAPH library.
        | MACRO |      DESCRIPTION      |
        |  :-:  |          :-:          |
        | NAME  |       data name       |
        | TYPE  |       data type       |
        | DTYPE | data type with pointer|
*******************************************************************************/

CGVTable STRUCT(NAME) = 
{
/*private:*/
#ifndef DATA_WITH_POINTER
  ID,                /* cgraph_integer_t __type__; */
  sizeof(TYPE),      /* cgraph_size_t __size__;    */
  sizeof(TYPE *),    /* cgraph_size_t __dsize__;   */
  sizeof(TYPE),      /* cgraph_size_t __msize__;   */
  sizeof(TYPE),      /* cgraph_size_t __dsize__;   */
  STRING(TYPE),      /* cgraph_char_t *__name__;   */
#else
  ID,                /* cgraph_integer_t __type__; */
  sizeof(TYPE),      /* cgraph_size_t __size__;    */
  sizeof(TYPE *),    /* cgraph_size_t __dsize__;   */
  sizeof(TYPE *),    /* cgraph_size_t __msize__;   */
  sizeof(DATA_TYPE), /* cgraph_size_t __dsize__;   */
  STRING(TYPE),      /* cgraph_char_t *__name__;   */
#endif

/*public:*/
  FUNCTION(NAME, type),    /* cgraph_integer_t (*type)(void); */
  FUNCTION(NAME, size),    /* cgraph_size_t (*size)(void); */
  FUNCTION(NAME, psize),   /* cgraph_size_t (*psize)(void); */
  FUNCTION(NAME, msize),   /* cgraph_size_t (*msize)(void); */
  FUNCTION(NAME, dsize),   /* cgraph_size_t (*dsize)(void); */
  FUNCTION(NAME, name),    /* cgraph_char_t *(*name)(void); */
  FUNCTION(NAME, hasdata), /* cgraph_boolean_t (*hasdata)(void); */
  FUNCTION(NAME, calloc),  /* void *(*calloc)(const cgraph_type_t type, const cgraph_size_t size);  */
  FUNCTION(NAME, realloc), /* void *(*realloc)(void *cthis, const cgraph_size_t old_size, const cgraph_size_t new_size); */
  FUNCTION(NAME, free),    /* void *(*free)(void *cthis);  */
  FUNCTION(NAME, copy),    /* void *(*copy)(const void *cthis, const cgraph_size_t size);  */
  FUNCTION(NAME, hash)     /* cgraph_size_t (*hash)(const void *cthis);  */
};

cgraph_type_t FUNCTION(NAME, type)(void)
{ return STRUCT(NAME).__type__; }

cgraph_size_t FUNCTION(NAME, size)(void)
{ return STRUCT(NAME).__size__; }

cgraph_size_t FUNCTION(NAME, psize)(void)
{ return STRUCT(NAME).__psize__; }

cgraph_size_t FUNCTION(NAME, msize)(void)
{ return STRUCT(NAME).__msize__; }

cgraph_size_t FUNCTION(NAME, dsize)(void)
{ return STRUCT(NAME).__dsize__; }

cgraph_char_t *FUNCTION(NAME, name)(void)
{ return STRUCT(NAME).__name__; }

cgraph_boolean_t FUNCTION(NAME, hasdata)(void)
{
#ifdef DATA_WITH_POINTER
  return CGRAPH_TRUE;
#else
  return CGRAPH_FALSE;
#endif
}

cgraph_size_t FUNCTION(NAME, len)(const void *cthis)
{
#ifdef DATA_WITH_POINTER
  TYPE *object = (TYPE *)cthis;
  return NULL != object ? object->len : 0;
#else
  return 1;
#endif
}

void *FUNCTION(NAME, calloc)(const cgraph_type_t type, const cgraph_size_t size)
{
#ifdef DATA_WITH_POINTER
#if defined(__STDC__) && (__STDC_VERSION__ >= 199901L)
  TYPE *cthis = (TYPE *)cgraph_calloc(FUNCTION(NAME, size)() + (size+2)*FUNCTION(NAME, dsize)(), 1);
  if(NULL != cthis)
  {
    cthis->size = size;
    cthis->len = size;
    cthis->data = &(cthis->root[1]);
  }
#else
  TYPE *cthis = (TYPE *)cgraph_calloc(1, FUNCTION(NAME, size)());
  if(NULL != cthis)
  {
    DATA_TYPE *root = (DATA_TYPE *)cgraph_calloc(size+2, FUNCTION(NAME, dsize)());
    if(NULL != root)
    {
      cthis->size = size;
      cthis->len = size;
      cthis->root = root;
      cthis->data = ++root;
    }
    else 
    { cgraph_free(cthis); }
  }
#endif
#else
  TYPE *cthis = (TYPE *)cgraph_calloc(size+2, FUNCTION(NAME, size)());
#endif

  return cthis;
}

void *FUNCTION(NAME, realloc)(void *cthis, const cgraph_size_t old_size, cgraph_size_t new_size, cgraph_boolean_t *error)
{
#ifdef DATA_WITH_POINTER
  TYPE *object = (TYPE *)cthis;
  if(NULL != object)
  {
  #if defined(__STDC__) && (__STDC_VERSION__ >= 199901L)
    object = (TYPE *)cgraph_realloc(object, FUNCTION(NAME, size)() + (object->size+2)*FUNCTION(NAME, dsize)(), FUNCTION(NAME, size)() + (new_size+2)*FUNCTION(NAME, dsize)(), 1, error);
    if(CGRAPH_FALSE == *error)
    { object->size = new_size; }
  #else
    object->root = (DATA_TYPE *)cgraph_realloc(object->root, object->size, new_size, FUNCTION(NAME, dsize)(), error);
    if(CGRAPH_FALSE == *error)
    { object->size = new_size; }
  #endif
  }
#else
  TYPE *object = (TYPE *)cgraph_realloc(cthis, old_size, new_size, FUNCTION(NAME, size)(), error);
#endif

  return object;
}

void *FUNCTION(NAME, copy)(const void *cthis, const cgraph_size_t size)
{
  TYPE *object = (TYPE *)FUNCTION(NAME, calloc)(ID, size);
  if(NULL != object)
  {
  #ifdef DATA_WITH_POINTER
    object = (TYPE *)cgraph_memcpy(object, cthis, 1, FUNCTION(NAME, size)());
    object->data = (DATA_TYPE *)cgraph_memcpy(object->data, ((TYPE *)cthis)->data, size, FUNCTION(NAME, dsize)());
  #else
    object = (TYPE *)cgraph_memcpy(object, cthis, size, FUNCTION(NAME, size)());
  #endif
  }

  return object;
}

void FUNCTION(NAME, free)(void *cthis)
{
#ifdef DATA_WITH_POINTER
#if !defined(__STDC__) || (__STDC_VERSION__ < 199901L)
  TYPE *object = (TYPE *)cthis;
  if(NULL != object)
  { cgraph_free(object->root); }
#endif
#endif
  cgraph_free(cthis);
}

void *FUNCTION(NAME, init)(void *cthis, const void *data, const cgraph_size_t size)
{
  TYPE *object = (TYPE *)cthis, *new_data = (TYPE *)data;
  if(NULL != object && NULL != new_data)
  {
  #ifdef DATA_WITH_POINTER
    cgraph_memcpy(object->data, new_data->data, new_data->len, FUNCTION(NAME, dsize)());
  #else
    cgraph_memcpy(object, new_data, size, FUNCTION(NAME, dsize)());
  #endif
  }

  return object;
}

void *FUNCTION(NAME, initd)(void *cthis, const void *data, const cgraph_size_t size)
{
#ifdef DATA_WITH_POINTER
  TYPE *object = (TYPE *)cthis;
  if(NULL != object)
  { cgraph_memcpy(object->data, data, size, FUNCTION(NAME, dsize)()); }

  return object;
#else
  return cgraph_memcpy(cthis, data, size, FUNCTION(NAME, dsize)());
#endif
}

void FUNCTION(NAME, ascsort)(void *cthis, const cgraph_size_t start, const cgraph_size_t end)
{
  cgraph_size_t left = start, right = end;
#ifdef DATA_WITH_POINTER
  TYPE **object = (TYPE **)cthis;
  TYPE *key = object[left];
#else
  TYPE *object = (TYPE *)cthis;
  TYPE key = object[left];
#endif
  while(left < right)
  {
    while((left < right) && (GE(object[right], key)))
    { right --; }
    object[left] = object[right];
    while((left < right) && (LE(object[left],key)))
    { left ++; }
    object[right] = object[left];
  }
  object[left] = key;
  FUNCTION(NAME, ascsort)(object, start, left-1);
  FUNCTION(NAME, ascsort)(object, left+1, end);
}

void FUNCTION(NAME, descsort)(void *cthis, const cgraph_size_t start, const cgraph_size_t end)
{
  cgraph_size_t left = start, right = end;
#ifdef DATA_WITH_POINTER
  TYPE **object = (TYPE **)cthis;
  TYPE *key = object[left];
#else
  TYPE *object = (TYPE *)cthis;
  TYPE key = object[left];
#endif
  while(left < right)
  {
    while((left < right) && (LE(object[right], key)))
    { right --; }
    object[left] = object[right];
    while((left < right) && (GE(object[left], key)))
    { left ++; }
    object[right] = object[left];
  }
  object[left] = key;
  FUNCTION(NAME, descsort)(object, start, left-1);
  FUNCTION(NAME, descsort)(object, left+1, end);
}

void *FUNCTION(NAME, adds)(const void *x, const void *y, const void *z, const cgraph_size_t len)
{
#ifdef DATA_WITH_POINTER
  TYPE **object_x = (TYPE **)x, **object_y = (TYPE **)y, **object_z = (TYPE **)z;
#else
  TYPE *object_x = (TYPE *)x, *object_y = (TYPE *)y, *object_z = (TYPE *)z;
#endif
  if(NULL != object_x && NULL != object_y && NULL != object_z)
  {
    cgraph_size_t i;
    for(i=0; i<len; i++)
    { object_z[i] = ADD(object_x[i], object_y[i], object_z[i]); }
  }

  return object_z;
}

void *FUNCTION(NAME, subs)(const void *x, const void *y, const void *z, const cgraph_size_t len)
{
#ifdef DATA_WITH_POINTER
  TYPE **object_x = (TYPE **)x, **object_y = (TYPE **)y, **object_z = (TYPE **)z;
#else
  TYPE *object_x = (TYPE *)x, *object_y = (TYPE *)y, *object_z = (TYPE *)z;
#endif
  if(NULL != object_x && NULL != object_y && NULL != object_z)
  {
    cgraph_size_t i;
    for(i=0; i<len; i++)
    { object_z[i] = SUB(object_x[i], object_y[i], object_z[i]); }
  }

  return object_z;
}

void *FUNCTION(NAME, muls)(const void *x, const void *y, const void *z, const cgraph_size_t len)
{
#ifdef DATA_WITH_POINTER
  TYPE **object_x = (TYPE **)x, **object_y = (TYPE **)y, **object_z = (TYPE **)z;
#else
  TYPE *object_x = (TYPE *)x, *object_y = (TYPE *)y, *object_z = (TYPE *)z;
#endif
  if(NULL != object_x && NULL != object_y && NULL != object_z)
  {
    cgraph_size_t i;
    for(i=0; i<len; i++)
    { object_z[i] = MUL(object_x[i], object_y[i], object_z[i]); }
  }

  return object_z;
}

void *FUNCTION(NAME, divs)(const void *x, const void *y, const void *z, const cgraph_size_t len)
{
#ifdef DATA_WITH_POINTER
  TYPE **object_x = (TYPE **)x, **object_y = (TYPE **)y, **object_z = (TYPE **)z;
#else
  TYPE *object_x = (TYPE *)x, *object_y = (TYPE *)y, *object_z = (TYPE *)z;
#endif
  if(NULL != object_x && NULL != object_y && NULL != object_z)
  {
    cgraph_size_t i;
    for(i=0; i<len; i++)
    { object_z[i] = DIV(object_x[i], object_y[i], object_z[i]); }
  }
  return object_z;
}

cgraph_boolean_t FUNCTION(NAME, eqs)(const void *x, const void *y, const cgraph_size_t len)
{
#ifdef DATA_WITH_POINTER
  TYPE **object_x = (TYPE **)x, **object_y = (TYPE **)y;
#else
  TYPE *object_x = (TYPE *)x, *object_y = (TYPE *)y;
#endif
  cgraph_boolean_t res = CGRAPH_TRUE;
  if(NULL != object_x && NULL != object_y)
  {
    cgraph_size_t i;
    for(i=0; i<len; i++)
    {
      if(CGRAPH_FALSE == EQ(object_x[i], object_y[i]) )
      { 
        res = CGRAPH_FALSE;
        break;
      }
    }
  }

  return res;
}

cgraph_size_t FUNCTION(NAME, cnt)(const void *x, const void *y, const cgraph_size_t len)
{
#ifdef DATA_WITH_POINTER
  TYPE **object_x = (TYPE **)x, *object_y = (TYPE *)y;
#else
  TYPE *object_x = (TYPE *)x, object_y = *(TYPE *)y;
#endif
  cgraph_size_t cnt = 0;
  if(NULL != object_x && NULL != (TYPE *)y)
  {
    cgraph_size_t i;
    for(i=0; i<len; i++)
    {
      if(EQ(object_x[i], object_y))
      { cnt += 1; }
    }
  }

  return cnt;
}
