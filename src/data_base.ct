/*******************************************************************************
This is a data templete file defined in GRAPH library.
        | MACRO |      DESCRIPTION      |
        |  :-:  |          :-:          |
        | NAME  |       data name       |
        | TYPE  |       data type       |
        | DTYPE | data type with pointer|
*******************************************************************************/

CGVTable STRUCT(NAME) = 
{
/**< private: */
  ID,                /**< cgraph_type_t _type;                                */
  STRING(TYPE),      /**< cgraph_char_t *_name;                               */
  sizeof(TYPE),      /**< cgraph_size_t _size;                                */
  sizeof(TYPE *),    /**< cgraph_size_t _psize;                               */
#ifdef CGRAPH_WITH_DATA
  sizeof(TYPE *),    /**< cgraph_size_t _msize;                               */
  sizeof(DATA_TYPE), /**< cgraph_size_t _dsize;                               */
#else
  sizeof(TYPE),      /**< cgraph_size_t _msize;                               */
  sizeof(TYPE),      /**< cgraph_size_t _dsize;                               */
#endif

/**< public: */
  FUNCTION(NAME, type),    /**< cgraph_int_t (*type)(void);                   */
  FUNCTION(NAME, name),    /**< cgraph_char_t *(*name)(void);                 */
  FUNCTION(NAME, size),    /**< cgraph_size_t (*size)(void);                  */
  FUNCTION(NAME, psize),   /**< cgraph_size_t (*psize)(void);                 */
  FUNCTION(NAME, msize),   /**< cgraph_size_t (*msize)(void);                 */
  FUNCTION(NAME, dsize),   /**< cgraph_size_t (*dsize)(void);                 */
  FUNCTION(NAME, hasdata), /**< cgraph_bool_t (*hasdata)(void);               */
  FUNCTION(NAME, len),     /**< cgraph_size_t (*len)(const void *cthis);      */
  FUNCTION(NAME, asize),   /**< cgraph_size_t (*asize)(const void *cthis);    */
  FUNCTION(NAME, csize),   /**< cgraph_size_t (*csize)(const cgraph_type_t type, const cgraph_size_t size);                                            */
  FUNCTION(NAME, update),  /**< void *(*update)(void *cthis, const cgraph_type_t type, const cgraph_size_t size)                               */
  FUNCTION(NAME, calloc),  /**< void *(*calloc)(const cgraph_type_t type, const cgraph_size_t size);                                                        */
  FUNCTION(NAME, realloc), /**< void *(*realloc)(void *cthis, const cgraph_size_t old_size, const cgraph_size_t new_size);                      */
  FUNCTION(NAME, free),    /**< void (*free)(void *cthis);                    */
  FUNCTION(NAME, copy),    /**< void *(*copy)(const void *cthis, const cgraph_size_t size);                                                        */
  FUNCTION(NAME, hash)     /**< cgraph_size_t (*hash)(const void *cthis);     */
};

CGRAPH_INLINE cgraph_type_t FUNCTION(NAME, type)(void)
{ return STRUCT(NAME)._type; }

CGRAPH_INLINE cgraph_char_t *FUNCTION(NAME, name)(void)
{ return STRUCT(NAME)._name; }

CGRAPH_INLINE cgraph_size_t FUNCTION(NAME, size)(void)
{ return STRUCT(NAME)._size; }

CGRAPH_INLINE cgraph_size_t FUNCTION(NAME, psize)(void)
{ return STRUCT(NAME)._psize; }

CGRAPH_INLINE cgraph_size_t FUNCTION(NAME, msize)(void)
{ return STRUCT(NAME)._msize; }

CGRAPH_INLINE cgraph_size_t FUNCTION(NAME, dsize)(void)
{ return STRUCT(NAME)._dsize; }

CGRAPH_INLINE cgraph_bool_t FUNCTION(NAME, hasdata)(void)
{
#ifdef CGRAPH_WITH_DATA
  return CGRAPH_TRUE;
#else
  return CGRAPH_FALSE;
#endif
}

CGRAPH_INLINE cgraph_size_t FUNCTION(NAME, len)(const void *cthis)
{
#ifdef CGRAPH_WITH_DATA
  return NULL != cthis ? ((TYPE *)cthis)->len : 0;
#else
  return NULL != cthis ? 1 : 0;
#endif
}

CGRAPH_INLINE cgraph_size_t FUNCTION(NAME, asize)(const void *cthis)
{
#ifdef CGRAPH_WITH_DATA
  return NULL != cthis ? ((TYPE *)cthis)->size : 0;
#else
  return NULL != cthis ? 1 : 0;
#endif
}

CGRAPH_INLINE cgraph_size_t FUNCTION(NAME, csize)(const cgraph_type_t type, const cgraph_size_t size)
{
#ifdef CGRAPH_WITH_DATA
  return sizeof(TYPE) + (size + CGRAPH_MEMORY_FREED_SIZE) * sizeof(DATA_TYPE);
#else
  return (size + CGRAPH_MEMORY_FREED_SIZE) * sizeof(TYPE);
#endif
}

CGRAPH_INLINE void *FUNCTION(NAME, update)(void *cthis, const cgraph_type_t type, const cgraph_size_t size)
{
#ifdef CGRAPH_WITH_DATA
  TYPE *_cthis = (TYPE *)cthis;
  if(NULL != _cthis)
  {
    _cthis->size = size;
  #if (CGRAPH_STDC_VERSION >= 199901L)
    _cthis->data = (DATA_TYPE *)&(_cthis->root[1]);
  #else
    _cthis->root = (DATA_TYPE *)(((cgraph_addr8_t *)_cthis) + FUNCTION(NAME, size)());
    _cthis->data = _cthis->root + 1;
  #endif /**< CGRAPH_STDC_VERSION */
  }

  return _cthis;
#else
  return cthis;
#endif
}

void *FUNCTION(NAME, calloc)(const cgraph_type_t type, const cgraph_size_t size)
{
  TYPE *cthis = (TYPE *)cgraph_calloc(FUNCTION(NAME, csize)(type, size));
  cthis = FUNCTION(NAME, update)(cthis, type, size);

  return cthis;
}

void *FUNCTION(NAME, realloc)(void *cthis, const cgraph_type_t type, const cgraph_size_t old_size, cgraph_size_t new_size, cgraph_bool_t *error)
{
#ifdef CGRAPH_WITH_DATA
  TYPE *_cthis = (TYPE *)cthis;
  cgraph_size_t _size = ((NULL != _cthis) ? FUNCTION(NAME, csize)(type, _cthis->size) : 0);
  _cthis = (TYPE *)cgraph_realloc(_cthis, _size, FUNCTION(NAME, csize)(type, new_size), error);
  if((NULL != error) && (CGRAPH_FALSE == *error))
  { _cthis = FUNCTION(NAME, update)(_cthis, type, new_size); }
#else
  TYPE *_cthis = (TYPE *)cgraph_realloc(cthis, FUNCTION(NAME, csize)(type, old_size), FUNCTION(NAME, csize)(type, new_size), error);
#endif

  return _cthis;
}

void *FUNCTION(NAME, copy)(const void *cthis, const cgraph_size_t size)
{
  TYPE *_cthis = (TYPE *)cthis, *res = NULL;
  if(NULL != _cthis)
  {    
  #ifdef CGRAPH_WITH_DATA
    cgraph_size_t _size = (_cthis->size > size) ? size : _cthis->size;
    res = FUNCTION(NAME, calloc)(ID, _size);
    res = (TYPE *)cgraph_memcpy(res, _cthis, FUNCTION(NAME, csize)(ID, _size));
    res = FUNCTION(NAME, update)(res, ID, _size);
  #else
    res = (TYPE *)cgraph_memcpy(res, _cthis, FUNCTION(NAME, csize)(ID, size));
  #endif
  }

  return res;
}

void FUNCTION(NAME, free)(void *cthis)
{
  cgraph_free(cthis);
}

void *FUNCTION(NAME, init)(void *cthis, const void *data, const cgraph_size_t size)
{
  TYPE *_cthis = (TYPE *)cthis, *_data = (TYPE *)data;
#ifdef CGRAPH_WITH_DATA
  if((NULL != _cthis) && (NULL != _data))
  {
    cgraph_size_t len = (_cthis->size > size) ? size : _cthis->size;
    _cthis->data = cgraph_memcpy(_cthis->data, _data->data, len*FUNCTION(NAME, dsize)());
    _cthis->len = len;
    _cthis->data[len] = 0;
  }
#else
  _cthis = cgraph_memcpy(_cthis, _data, FUNCTION(NAME, csize)(ID, size));
#endif

  return _cthis;
}

void *FUNCTION(NAME, initd)(void *cthis, const void *data, const cgraph_size_t size)
{
  TYPE *_cthis = cthis;
#ifdef CGRAPH_WITH_DATA
  if(NULL != _cthis)
  {
    cgraph_size_t len = (_cthis->size > size) ? size: _cthis->size;
    _cthis->data = cgraph_memcpy(_cthis->data, data, len*FUNCTION(NAME, dsize)());
    _cthis->len = len;
    _cthis->data[len] = 0;
  }
#else
  _cthis = cgraph_memcpy(_cthis, data, size*FUNCTION(NAME, dsize)());
#endif

  return _cthis;
}

void FUNCTION(NAME, ascsort)(void *cthis, const cgraph_size_t start, const cgraph_size_t end)
{
  cgraph_size_t left = start, right = end;
#ifdef CGRAPH_WITH_DATA
  TYPE **_cthis = (TYPE **)cthis;
  TYPE *key = _cthis[left];
#else
  TYPE *_cthis = (TYPE *)cthis;
  TYPE key = _cthis[left];
#endif
  while(left < right)
  {
    while((left < right) && (GE(_cthis[right], key)))
    { right --; }
    _cthis[left] = _cthis[right];
    while((left < right) && (LE(_cthis[left],key)))
    { left ++; }
    _cthis[right] = _cthis[left];
  }
  _cthis[left] = key;
  FUNCTION(NAME, ascsort)(_cthis, start, left-1);
  FUNCTION(NAME, ascsort)(_cthis, left+1, end);
}

void FUNCTION(NAME, descsort)(void *cthis, const cgraph_size_t start, const cgraph_size_t end)
{
  cgraph_size_t left = start, right = end;
#ifdef CGRAPH_WITH_DATA
  TYPE **_cthis = (TYPE **)cthis;
  TYPE *key = _cthis[left];
#else
  TYPE *_cthis = (TYPE *)cthis;
  TYPE key = _cthis[left];
#endif
  while(left < right)
  {
    while((left < right) && (LE(_cthis[right], key)))
    { right --; }
    _cthis[left] = _cthis[right];
    while((left < right) && (GE(_cthis[left], key)))
    { left ++; }
    _cthis[right] = _cthis[left];
  }
  _cthis[left] = key;
  FUNCTION(NAME, descsort)(_cthis, start, left-1);
  FUNCTION(NAME, descsort)(_cthis, left+1, end);
}

/*              functions with two vectors of the same data types             */
void *FUNCTION(NAME, adds2x)(const void *x, const void *y, void *z, const cgraph_size_t len)
{
#ifdef CGRAPH_WITH_DATA
  TYPE **_x = (TYPE **)x, **_y = (TYPE **)y, **_z = (TYPE **)z;
#else
  TYPE *_x = (TYPE *)x, *_y = (TYPE *)y, *_z = (TYPE *)z;
#endif
  cgraph_size_t i;
  for(i=0; i<len; i++)
  { _z[i] = ADD(_x[i], _y[i], _z[i]); }
  
  return _z;
}

void *FUNCTION(NAME, sub2x)(const void *x, const void *y, void *z, const cgraph_size_t len)
{
#ifdef CGRAPH_WITH_DATA
  TYPE **_x = (TYPE **)x, **_y = (TYPE **)y, **_z = (TYPE **)z;
#else
  TYPE *_x = (TYPE *)x, *_y = (TYPE *)y, *_z = (TYPE *)z;
#endif
  cgraph_size_t i;
  for(i=0; i<len; i++)
  { _z[i] = SUB(_x[i], _y[i], _z[i]); }

  return _z;
}

void *FUNCTION(NAME, muls2x)(const void *x, const void *y, void *z, const cgraph_size_t len)
{
#ifdef CGRAPH_WITH_DATA
  TYPE **_x = (TYPE **)x, **_y = (TYPE **)y, **_z = (TYPE **)z;
#else
  TYPE *_x = (TYPE *)x, *_y = (TYPE *)y, *_z = (TYPE *)z;
#endif
  cgraph_size_t i;
  for(i=0; i<len; i++)
  { _z[i] = MUL(_x[i], _y[i], _z[i]); }
  
  return _z;
}

void *FUNCTION(NAME, divs2x)(const void *x, const void *y, void *z, const cgraph_size_t len)
{
#ifdef CGRAPH_WITH_DATA
  TYPE **_x = (TYPE **)x, **_y = (TYPE **)y, **_z = (TYPE **)z;
#else
  TYPE *_x = (TYPE *)x, *_y = (TYPE *)y, *_z = (TYPE *)z;
#endif
  cgraph_size_t i;
  for(i=0; i<len; i++)
  { _z[i] = DIV(_x[i], _y[i], _z[i]); }
  
  return _z;
}

cgraph_bool_t FUNCTION(NAME, eqs2x)(const void *x, const void *y, const cgraph_size_t len)
{
#ifdef CGRAPH_WITH_DATA
  TYPE **_x = (TYPE **)x, **_y = (TYPE **)y;
#else
  TYPE *_x = (TYPE *)x, *_y = (TYPE *)y;
#endif
  cgraph_bool_t res = CGRAPH_TRUE;
  cgraph_size_t i;
  for(i=0; i<len; i++)
  {
    if(NE(_x[i], _y[i]) )
    { 
      res = CGRAPH_FALSE;
      break;
    }
  }
  
  return res;
}

/*        functions with a vector and an _cthis of the same data types        */
void *FUNCTION(NAME, adds1x)(const void *x, const void *y, const void *z, const cgraph_size_t len)
{
#ifdef CGRAPH_WITH_DATA
  TYPE **_x = (TYPE **)x, *_y = (TYPE *)y, **_z = (TYPE **)z;
#else
  TYPE *_x = (TYPE *)x, _y = *(TYPE *)y, *_z = (TYPE *)z;
#endif
  cgraph_size_t i;
  for(i=0; i<len; i++)
  { _z[i] = ADD(_x[i], _y, _z[i]); }

  return _z;
}

void *FUNCTION(NAME, subs1x)(const void *x, const void *y, const void *z, const cgraph_size_t len)
{
#ifdef CGRAPH_WITH_DATA
  TYPE **_x = (TYPE **)x, *_y = (TYPE *)y, **_z = (TYPE **)z;
#else
  TYPE *_x = (TYPE *)x, _y = *(TYPE *)y, *_z = (TYPE *)z;
#endif
  cgraph_size_t i;
  for(i=0; i<len; i++)
  { _z[i] = SUB(_x[i], _y, _z[i]); }

  return _z;
}

void *FUNCTION(NAME, muls1x)(const void *x, const void *y, const void *z, const cgraph_size_t len)
{
#ifdef CGRAPH_WITH_DATA
  TYPE **_x = (TYPE **)x, *_y = (TYPE *)y, **_z = (TYPE **)z;
#else
  TYPE *_x = (TYPE *)x, _y = *(TYPE *)y, *_z = (TYPE *)z;
#endif
  cgraph_size_t i;
  for(i=0; i<len; i++)
  { _z[i] = MUL(_x[i], _y, _z[i]); }

  return _z;
}

void *FUNCTION(NAME, divs1x)(const void *x, const void *y, const void *z, const cgraph_size_t len)
{
#ifdef CGRAPH_WITH_DATA
  TYPE **_x = (TYPE **)x, *_y = (TYPE *)y, **_z = (TYPE **)z;
#else
  TYPE *_x = (TYPE *)x, _y = *(TYPE *)y, *_z = (TYPE *)z;
#endif
  cgraph_size_t i;
  for(i=0; i<len; i++)
  { _z[i] = DIV(_x[i], _y, _z[i]); }
  
  return _z;
}

cgraph_bool_t FUNCTION(NAME, eqs1x)(const void *x, const void *y, const cgraph_size_t len)
{
#ifdef CGRAPH_WITH_DATA
  TYPE **_x = (TYPE **)x, *_y = (TYPE *)y;
#else
  TYPE *_x = (TYPE *)x, _y = *(TYPE *)y;
#endif
  cgraph_bool_t res = CGRAPH_TRUE;
  cgraph_size_t i;
  for(i=0; i<len; i++)
  {
    if(NE(_x[i], _y))
    { 
      res = CGRAPH_FALSE;
      break;
    }
  }
  
  return res;
}

cgraph_size_t FUNCTION(NAME, cnt1x)(const void *x, const void *y, const cgraph_size_t len)
{
#ifdef CGRAPH_WITH_DATA
  TYPE **_x = (TYPE **)x, *_y = (TYPE *)y;
#else
  TYPE *_x = (TYPE *)x, _y = *(TYPE *)y;
#endif
  cgraph_size_t cnt = 0;
  if(NULL != _x && NULL != (TYPE *)y)
  {
    cgraph_size_t i;
    for(i=0; i<len; i++)
    {
      if(EQ(_x[i], _y))
      { cnt += 1; }
    }
  }
  
  return cnt;
}
