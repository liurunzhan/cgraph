#include "template_base.ct"

CGRAPH_INLINE static void *FUNCTION(NAME, _update)(void *cthis, const cgraph_type_t type, const cgraph_size_t len, const cgraph_size_t size)
{
#ifdef CGRAPH_WITH_DATA
  TYPE *_cthis = (TYPE *)cthis;
  if(NULL != _cthis)
  {
    _cthis->len  = ((len < 0) ? _cthis->len : len);
    _cthis->size = ((size <= 0) ? _cthis->size : size);
  #if (CGRAPH_STDC_VERSION >= 199901L)
    _cthis->data = (DATA_TYPE *)(&(_cthis->root[CGRAPH_MEMORY_HEADER_SIZE]));
  #else
    _cthis->root = (DATA_TYPE *)CGRAPH_PTRADDR2V(_cthis, FUNCTION(NAME, tsize)());
    _cthis->data = _cthis->root + CGRAPH_MEMORY_HEADER_SIZE;
  #endif /**< CGRAPH_STDC_VERSION */
    _cthis->data[_cthis->len] = 0;
  }

  return _cthis;
#else
  return cthis;
#endif
}

CGRAPH_INLINE cgraph_size_t FUNCTION(NAME, len)(const TYPE *cthis)
{
#ifdef CGRAPH_WITH_DATA
  return NULL != cthis ? ((TYPE *)cthis)->len : 0;
#else
  return NULL != cthis ? 1 : 0;
#endif
}

CGRAPH_INLINE cgraph_size_t FUNCTION(NAME, size)(const TYPE *cthis)
{
#ifdef CGRAPH_WITH_DATA
  return NULL != cthis ? ((TYPE *)cthis)->size : 0;
#else
  return NULL != cthis ? 1 : 0;
#endif
}

CGRAPH_INLINE cgraph_size_t FUNCTION(NAME, msize)(const cgraph_type_t type, const cgraph_size_t size)
{
#ifdef CGRAPH_WITH_DATA
  return sizeof(TYPE) + (size + CGRAPH_MEMORY_FREED_SIZE) * sizeof(DATA_TYPE);
#else
  return (size + CGRAPH_MEMORY_FREED_SIZE) * sizeof(TYPE);
#endif
}

TYPE *FUNCTION(NAME, calloc)(const cgraph_type_t type, const cgraph_size_t size)
{
  TYPE *cthis = (TYPE *)cgraph_calloc(FUNCTION(NAME, msize)(type, size));

  return FUNCTION(NAME, _update)(cthis, type, 0, size);
}

TYPE *FUNCTION(NAME, realloc)(TYPE *cthis, const cgraph_type_t type, const cgraph_size_t old_size, cgraph_size_t new_size, cgraph_bool_t *error)
{
#ifdef CGRAPH_WITH_DATA
  TYPE *_cthis = cthis;
  cgraph_size_t _size = ((NULL != _cthis) ? FUNCTION(NAME, msize)(type, _cthis->size) : 0);
  _cthis = (TYPE *)cgraph_realloc(_cthis, _size, FUNCTION(NAME, msize)(type, new_size), error);
  if((NULL != error) && (CGRAPH_FALSE == *error))
  { _cthis = FUNCTION(NAME, _update)(_cthis, type, -1, new_size); }
#else
  TYPE *_cthis = (TYPE *)cgraph_realloc(cthis, FUNCTION(NAME, msize)(type, old_size), FUNCTION(NAME, msize)(type, new_size), error);
#endif

  return _cthis;
}

TYPE *FUNCTION(NAME, copy)(const TYPE *cthis, const cgraph_size_t size)
{
  TYPE *_cthis = (TYPE *)cthis, *_object = NULL;
  if(NULL != _cthis)
  {    
  #ifdef CGRAPH_WITH_DATA
    cgraph_size_t _size = _cthis->size;
    _object = FUNCTION(NAME, calloc)(DATA_ID, _size);
    _object = (TYPE *)cgraph_memcpy(_object, _cthis, FUNCTION(NAME, msize)(DATA_ID, _size));
    _object = FUNCTION(NAME, _update)(_object, DATA_ID, -1, _size);
  #else
    _object = FUNCTION(NAME, calloc)(ID, size);
    _object = (TYPE *)cgraph_memcpy(_object, _cthis, FUNCTION(NAME, msize)(ID, size));
  #endif
  }

  return _object;
}

void FUNCTION(NAME, free)(TYPE *cthis)
{
  cgraph_free(cthis);
}

TYPE *FUNCTION(NAME, memcpy)(TYPE *x, const TYPE *y, const cgraph_size_t size)
{
  TYPE *_x = (TYPE *)x, *_y = (TYPE *)y;
  if(NULL != _x || NULL != _y)
  {
  #ifdef CGRAPH_WITH_DATA
    cgraph_size_t _size = CGRAPH_MIN(_x->size, _y->size);
    _x = cgraph_memcpy(_x, _y, FUNCTION(NAME, msize)(DATA_ID, _size));
    _x = FUNCTION(NAME, _update)(_x, DATA_ID, -1, _size);
  #else
    _x = cgraph_memcpy(_x, _y, FUNCTION(NAME, msize)(ID, size));
  #endif
  }

  return _x;
}

void *FUNCTION(NAME, init)(void *cthis, const void *object, const cgraph_size_t size)
{
  TYPE *_cthis = (TYPE *)cthis, *_object = (TYPE *)object;
#ifdef CGRAPH_WITH_DATA
  if((NULL != _cthis) && (NULL != _object))
  {
    cgraph_size_t _min = CGRAPH_MIN(_object->len, size);
    cgraph_size_t _len = CGRAPH_MIN(_cthis->size, _min);
    _cthis = cgraph_memcpy(_cthis, _object, FUNCTION(NAME, msize)(DATA_ID, _len));
    _cthis = FUNCTION(NAME, _update)(_cthis, DATA_ID, _len, -1);
  }
#else
  _cthis = cgraph_memcpy(_cthis, _object, FUNCTION(NAME, msize)(ID, size));
#endif

  return _cthis;
}

void *FUNCTION(NAME, initd)(void *cthis, const void *data, const cgraph_size_t size)
{
  TYPE *_cthis = (TYPE *)cthis;
#ifdef CGRAPH_WITH_DATA
  DATA_TYPE *_data = (DATA_TYPE *)data;
  if((NULL != _cthis) && (NULL != _data))
  {
    cgraph_size_t _len = CGRAPH_MIN(_cthis->size, size);
    _cthis->data = cgraph_memcpy(_cthis->data, data, _len*FUNCTION(NAME, datsize)());
    _cthis->len = _len;
    _cthis->data[_len] = 0;
  }
#else
  _cthis = cgraph_memcpy(_cthis, data, size*FUNCTION(NAME, datsize)());
#endif

  return _cthis;
}

void FUNCTION(NAME, ascsort)(void *cthis, const cgraph_size_t start, const cgraph_size_t end)
{
  cgraph_size_t left = start, right = end;
#ifdef CGRAPH_WITH_DATA
  TYPE **_cthis = (TYPE **)cthis;
  TYPE *key = _cthis[left];
#else
  TYPE *_cthis = (TYPE *)cthis;
  TYPE key = _cthis[left];
#endif
  while(left < right)
  {
    while((left < right) && (GE(_cthis[right], key)))
    { right --; }
    _cthis[left] = _cthis[right];
    while((left < right) && (LE(_cthis[left],key)))
    { left ++; }
    _cthis[right] = _cthis[left];
  }
  _cthis[left] = key;
  FUNCTION(NAME, ascsort)(_cthis, start, left-1);
  FUNCTION(NAME, ascsort)(_cthis, left+1, end);
}

void FUNCTION(NAME, descsort)(void *cthis, const cgraph_size_t start, const cgraph_size_t end)
{
  cgraph_size_t left = start, right = end;
#ifdef CGRAPH_WITH_DATA
  TYPE **_cthis = (TYPE **)cthis;
  TYPE *key = _cthis[left];
#else
  TYPE *_cthis = (TYPE *)cthis;
  TYPE key = _cthis[left];
#endif
  while(left < right)
  {
    while((left < right) && (LE(_cthis[right], key)))
    { right --; }
    _cthis[left] = _cthis[right];
    while((left < right) && (GE(_cthis[left], key)))
    { left ++; }
    _cthis[right] = _cthis[left];
  }
  _cthis[left] = key;
  FUNCTION(NAME, descsort)(_cthis, start, left-1);
  FUNCTION(NAME, descsort)(_cthis, left+1, end);
}

TYPE TYPE_VPTR FUNCTION(NAME, iter1v)(TYPE TYPE_VPTR x, const cgraph_size_t len, cgraph_pfunc1_t iter)
{
  cgraph_size_t i;
  for(i=0; i<len; i++)
  { iter(&x[i]); }

  return x;
}

TYPE TYPE_VPTR FUNCTION(NAME, iter2v)(TYPE TYPE_VPTR x, TYPE TYPE_VPTR y, const cgraph_size_t len, cgraph_pfunc2_t iter)
{
  cgraph_size_t i;
  for(i=0; i<len; i++)
  { iter(&x[i], &y[i]); }

  return y;
}

TYPE TYPE_VPTR FUNCTION(NAME, iter2vc)(TYPE TYPE_VPTR x, TYPE TYPE_VPTR y, const cgraph_size_t len, cgraph_pfunc2_t iter)
{
  cgraph_size_t i;
  for(i=0; i<len; i++)
  { iter(&x[i], &y[i]); }

  return y;
}

TYPE TYPE_VPTR FUNCTION(NAME, iter3v)(TYPE TYPE_VPTR x, TYPE TYPE_VPTR y, TYPE TYPE_VPTR z, const cgraph_size_t len, cgraph_pfunc3_t iter)
{
  cgraph_size_t i;
  for(i=0; i<len; i++)
  { iter(&x[i], &y[i], &z[i]); }

  return z;
}

TYPE TYPE_VPTR FUNCTION(NAME, iter3vvc)(TYPE TYPE_VPTR x, TYPE TYPE_VPTR y, TYPE TYPE_VPTR z, const cgraph_size_t len, cgraph_pfunc3_t iter)
{
  cgraph_size_t i;
  for(i=0; i<len; i++)
  { iter(&x[i], &y[i], z); }

  return z;
}

TYPE TYPE_VPTR FUNCTION(NAME, iter3vcv)(TYPE TYPE_VPTR x, TYPE TYPE_CPTR y, TYPE TYPE_VPTR z, const cgraph_size_t len, cgraph_pfunc3_t iter)
{
  cgraph_size_t i;
  for(i=0; i<len; i++)
  { iter(&x[i], y, &z[i]); }

  return z;
}

TYPE TYPE_VPTR FUNCTION(NAME, iter3cvc)(TYPE TYPE_CPTR x, TYPE TYPE_VPTR y, TYPE TYPE_VPTR z, const cgraph_size_t len, cgraph_pfunc3_t iter)
{
  cgraph_size_t i;
  for(i=0; i<len; i++)
  { iter(x, &y[i], z); }

  return z;
}


