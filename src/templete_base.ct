/*******************************************************************************
This is a data templete file defined in GRAPH library.
        | MACRO |      DESCRIPTION      |
        |  :-:  |          :-:          |
        | NAME  |       type name       |
        | TYPE  |        type           |
        | DTYPE | data type with pointer|
*******************************************************************************/

CGVTable STRUCT(NAME) = 
{
/**< private: */
  ID,                /**< cgraph_type_t t_id;                                 */
  STRING(TYPE),      /**< cgraph_char_t *t_name;                              */
  sizeof(TYPE),      /**< cgraph_size_t t_size;                               */
  sizeof(TYPE *),    /**< cgraph_size_t t_ptrsize;                            */
  COPY_SIZE,         /**< cgraph_size_t t_cpysize;                            */
#ifdef CGRAPH_WITH_DATA
  sizeof(TYPE *),    /**< cgraph_size_t t_strusize;                            */
  sizeof(DATA_TYPE), /**< cgraph_size_t d_size;                               */
#else
  sizeof(TYPE),      /**< cgraph_size_t t_strusize;                            */
  sizeof(TYPE),      /**< cgraph_size_t d_size;                               */
#endif

/**< public: */
  FUNCTION(NAME, tid),       /**< cgraph_int_t (*tid)(void);                  */
  FUNCTION(NAME, tname),     /**< cgraph_char_t *(*tname)(void);              */
  FUNCTION(NAME, tsize),     /**< cgraph_size_t (*tsize)(void);               */
  FUNCTION(NAME, tptrsize),  /**< cgraph_size_t (*tptrsize)(void);            */
  FUNCTION(NAME, tcpysize),  /**< cgraph_size_t (*tcpysize)(void);            */
  FUNCTION(NAME, tstrusize), /**< cgraph_size_t (*tstrusize)(void);          */
  FUNCTION(NAME, datsize),   /**< cgraph_size_t (*datsize)(void);             */
  FUNCTION(NAME, hasdata),   /**< cgraph_bool_t (*hasdata)(void);             */
  FUNCTION(NAME, len),       /**< cgraph_size_t (*len)(const void *cthis);    */
  FUNCTION(NAME, size),      /**< cgraph_size_t (*size)(const void *cthis);   */
  FUNCTION(NAME, msize),     /**< cgraph_size_t (*msize)(const cgraph_type_t type, const cgraph_size_t size);                                            */
  FUNCTION(NAME, update),    /**< void *(*update)(void *cthis, const cgraph_type_t type, const cgraph_size_t len, const cgraph_size_t size)      */
  FUNCTION(NAME, calloc),    /**< void *(*calloc)(const cgraph_type_t type, const cgraph_size_t size);                                                  */
  FUNCTION(NAME, realloc),   /**< void *(*realloc)(void *cthis, const cgraph_size_t old_size, const cgraph_size_t new_size);                      */
  FUNCTION(NAME, copy),      /**< void *(*copy)(const void *cthis, const cgraph_size_t size);                                                        */
  FUNCTION(NAME, free),      /**< void (*free)(void *cthis);                  */
  FUNCTION(NAME, memcpy),    /**< void *(*memcpy)(void *cthis);               */
  FUNCTION(NAME, hash),      /**< cgraph_size_t (*hash)(const void *cthis);   */
  NULL                       /** void (*tend)(void);                          */
};

CGRAPH_INLINE cgraph_type_t FUNCTION(NAME, tid)(void)
{ return STRUCT(NAME).t_id; }

CGRAPH_INLINE cgraph_char_t *FUNCTION(NAME, tname)(void)
{ return STRUCT(NAME).t_name; }

CGRAPH_INLINE cgraph_size_t FUNCTION(NAME, tsize)(void)
{ return STRUCT(NAME).t_size; }

CGRAPH_INLINE cgraph_size_t FUNCTION(NAME, tptrsize)(void)
{ return STRUCT(NAME).t_ptrsize; }

CGRAPH_INLINE cgraph_size_t FUNCTION(NAME, tcpysize)(void)
{ return STRUCT(NAME).t_cpysize; }

CGRAPH_INLINE cgraph_size_t FUNCTION(NAME, tstrusize)(void)
{ return STRUCT(NAME).t_strusize; }

CGRAPH_INLINE cgraph_size_t FUNCTION(NAME, datsize)(void)
{ return STRUCT(NAME).d_size; }

CGRAPH_INLINE cgraph_bool_t FUNCTION(NAME, hasdata)(void)
{
#ifdef CGRAPH_WITH_DATA
  return CGRAPH_TRUE;
#else
  return CGRAPH_FALSE;
#endif
}

CGRAPH_INLINE void *FUNCTION(NAME, iter1x)(void *x, const cgraph_size_t len, cgraph_pfunc1_t iter)
{
  cgraph_size_t i;
#ifdef CGRAPH_WITH_DATA
  TYPE **_x = (TYPE **)x;
  for(i=0; i<len; i++)
  { iter(_x[i]); }
#else
  TYPE *_x = (TYPE *)x;
  for(i=0; i<len; i++)
  { iter(&_x[i]); }
#endif

  return _x;
}

CGRAPH_INLINE void *FUNCTION(NAME, iter2x)(void *x, void *y, const cgraph_size_t len, cgraph_pfunc2_t iter)
{
  cgraph_size_t i;
#ifdef CGRAPH_WITH_DATA
  TYPE **_x = (TYPE **)x, **_y = (TYPE **)y;
  for(i=0; i<len; i++)
  { iter(_x[i], _y[i]); }
#else
  TYPE *_x = (TYPE *)x, *_y = (TYPE *)y;
  for(i=0; i<len; i++)
  { iter(&_x[i], &_y[i]); }
#endif

  return _x;
}

CGRAPH_INLINE void *FUNCTION(NAME, iter3x)(void *x, void *y, void *z, const cgraph_size_t len, cgraph_pfunc3_t iter)
{
  cgraph_size_t i;
#ifdef CGRAPH_WITH_DATA
  TYPE **_x = (TYPE **)x, **_y = (TYPE **)y, **_z = (TYPE **)z;
  for(i=0; i<len; i++)
  { iter(_x[i], _y[i], _z[i]); }
#else
  TYPE *_x = (TYPE *)x, *_y = (TYPE *)y, *_z = (TYPE *)z;
  for(i=0; i<len; i++)
  { iter(&_x[i], &_y[i], &_z[i]); }
#endif

  return _x;
}
