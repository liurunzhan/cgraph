#include "data_base.ct"

cgraph_size_t FUNCTION(NAME, hash)(const TYPE cthis)
{
    cgraph_size_t hash = 0;
    if (DATA_ISNAN(cthis)) {
        hash = CGRAPH_FLOAT_NAN_HASH;
    } else if (DATA_ISPINF(cthis)) {
        hash = CGRAPH_FLOAT_PINF_HASH;
    } else if (DATA_ISNINF(cthis)) {
        hash = CGRAPH_FLOAT_NINF_HASH;
    } else {
        TYPE ipart = floor(cthis), fpart = cthis - ipart;
        cgraph_size_t hash_ipart = (cgraph_size_t)(ipart),
                      hash_fpart = (cgraph_size_t)(
                          ((TYPE)ABS(fpart - EPSILON)) * EPSILON_LEN);
        hash = (hash_ipart << 4) ^ hash_fpart;
    }

    return CGRAPH_ABS(hash);
}

cgraph_bool_t FUNCTION(NAME, check)(const TYPE cthis)
{
    return CGRAPH_TEST(DATA_TEST(cthis));
}

TYPE *FUNCTION(NAME, initargs)(TYPE *cthis, const cgraph_size_t size,
                               const TYPE first, ...)
{
    va_list args;
    if ((NULL != cthis) && (0 < size)) {
        cgraph_size_t i = 1;
        va_start(args, first);
        cthis[0] = (TYPE)first;
        for (i = 1; i < size; i++) {
            cthis[i] = (TYPE)va_arg(args, ARG);
        }
        va_end(args);
    }

    return cthis;
}

CGRAPH_INLINE cgraph_bool_t FUNCTION(NAME, isnan)(const TYPE x)
{
    return CGRAPH_TEST(DATA_ISNAN(x));
}

CGRAPH_INLINE cgraph_bool_t FUNCTION(NAME, isinf)(const TYPE x)
{
    return CGRAPH_TEST(DATA_ISINF(x));
}

CGRAPH_INLINE cgraph_bool_t FUNCTION(NAME, ispinf)(const TYPE x)
{
    return CGRAPH_TEST(DATA_ISPINF(x));
}

CGRAPH_INLINE cgraph_bool_t FUNCTION(NAME, isninf)(const TYPE x)
{
    return CGRAPH_TEST(DATA_ISNINF(x));
}

CGRAPH_INLINE cgraph_bool_t FUNCTION(NAME, iszero)(const TYPE x)
{
    return CGRAPH_TEST(EQ(x, 0.0));
}

CGRAPH_INLINE cgraph_bool_t FUNCTION(NAME, ispos)(const TYPE x)
{
    return CGRAPH_TEST(DATA_ISPOS(x));
}

CGRAPH_INLINE cgraph_bool_t FUNCTION(NAME, isneg)(const TYPE x)
{
    return CGRAPH_TEST(DATA_ISNEG(x));
}

CGRAPH_INLINE cgraph_bool_t FUNCTION(NAME, ismin)(const TYPE x)
{
    return CGRAPH_TEST(EQ(x, MIN));
}

CGRAPH_INLINE cgraph_bool_t FUNCTION(NAME, ismax)(const TYPE x)
{
    return CGRAPH_TEST(EQ(x, MAX));
}

CGRAPH_INLINE TYPE FUNCTION(NAME, int)(const TYPE x, const TYPE y)
{
    ARG res = 0.0;
    modf(x / y, &res);

    return (TYPE)res;
}