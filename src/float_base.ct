#include "data_base.ct"

cgraph_size_t FUNCTION(NAME, hash)(const void *cthis)
{
  cgraph_size_t hash = 0;
  if(NULL != cthis)
  {
    TYPE _cthis = *(TYPE *)cthis;
    if(DATA_ISNAN(_cthis))
    { hash = CGRAPH_FLOAT_NAN_HASH; }
    else if(DATA_ISPINF(_cthis))
    { hash = CGRAPH_FLOAT_PINF_HASH; }
    else if(DATA_ISNINF(_cthis))
    { hash = CGRAPH_FLOAT_NINF_HASH; }
    else
    {
      TYPE ipart = floor(_cthis), fpart = _cthis - ipart;
      cgraph_size_t hash_ipart = (cgraph_size_t)(ipart), hash_fpart = (cgraph_size_t)(((TYPE)ABS(fpart - EPSILON)) * EPSILON_LEN);
      hash = (hash_ipart << 4) ^ hash_fpart;
    }
  }

  return CGRAPH_ABS(hash);
}

cgraph_bool_t FUNCTION(NAME, check)(const void *cthis)
{
  cgraph_bool_t flag = CGRAPH_FALSE;
  if(NULL != cthis)
  {
    TYPE _cthis = *(TYPE *)cthis;
    if(DATA_TEST(_cthis))
    { flag = CGRAPH_TRUE; }
  }

  return flag;
}

cgraph_bool_t FUNCTION(NAME, equal)(const void *x, const void *y)
{
  TYPE _x = *(TYPE *)x, _y = *(TYPE *)y;
  cgraph_bool_t flag = CGRAPH_FALSE;
  if((CGRAPH_TRUE == FUNCTION(NAME, isnan)(_x)) && (CGRAPH_TRUE == FUNCTION(NAME,isnan)(_y)))
  { flag = CGRAPH_TRUE; }
  else if((CGRAPH_TRUE == FUNCTION(NAME, ispinf)(_x)) && (CGRAPH_TRUE == FUNCTION(NAME, ispinf)(_y)))
  { flag = CGRAPH_TRUE; }
  else if((CGRAPH_TRUE == FUNCTION(NAME, isninf)(_x)) && (CGRAPH_TRUE == FUNCTION(NAME, isninf)(_y)))
  { flag = CGRAPH_TRUE; }
  else if(EQ(_x, _y))
  { flag = CGRAPH_TRUE; }

  return flag;
}

void *FUNCTION(NAME, ints)(const void *x, const void *y, void *z, const cgraph_size_t len)
{
  TYPE *_x = (TYPE *)x, *_y = (TYPE *)y;
  cgraph_int64_t *_z = (cgraph_int64_t *)z;
  if(NULL != _x && NULL != _y && NULL != _z)
  {
    cgraph_size_t i;
    for(i=0; i<len; i++)
    { _z[i] = INT(_x[i], _y[i], _z[i]); }
  }
  return _z;
}

TYPE *FUNCTION(NAME, initargs)(TYPE *cthis, const cgraph_size_t size, const TYPE first, ...)
{
  va_list args;
  if((NULL != cthis) && (0 < size))
  {
    cgraph_size_t i = 1;
    va_start(args, first);
    cthis[0] = (TYPE)first;
    for(i=1; i<size; i++)
    { cthis[i] = (TYPE)va_arg(args, TYPE); }
    va_end(args);
  }

  return cthis;
}

cgraph_bool_t FUNCTION(NAME, isnan)(const TYPE x)
{
  return CGRAPH_TEST(DATA_ISNAN(x));
}

cgraph_bool_t FUNCTION(NAME, isinf)(const TYPE x)
{
  return CGRAPH_TEST(DATA_ISINF(x));
}

cgraph_bool_t FUNCTION(NAME, ispinf)(const TYPE x)
{
  return CGRAPH_TEST(DATA_ISPINF(x));
}

cgraph_bool_t FUNCTION(NAME, isninf)(const TYPE x)
{
  return CGRAPH_TEST(DATA_ISNINF(x));
}

cgraph_bool_t FUNCTION(NAME, iszero)(const TYPE x)
{
  return CGRAPH_TEST(EQ(x, 0.0));
}

cgraph_bool_t FUNCTION(NAME, ispos)(const TYPE x)
{
  return CGRAPH_TEST(DATA_ISPOS(x));
}

cgraph_bool_t FUNCTION(NAME, isneg)(const TYPE x)
{
  return CGRAPH_TEST(DATA_ISNEG(x));
}

cgraph_bool_t FUNCTION(NAME, ismin)(const TYPE x)
{
  return CGRAPH_TEST(EQ(x, MIN));
}

cgraph_bool_t FUNCTION(NAME, ismax)(const TYPE x)
{
  return CGRAPH_TEST(EQ(x, MAX));
}
