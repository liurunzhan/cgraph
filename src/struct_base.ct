/*******************************************************************************

*******************************************************************************/
CGVTable STRUCT(NAME) = 
{
/*private:*/
  ID,             /* cgraph_integer_t __type__; */
  sizeof(TYPE),   /* cgraph_size_t __size__;    */
  sizeof(TYPE *), /* cgraph_size_t __psize__;   */
  sizeof(TYPE *), /* cgraph_size_t __msize__;   */
  sizeof(TYPE),   /* cgraph_size_t __dsize__;   */
  STRING(TYPE),   /* cgraph_char_t *__name__;   */

/*public:*/
  FUNCTION(NAME, type),    /* cgraph_integer_t (*type)(void);  */
  FUNCTION(NAME, size),    /* cgraph_size_t (*size)(void); */
  FUNCTION(NAME, psize),   /* cgraph_size_t (*size)(void); */
  FUNCTION(NAME, msize),   /* cgraph_size_t (*msize)(void); */
  FUNCTION(NAME, dsize),   /* cgraph_size_t (*dsize)(void); */
  FUNCTION(NAME, name),    /* cgraph_char_t *(*name)(void); */
  FUNCTION(NAME, hasdata), /* cgraph_boolean_t (*hasdata)(void); */
  FUNCTION(NAME, len),     /* cgraph_size_t (*len)(void *cthis); */
  FUNCTION(NAME, asize),   /* cgraph_size_t (*len)(void *cthis); */
  FUNCTION(NAME, calloc),  /* void *(*calloc)(const cgraph_type_t type, const cgraph_size_t size);  */
  FUNCTION(NAME, realloc), /* void *(*realloc)(void *cthis, const cgraph_size_t old_size, const cgraph_size_t new_size); */
  FUNCTION(NAME, free),    /* void *(*free)(void *cthis);  */
  FUNCTION(NAME, copy),    /* void *(*copy)(const void *cthis, const cgraph_size_t size);  */
  FUNCTION(NAME, hash)     /* cgraph_size_t (*hash)(const void *cthis);  */
};

cgraph_type_t FUNCTION(NAME, type)(void)
{ return STRUCT(NAME).__type__; }

cgraph_size_t FUNCTION(NAME, size)(void)
{ return STRUCT(NAME).__size__; }

cgraph_size_t FUNCTION(NAME, psize)(void)
{ return STRUCT(NAME).__psize__; }

cgraph_size_t FUNCTION(NAME, msize)(void)
{ return STRUCT(NAME).__msize__; }

cgraph_size_t FUNCTION(NAME, dsize)(void)
{ return STRUCT(NAME).__dsize__; }

cgraph_char_t *FUNCTION(NAME, name)(void)
{ return STRUCT(NAME).__name__; }

cgraph_boolean_t FUNCTION(NAME, hasdata)(void)
{ return CGRAPH_TRUE; }

cgraph_size_t FUNCTION(NAME, len)(const void *cthis)
{ return NULL != cthis ? ((TYPE *)cthis)->len : 0; }

cgraph_size_t FUNCTION(NAME, asize)(const void *cthis)
{ return NULL != cthis ? ((TYPE *)cthis)->size : 0; }

void *FUNCTION(NAME, calloc)(const cgraph_type_t type, const cgraph_size_t size)
{
  TYPE *cthis = (TYPE *)cgraph_calloc(sizeof(TYPE) + (size+CGRAPH_MEMORY_FREED_SIZE)*OBJECT(type, msize)(), 1);
  if(NULL != cthis)
  {
    CGRAPH_DTYPE_TYPE(cthis) = type;
    cthis->size = size;
    cthis->root = (DATA_TYPE *)(((cgraph_addr8_t *)cthis) + FUNCTION(NAME, size)());
    cthis->data = (DATA_TYPE *)(((cgraph_addr8_t *)(cthis->root)) + OBJECT(type, msize)());
  }

  return cthis;
}

void *FUNCTION(NAME, realloc)(void *cthis, const cgraph_type_t type, const cgraph_size_t old_size, cgraph_size_t new_size, cgraph_boolean_t *error)
{
  TYPE *_cthis = (TYPE *)cthis;
  cgraph_type_t _type = type;
  cgraph_size_t _size = 0;
  if(NULL != _cthis)
  {
    _type = CGRAPH_DTYPE_TYPE(_cthis);
    _size = (FUNCTION(NAME, size)() + (_cthis->size+CGRAPH_MEMORY_FREED_SIZE)*OBJECT(_type, msize)());
  }
  _cthis = (TYPE *)cgraph_realloc(_cthis, _size, FUNCTION(NAME, size)() + (new_size+CGRAPH_MEMORY_FREED_SIZE)*FUNCTION(NAME, msize)(), 1, error);
  if((NULL != error) && (CGRAPH_FALSE == *error))
  {
    CGRAPH_DTYPE_TYPE(_cthis) = _type;
    _cthis->size = new_size;
    _cthis->root = (DATA_TYPE *)(((cgraph_addr8_t *)_cthis) + FUNCTION(NAME, size)());
    _cthis->data = (DATA_TYPE *)(((cgraph_addr8_t *)_cthis->root) + FUNCTION(NAME, dsize)());
  }

  return _cthis;
}

void *FUNCTION(NAME, copy)(const void *cthis, const cgraph_size_t size)
{
  TYPE *_cthis = (TYPE *)cthis;

  return _cthis;
}

void FUNCTION(NAME, free)(void *cthis)
{
  TYPE *_cthis = (TYPE *)cthis;
  if(NULL != _cthis)
  {
    
  }
}

cgraph_size_t FUNCTION(NAME, hash)(const void *cthis)
{
  TYPE *_cthis = (TYPE *)cthis;
  cgraph_size_t hash = 0;

  return hash;
}