#include "templete_base.ct"

CGRAPH_INLINE cgraph_size_t FUNCTION(NAME, len)(const void *cthis)
{ return NULL != cthis ? ((TYPE *)cthis)->len : 0; }

CGRAPH_INLINE cgraph_size_t FUNCTION(NAME, size)(const void *cthis)
{ return NULL != cthis ? ((TYPE *)cthis)->size : 0; }

CGRAPH_INLINE cgraph_size_t FUNCTION(NAME, msize)(const cgraph_type_t type, const cgraph_size_t size)
{ return FUNCTION(NAME, tsize)() + (size+CGRAPH_MEMORY_FREED_SIZE) * OBJECT(type, tmemsize)(); }

CGRAPH_INLINE void *FUNCTION(NAME, update)(void *cthis, const cgraph_type_t type, const cgraph_size_t size)
{
  TYPE *_cthis = (TYPE *)cthis;
  if(NULL != _cthis)
  {
    CGRAPH_DTYPE_TYPE(_cthis) = type;
    _cthis->size = size;
    _cthis->root = (DATA_TYPE *)(((cgraph_addr8_t *)_cthis) + FUNCTION(NAME, tsize)());
    _cthis->data = (DATA_TYPE *)(((cgraph_addr8_t *)(_cthis->root)) + OBJECT(type, tptrsize)());
  }

  return _cthis;
}

void *FUNCTION(NAME, calloc)(const cgraph_type_t type, const cgraph_size_t size)
{
  TYPE *cthis = (TYPE *)cgraph_calloc(FUNCTION(NAME, msize)(ID, size));

  return FUNCTION(NAME, update)(cthis, type, size);
}

void *FUNCTION(NAME, realloc)(void *cthis, const cgraph_type_t type, const cgraph_size_t old_size, cgraph_size_t new_size, cgraph_bool_t *error)
{
  TYPE *_cthis = (TYPE *)cthis;
  cgraph_type_t _type = type;
  cgraph_size_t _size = 0;
  if(NULL != _cthis)
  {
    _type = CGRAPH_DTYPE_TYPE(_cthis);
    _size = FUNCTION(NAME, msize)(_type, _cthis->size);
  }
  _cthis = (TYPE *)cgraph_realloc(_cthis, _size, FUNCTION(NAME, msize)(_type, new_size), error);
  if((NULL != error) && (CGRAPH_FALSE == *error))
  { _cthis = FUNCTION(NAME, update)(_cthis, _type, new_size); }

  return _cthis;
}

void *FUNCTION(NAME, copy)(const void *cthis, const cgraph_size_t size)
{
  TYPE *_cthis = (TYPE *)cthis;

  return _cthis;
}

void FUNCTION(NAME, free)(void *cthis)
{
  TYPE *_cthis = (TYPE *)cthis;
  if(NULL != _cthis)
  {
    cgraph_type_t _type = CGRAPH_DTYPE_TYPE(_cthis);
    /* missing iterator to free data objects! */
    if(_type > CGRAPH_DTYPE_MAX)
    {  }
    cgraph_free(_cthis);
  }
}

cgraph_size_t FUNCTION(NAME, hash)(const void *cthis)
{
  TYPE *_cthis = (TYPE *)cthis;
  cgraph_size_t hash = 0;

  return hash;
}
