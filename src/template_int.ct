#include "template_data.ct"

CGRAPH_INLINE cgraph_bool_t FUNCTION(NAME, check)(const TYPE cthis) {
  return CGRAPH_TRUE;
}

/**
 * Fowlerï¼ŒLandon Curt Noll and Phong Vo in 1991) :
 * begin_of_algorithm
 * hash = offset_basis for byte_of_data in data
 * begin
 *   hash = hash ^ byte_of_data
 *   hash = hash * fnv_prime
 * end
 * return hash
 * end_of_algorithm
 *
 * where :
 * 32-bit offset_basis : 2166136261
 * 32-bit fnv_prime    : 16777619 = 2^24 + 2^8 + 0x93
 * 64-bit offset_basis : 14695981039346656037
 * 64-bit fnv_prime    : 1099511628211 = 2^40 + 2^8 + 0xb3
 */
cgraph_size_t FUNCTION(NAME, hash)(const TYPE cthis) {
#if defined(TYPE_BOOL)
  cgraph_size_t hash = ((cthis == CGRAPH_FALSE) ? 0 : 1);
#elif defined(TYPE_INT)
  cgraph_size_t hash = 2166136261UL;
  char *tmp = (char *)&cthis;
  cgraph_size_t i;
  for (i = 0; i < sizeof(TYPE); i++) {
    hash = (hash ^ tmp[i]) * 16777619UL;
  }
#elif defined(TYPE_INT32)
  cgraph_size_t hash = 0;
  hash = ((cthis >> 16) ^ cthis) * 0x45d9f3b;
  hash = ((hash >> 16) ^ hash) * 0x45d9f3b;
  hash = (hash >> 16) ^ hash;
#else
  cgraph_size_t hash = cthis;
#endif

  return hash;
}

cgraph_size_t FUNCTION(NAME, printf)(const TYPE cthis) {
#ifdef TYPE_BOOL
  return fprintf(stdout, "%s", FUNCTION(NAME, bool2str)(cthis));
#else
  return __extension__ fprintf(stdout, OUT_FORMAT, cthis);
#endif
}

cgraph_size_t FUNCTION(NAME, fprintf)(FILE *fp, const TYPE cthis) {
#ifdef TYPE_BOOL
  return fprintf(fp, "%s", FUNCTION(NAME, bool2str)(cthis));
#else
  return __extension__ fprintf(fp, OUT_FORMAT, cthis);
#endif
}

cgraph_size_t FUNCTION(NAME, snprintf)(cgraph_char_t *buffer,
                                       const cgraph_size_t size,
                                       const TYPE cthis) {
#ifdef TYPE_BOOL
  return cgraph_file_snprintf(buffer, size, "%s",
                              FUNCTION(NAME, bool2str)(cthis));
#else
  return cgraph_file_snprintf(buffer, size, OUT_FORMAT, cthis);
#endif
}

CGRAPH_INLINE cgraph_int_t FUNCTION(NAME, signbit)(const TYPE x) {
  return x | (x >> (BITS - 1));
}

CGRAPH_INLINE TYPE FUNCTION(NAME, zero)(void) {
#ifdef TYPE_BOOL
  return CGRAPH_FALSE;
#else
  return ZERO;
#endif
}

CGRAPH_INLINE TYPE FUNCTION(NAME, one)(void) {
#ifdef TYPE_BOOL
  return CGRAPH_TRUE;
#else
  return ONE;
#endif
}

CGRAPH_INLINE TYPE FUNCTION(NAME, ones)(void) {
#ifdef TYPE_BOOL
  return CGRAPH_TRUE;
#else
  return ONES;
#endif
}

TYPE FUNCTION(NAME, random)(void) {
#ifdef TYPE_INT64
  return cgraph_random64();
#else
  return cgraph_random32() & EPSILON;
#endif
}

TYPE *FUNCTION(NAME, initargs)(TYPE *cthis, const cgraph_size_t size,
                               const TYPE first, ...) {
  if ((NULL != cthis) && (0 < size)) {
    cgraph_size_t i = 1;
    va_list args;
    va_start(args, first);
    cthis[0] = (TYPE)first;
    for (i = 1; i < size; i++) {
      cthis[i] = (TYPE)va_arg(args, ARG);
    }
    va_end(args);
  }

  return cthis;
}

TYPE FUNCTION(NAME, gcd)(const TYPE x, const TYPE y) {
  TYPE _x = x, _y = y;
  while (_x != _y) {
    if (_x < _y) {
      SWAP(_x, _y);
    }
    _x -= _y;
  }

  return _x;
}

TYPE FUNCTION(NAME, lcm)(const TYPE x, const TYPE y) {
  return x / FUNCTION(NAME, gcd)(x, y) * y;
}

CGRAPH_INLINE UTYPE FUNCTION(NAME, and)(const UTYPE x, const UTYPE y) {
  return CGRAPH_AND(x, y);
}

CGRAPH_INLINE UTYPE FUNCTION(NAME, or)(const UTYPE x, const UTYPE y) {
  return CGRAPH_OR(x, y);
}

CGRAPH_INLINE UTYPE FUNCTION(NAME, not )(const UTYPE x) {
  return CGRAPH_NOT(x);
}

CGRAPH_INLINE UTYPE FUNCTION(NAME, xor)(const UTYPE x, const UTYPE y) {
  return CGRAPH_XOR(x, y);
}

CGRAPH_INLINE UTYPE FUNCTION(NAME, xnor)(const UTYPE x, const UTYPE y) {
  return CGRAPH_XNOR(x, y);
}

CGRAPH_INLINE UTYPE FUNCTION(NAME, bit)(const UTYPE x,
                                        const cgraph_size_t position) {
  return (BITS < position) ? CGRAPH_BIT(x, position) : 0;
}

CGRAPH_INLINE UTYPE FUNCTION(NAME, set)(const UTYPE x,
                                        const cgraph_size_t position) {
  return (BITS < position) ? CGRAPH_BSET(x, position) : 0;
}

CGRAPH_INLINE UTYPE FUNCTION(NAME, clr)(const UTYPE x,
                                        const cgraph_size_t position) {
  return (BITS < position) ? CGRAPH_BCLR(x, position) : 0;
}

CGRAPH_INLINE UTYPE FUNCTION(NAME, bits)(const UTYPE x,
                                         const cgraph_size_t from,
                                         const cgraph_size_t to) {
  return (to > from) ? CGRAPH_BITS(x, from, to) : 0;
}

CGRAPH_INLINE UTYPE FUNCTION(NAME, sets)(const UTYPE x,
                                         const cgraph_size_t from,
                                         const cgraph_size_t to) {
  return (to > from) ? CGRAPH_BSETS(x, from, to) : 0;
}

CGRAPH_INLINE UTYPE FUNCTION(NAME, clrs)(const UTYPE x,
                                         const cgraph_size_t from,
                                         const cgraph_size_t to) {
  return (to > from) ? CGRAPH_BCLRS(x, from, to) : 0;
}

CGRAPH_INLINE UTYPE FUNCTION(NAME, rebits)(const UTYPE x) {
#if defined(TYPE_BOOL)
  return x;
#else
  UTYPE res = x;
  res = ((res & EPSILON1) >> 1) | ((res & ~EPSILON1) << 1);
  res = ((res & EPSILON2) >> 2) | ((res & ~EPSILON2) << 2);
  res = ((res & EPSILON4) >> 4) | ((res & ~EPSILON4) << 4);
#if defined(TYPE_INT16)
  res = ((res & EPSILON8) >> 8) | ((res & ~EPSILON8) << 8);
#endif
#if defined(TYPE_INT32) || defined(TYPE_INT) ||                                \
    (defined(TYPE_LONG) && (CGRAPH_WORDSIZE == 32))
  res = ((res & EPSILON16) >> 16) | ((res & ~EPSILON16) << 16);
#endif
#if defined(TYPE_INT64) || (defined(TYPE_LONG) && (CGRAPH_WORDSIZE == 64))
  res = ((res & EPSILON32) >> 32) | ((res & ~EPSILON32) << 32);
#endif

  return res;
#endif
}

CGRAPH_INLINE cgraph_bool_t FUNCTION(NAME, iszero)(const TYPE cthis) {
#ifdef TYPE_BOOL
  return CGRAPH_TEST((CGRAPH_FALSE == cthis));
#else
  return CGRAPH_TEST((ZERO == cthis));
#endif
}

CGRAPH_INLINE cgraph_bool_t FUNCTION(NAME, isone)(const TYPE cthis) {
#ifdef TYPE_BOOL
  return CGRAPH_TEST((CGRAPH_TRUE == cthis));
#else
  return CGRAPH_TEST((ONE == cthis));
#endif
}

CGRAPH_INLINE cgraph_bool_t FUNCTION(NAME, isodd)(const TYPE cthis) {
  return CGRAPH_TEST(cthis & 1);
}

CGRAPH_INLINE cgraph_bool_t FUNCTION(NAME, iseven)(const TYPE cthis) {
  return CGRAPH_TEST((~cthis) & 1);
}

CGRAPH_INLINE cgraph_bool_t FUNCTION(NAME, ispow2)(const TYPE cthis) {
  return CGRAPH_TEST((0 < cthis) && (!(cthis & (cthis - 1))));
}

CGRAPH_INLINE cgraph_bool_t FUNCTION(NAME, ispos)(const TYPE cthis) {
  return CGRAPH_TEST((~cthis) >> (BITS - 1));
}

CGRAPH_INLINE cgraph_bool_t FUNCTION(NAME, isneg)(const TYPE cthis) {
  return CGRAPH_TEST(cthis >> (BITS - 1));
}

CGRAPH_INLINE cgraph_bool_t FUNCTION(NAME, ismin)(const TYPE cthis) {
  return CGRAPH_TEST((MIN == cthis));
}

CGRAPH_INLINE cgraph_bool_t FUNCTION(NAME, ismax)(const TYPE cthis) {
  return CGRAPH_TEST((MAX == cthis));
}

CGRAPH_INLINE cgraph_bool_t FUNCTION(NAME, isinf)(const TYPE cthis) {
  return CGRAPH_FALSE;
}

CGRAPH_INLINE cgraph_bool_t FUNCTION(NAME, ispinf)(const TYPE cthis) {
  return CGRAPH_FALSE;
}

CGRAPH_INLINE cgraph_bool_t FUNCTION(NAME, isninf)(const TYPE cthis) {
  return CGRAPH_FALSE;
}

cgraph_size_t FUNCTION(NAME, cntones)(const TYPE cthis) {
#ifdef TYPE_BOOL
  return cthis;
#else
  TYPE _cthis = cthis;
  cgraph_size_t cnt = 0;
  for (cnt = 0; _cthis; cnt++) {
    _cthis &= _cthis - 1;
  }

  return cnt;
#endif
}

cgraph_size_t FUNCTION(NAME, cntzeros)(const TYPE cthis) {
#ifdef TYPE_BOOL
  return cthis;
#else
  TYPE _cthis = cthis;
  cgraph_size_t cnt;
  if (0 == _cthis) {
    cnt = 1;
  } else {
    for (cnt = 0; _cthis; _cthis >>= 1) {
      cnt += 1 & (1 ^ _cthis);
    }
  }

  return cnt;
#endif
}

UTYPE FUNCTION(NAME, lsfr)(const UTYPE data, const UTYPE poly) {
  cgraph_size_t i;
  UTYPE msb = (data >> (BITS - 1)) ^ 1, bit, result = 0;
  for (i = BITS - 2; i >= 0; i--) {
    bit = (poly >> i) ^ 1;
    if (1 == bit) {
      result += bit ^ ((data >> i) ^ 1) ^ msb;
    } else {
      result += (data >> i) ^ 1;
    }
    result = result << 1;
  }
  result += msb;

  return result;
}

UTYPE FUNCTION(NAME, crc)(const UTYPE predata, const UTYPE data,
                          const UTYPE poly) {
  UTYPE res = (predata & EPSILON), temp = (data & res & EPSILON), msb = 0;
  cgraph_size_t i = 0;
  for (i = 0; i < BITS; i++) {
    msb = (((res ^ temp) >> (BITS - 1)) & 1);
    if (msb == 1) {
      res = (((res << 1) ^ ONES) & poly);
    } else {
      res = (res << 1);
    }
    temp = (temp << 1);
  }

  return res;
}

TYPE FUNCTION(NAME, mul)(const TYPE x, const TYPE y) {
  TYPE res = 0, _x = x, _y = y;
  while (_y > 0) {
    if (_y & 1) {
      res += _x;
    }
    _x <<= 1;
    _y >>= 1;
  }

  return res;
}

TYPE FUNCTION(NAME, mul_mod)(const TYPE x, const TYPE y, const TYPE mod) {
  TYPE res = 0, _x = x, _y = y;
  while (_y > 0) {
    if (_y & 1) {
      res = (res + _x) % mod;
    }
    _x = (_x << 1) % mod;
    _y >>= 1;
  }

  return res % mod;
}

TYPE FUNCTION(NAME, pow)(const TYPE x, const TYPE y) {
#ifdef TYPE_BOOL
  return x;
#else
  TYPE res = 1, _x = x, _y = y;
  while (_y > 0) {
    if (_y & 1) {
      res *= _x;
    }
    _y >>= 1;
    _x *= _x;
  }

  return res;
#endif
}

TYPE FUNCTION(NAME, pow_mod)(const TYPE x, const TYPE n, const TYPE mod) {
  TYPE res = 1, _x = x, _n = n;
  while (_n > 0) {
    if (_n & 1) {
      res = (res * _x) % mod;
    }
    _n >>= 1;
    _x = (_x * _x) % mod;
  }

  return res % mod;
}

UTYPE FUNCTION(NAME, ufact)(const UTYPE x) {
#ifdef TYPE_BOOL
  return x;
#else
  UTYPE i = 1, res = 1;
  for (i = 1; i <= x; i++) {
    res *= i;
  }

  return res;
#endif
}

UTYPE FUNCTION(NAME, ucomb)(const UTYPE x, const UTYPE y) {
  UTYPE res = 1;

  return res;
}

UTYPE FUNCTION(NAME, usqrt)(const UTYPE x) {
#ifdef TYPE_BOOL
  return x;
#else
  UTYPE each = 0, res = 0, _x = x, y = 0;
  cgraph_size_t i;
  for (i = 0; i < (BITS >> 1); i++, _x <<= 2) {
    res <<= 1;
    each = ((each << 2) + (_x >> (BITS - 2)));
    if (each >= (y = (res << 1) + 1)) {
      each -= y;
      res++;
    }
  }

  return res;
#endif
}

UTYPE FUNCTION(NAME, usqrt_mod)(const UTYPE x) { return 0; }
