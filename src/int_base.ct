#include "data_base.ct"

cgraph_bool_t FUNCTION(NAME, check)(const void *cthis)
{
  return NULL == cthis ? CGRAPH_FALSE : CGRAPH_TRUE;
}

cgraph_bool_t FUNCTION(NAME, equal)(const void *x, const void *y)
{
  TYPE *_x = (TYPE *)x, *_y = (TYPE *)y;
  cgraph_bool_t flag = CGRAPH_FALSE;
  if(NULL != _x && NULL != _y)
  {
    if(EQ(_x, _y))
    { flag = CGRAPH_TRUE; }
  }
  else if(NULL == _x && NULL == _y)
  { flag = CGRAPH_TRUE; }

  return flag;
}

void *FUNCTION(NAME, divrs)(const void *x, const void *y, const void *z, const cgraph_size_t len)
{
  TYPE *_x = (TYPE *)x, *_y = (TYPE *)y;
  cgraph_float64_t *object_z = (cgraph_float64_t *)z;
  if(NULL != _x && NULL != _y && NULL != object_z)
  {
    cgraph_size_t i;
    for(i=0; i<len; i++)
    { object_z[i] = 1.0 * _x[i] / _y[i]; }
  }
  return object_z;
}

TYPE *FUNCTION(NAME, initargs)(TYPE *cthis, const cgraph_size_t size, const TYPE first, ...)
{
  va_list args;
  if((NULL != cthis) && (0 < size))
  {
    cgraph_size_t i = 1;
    va_start(args, first);
    cthis[0] = (TYPE)first;
    for(i=1; i<size; i++)
    { cthis[i] = (TYPE)va_arg(args, ARG); }
    va_end(args);
  }

  return cthis;
}

TYPE FUNCTION(NAME, gcd)(const TYPE x, const TYPE y)
{
  TYPE _x = x, _y = y, temp;
  while(_x != _y)
  {
    if(_x < _y)
    {
      temp = _x;
      _x = _y;
      _y = temp;
    }
    _x -= _y;
  }
  
  return _x;
}

TYPE FUNCTION(NAME, lcm)(const TYPE x, const TYPE y)
{
  return x * y / FUNCTION(NAME, gcd)(x, y);
}

CGRAPH_INLINE TYPE FUNCTION(NAME, and)(const TYPE x, const TYPE y)
{
  return x & y;
}

CGRAPH_INLINE TYPE FUNCTION(NAME, or)(const TYPE x, const TYPE y)
{
  return x | y;
}

CGRAPH_INLINE TYPE FUNCTION(NAME, not)(const TYPE x)
{
  return ~x;
}

CGRAPH_INLINE TYPE FUNCTION(NAME, xor)(const TYPE x, const TYPE y)
{
  return x ^ y;
}

CGRAPH_INLINE TYPE FUNCTION(NAME, xnor)(const TYPE x, const TYPE y)
{
  return ~(x ^ y);
}

CGRAPH_INLINE TYPE FUNCTION(NAME, bit)(const TYPE x, const cgraph_size_t position)
{
  return (x >> (position % BITS)) & 1;
}

CGRAPH_INLINE TYPE FUNCTION(NAME, set)(const TYPE x, const cgraph_size_t position)
{
  return x | (1 << (position % BITS));
}

CGRAPH_INLINE TYPE FUNCTION(NAME, clr)(const TYPE x, const cgraph_size_t position)
{
  return x & (~(1 << (position % BITS)));
}

CGRAPH_INLINE TYPE FUNCTION(NAME, bits)(const TYPE x, const cgraph_size_t from, const cgraph_size_t to)
{
  return (x >> (from % BITS)) & (~(ONES << ((to - from) % BITS)));
}

CGRAPH_INLINE TYPE FUNCTION(NAME, sets)(const TYPE x, const cgraph_size_t from, const cgraph_size_t to)
{
  return x | ((~((ONES << ((to - from) % BITS)))) << (from % BITS));
}

CGRAPH_INLINE TYPE FUNCTION(NAME, clrs)(const TYPE x, const cgraph_size_t from, const cgraph_size_t to)
{
  return x & ((ONES << (to % BITS)) | (~(ONES << (from % BITS))));
}

CGRAPH_INLINE cgraph_bool_t FUNCTION(NAME, iszero)(const TYPE x)
{
  return CGRAPH_TEST((0 == x));
}

CGRAPH_INLINE cgraph_bool_t FUNCTION(NAME, ispos)(const TYPE x)
{
  return CGRAPH_TEST((0 < x));
}

CGRAPH_INLINE cgraph_bool_t FUNCTION(NAME, isneg)(const TYPE x)
{
  return CGRAPH_TEST((0 > x));
}

CGRAPH_INLINE cgraph_bool_t FUNCTION(NAME, ismin)(const TYPE x)
{
  return CGRAPH_TEST((MIN == x));
}

CGRAPH_INLINE cgraph_bool_t FUNCTION(NAME, ismax)(const TYPE x)
{
  return CGRAPH_TEST((MAX == x));
}

cgraph_size_t FUNCTION(NAME, ones)(const TYPE x)
{
  TYPE _x = x;
  cgraph_size_t cnt = 0;
  for(cnt=0; _x; cnt++)
  { _x &= _x-1; }

  return cnt;
}

cgraph_size_t FUNCTION(NAME, zeros)(const TYPE x)
{
  TYPE _x = x;
  cgraph_size_t cnt = 0;
  for(cnt=0; _x; _x=_x>>1)
  { cnt += 1 & (1 ^ _x); }
  if(0 == x)
  { cnt = 1; }

  return cnt;
}

UTYPE FUNCTION(NAME, lsfr)(const UTYPE data, const UTYPE poly)
{
  cgraph_size_t i;
  UTYPE msb = (data >> (BITS-1)) ^ 1, bit, result = 0;
  for(i=BITS-2; i>=0; i--)
  {
    bit = (poly >> i) ^ 1;
    if(1 == bit)
    { result += bit ^ ((data >> i) ^ 1) ^ msb; }
    else
    { result += (data >> i) ^ 1; }
    result = result << 1;
  }
  result += msb; 

  return result;
}

UTYPE FUNCTION(NAME, crc)(const UTYPE predata, const UTYPE data, const UTYPE poly)
{
  UTYPE res = (predata & EPSILON), temp = (data & res & EPSILON), msb = 0;
  cgraph_size_t i = 0;
  for(i=0; i<BITS; i++)
  {
    msb = (((res ^ temp) >> (BITS-1)) & 0x01);
    if(msb == 0x01)
    { res = (((res << 1) ^ ONES) & poly); }
    else
    { res = (res << 1); }
    temp = (temp << 1);
  }

  return res;
}
