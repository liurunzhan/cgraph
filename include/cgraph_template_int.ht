/**
 * @file cgraph_template_int.ht
 * @brief the template apis of integer number
 * @author liurunzhan
 * @email liurunzhan@sina.com
 * @package cgraph
 * @version 0.0.0
 * @date 2021-03-31
 * @lisence GPL-3.0
 * @url https://github.com/liurunzhan/cgraph
 */

#if defined(TYPE_BOOL)
#define DATA_TEST(a) (!((~EPS) & (a)))
#define DATA_TOBOOL(a) ((a)&CGRAPH_BOOL_EPS)
#define DATA_TOLOGIC(a) ((a)&CGRAPH_LOGIC_EPS)
#define DATA_ISBOOL(a) (!((~CGRAPH_BOOL_EPS) & (a)))
#define DATA_ISLOGIC(a) (!((~CGRAPH_LOGIC_EPS) & (a)))

#define ADD(a, b, c)                                                           \
  ((((a) == CGRAPH_TRUE) || ((b) == CGRAPH_TRUE)) ? CGRAPH_TRUE : CGRAPH_FALSE)
#define SUB(a, b, c)                                                           \
  ((((a) == CGRAPH_TRUE) && ((b) == CGRAPH_FALSE)) ? CGRAPH_TRUE : CGRAPH_FALSE)
#define MUL(a, b, c)                                                           \
  ((((a) == CGRAPH_TRUE) && ((b) == CGRAPH_TRUE)) ? CGRAPH_TRUE : CGRAPH_FALSE)
#define DIV(a, b, c)                                                           \
  ((((a) == CGRAPH_TRUE) && ((b) == CGRAPH_TRUE)) ? CGRAPH_TRUE : CGRAPH_FALSE)
#define DIVF(a, b, c)                                                          \
  ((((a) == CGRAPH_TRUE) && ((b) == CGRAPH_TRUE)) ? CGRAPH_TRUE : CGRAPH_FALSE)
#define INT(a, b, c)                                                           \
  ((((a) == CGRAPH_TRUE) && ((b) == CGRAPH_TRUE)) ? CGRAPH_TRUE : CGRAPH_FALSE)
#define MOD(a, b, c) (SUB((a), INT(a, b)))

#define EQ(a, b) ((a) == (b))
#define NE(a, b) ((a) != (b))
#define GR(a, b) ((a) > (b))
#define GE(a, b) ((a) >= (b))
#define LS(a, b) ((a) < (b))
#define LE(a, b) ((a) <= (b))

#define CEIL(a, b) ceil((a))
#define FLOOR(a, b) floor((a))
#define POW(a, b) (((b) == CGRAPH_FALSE) ? CGRAPH_TRUE : CGRAPH_FALSE)
#define ABS(a, b) ((a))
#define SIN(a, b) sin((a))
#define COS(a, b) cos((a))
#define TAN(a, b) tan((a))
#define ASIN(a, b) asin((a))
#define ACOS(a, b) acos((a))
#define ATAN(a, b) atan2((a))
#define SINH(a, b) sinh((a))
#define COSH(a, b) cosh((a))
#define TANH(a, b) tanh((a))
#define LOG(a, b) log((a))
#define LOG2(a, b) (log((a)) / log(2.0))
#define LOG10(a, b) log10((a))
#define EXP(a, b) exp((a))
#define SQRT(a, b) sqrt((a))

#elif defined(TYPE_LOGIC)
#define DATA_TEST(a) (!((~EPS) & (a)))
#define DATA_TOBOOL(a) ((a)&CGRAPH_BOOL_EPS)
#define DATA_TOLOGIC(a) ((a)&CGRAPH_LOGIC_EPS)
#define DATA_ISBOOL(a) (!((~CGRAPH_BOOL_EPS) & (a)))
#define DATA_ISLOGIC(a) (!((~CGRAPH_LOGIC_EPS) & (a)))

#define ADD(a, b, c)                                                           \
  ((((a) == CGRAPH_TRUE) || ((b) == CGRAPH_TRUE)) ? CGRAPH_TRUE : CGRAPH_FALSE)
#define SUB(a, b, c)                                                           \
  ((((a) == CGRAPH_TRUE) && ((b) == CGRAPH_FALSE)) ? CGRAPH_TRUE : CGRAPH_FALSE)
#define MUL(a, b, c)                                                           \
  ((((a) == CGRAPH_TRUE) && ((b) == CGRAPH_TRUE)) ? CGRAPH_TRUE : CGRAPH_FALSE)
#define DIV(a, b, c)                                                           \
  ((((a) == CGRAPH_TRUE) && ((b) == CGRAPH_TRUE)) ? CGRAPH_TRUE : CGRAPH_FALSE)
#define DIVF(a, b, c)                                                          \
  ((((a) == CGRAPH_TRUE) && ((b) == CGRAPH_TRUE)) ? CGRAPH_TRUE : CGRAPH_FALSE)
#define INT(a, b, c)                                                           \
  ((((a) == CGRAPH_TRUE) && ((b) == CGRAPH_TRUE)) ? CGRAPH_TRUE : CGRAPH_FALSE)
#define MOD(a, b, c) (SUB((a), INT(a, b)))

#define EQ(a, b) ((DATA_ISBOOL(a) && DATA_ISBOOL(b)) ? (a) == (b) : CGRAPH_LX)
#define NE(a, b) ((DATA_ISBOOL(a) && DATA_ISBOOL(b)) ? (a) != (b) : CGRAPH_LX)
#define GR(a, b) ((DATA_ISBOOL(a) && DATA_ISBOOL(b)) ? (a) > (b) : CGRAPH_LX)
#define GE(a, b) ((DATA_ISBOOL(a) && DATA_ISBOOL(b)) ? (a) >= (b) : CGRAPH_LX)
#define LS(a, b) ((DATA_ISBOOL(a) && DATA_ISBOOL(b)) ? (a) < (b) : CGRAPH_LX)
#define LE(a, b) ((DATA_ISBOOL(a) && DATA_ISBOOL(b)) ? (a) <= (b) : CGRAPH_LX)

#define CEIL(a, b) ceil((a))
#define FLOOR(a, b) floor((a))
#define POW(a, b) (((b) == CGRAPH_FALSE) ? CGRAPH_TRUE : CGRAPH_FALSE)
#define ABS(a, b) ((a))
#define SIN(a, b) sin((a))
#define COS(a, b) cos((a))
#define TAN(a, b) tan((a))
#define ASIN(a, b) asin((a))
#define ACOS(a, b) acos((a))
#define ATAN(a, b) atan2((a))
#define SINH(a, b) sinh((a))
#define COSH(a, b) cosh((a))
#define TANH(a, b) tanh((a))
#define LOG(a, b) log((a))
#define LOG2(a, b) (log((a)) / log(2.0))
#define LOG10(a, b) log10((a))
#define EXP(a, b) exp((a))
#define SQRT(a, b) sqrt((a))

#elif defined(TYPE_INT) || defined(TYPE_LONG) || defined(TYPE_INT8) ||         \
    defined(TYPE_INT16) || defined(TYPE_INT32) || defined(TYPE_INT64) ||       \
    defined(TYPE_INT128)
#define DATA_TEST(a) ((DATA_MIN != (a)) && (DATA_MAX != (a)))
#define DATA_TOBOOL(a) ((a)&CGRAPH_BOOL_EPS)
#define DATA_TOLOGIC(a) ((a)&CGRAPH_LOGIC_EPS)
#define DATA_ISBOOL(a) (!((~CGRAPH_BOOL_EPS) & (a)))
#define DATA_ISLOGIC(a) (!((~CGRAPH_LOGIC_EPS) & (a)))

#define ADD(a, b, c) ((a) + (b))
#define SUB(a, b, c) ((a) - (b))
#define MUL(a, b, c) ((a) * (b))
#define DIV(a, b, c) ((a) / (b))
#define DIVF(a, b, c) (1.0 * (a) / (b))
#define INT(a, b, c) ((a) / (b))
#define MOD(a, b, c) ((a) % (b))

#define EQ(a, b) ((a) == (b))
#define NE(a, b) ((a) != (b))
#define GR(a, b) ((a) > (b))
#define GE(a, b) ((a) >= (b))
#define LS(a, b) ((a) < (b))
#define LE(a, b) ((a) <= (b))

#define CEIL(a) (a)
#define FLOOR(a) (a)
#define POW(a, b) pow((a), (b))
#define ABS(a) CGRAPH_ABS((a))
#define SIN(a) sin((a))
#define COS(a) cos((a))
#define TAN(a) tan((a))
#define ASIN(a) asin((a))
#define ACOS(a) acos((a))
#define ATAN(a) atan2((a))
#define SINH(a) sinh((a))
#define COSH(a) cosh((a))
#define TANH(a) tanh((a))
#define LOG(a) log((a))
#define LOG2(a) (log((a)) / log(2.0))
#define LOG10(a) log10((a))
#define EXP(a) exp((a))
#define SQRT(a) sqrt((a))
#endif

#include "cgraph_template_data.ht"

extern UTYPE FUNCTION(NAME, urand)(void);

extern TYPE *FUNCTION(NAME, initargs)(TYPE *cthis, const cgraph_size_t size,
                                      const TYPE first, ...);

extern TYPE FUNCTION(NAME, gcd)(const TYPE x, const TYPE y);
extern TYPE FUNCTION(NAME, lcm)(const TYPE x, const TYPE y);
extern TYPE FUNCTION(NAME, mod2)(const TYPE x, const TYPE y);
extern TYPE FUNCTION(NAME, ceil2x)(const TYPE x, const TYPE y);
extern TYPE FUNCTION(NAME, floor2x)(const TYPE x, const TYPE y);
extern cgraph_size_t FUNCTION(NAME, bitsceil)(const cgraph_size_t bits);
extern cgraph_size_t FUNCTION(NAME, bitsfloor)(const cgraph_size_t bits);
extern cgraph_size_t FUNCTION(NAME, bitsmod)(const cgraph_size_t bits);
extern cgraph_size_t FUNCTION(NAME, ubitsceil)(const cgraph_size_t bits);
extern cgraph_size_t FUNCTION(NAME, ubitsfloor)(const cgraph_size_t bits);
extern cgraph_size_t FUNCTION(NAME, ubitsmod)(const cgraph_size_t bits);

extern cgraph_bool_t FUNCTION(NAME, inrange)(const TYPE start, const TYPE end,
                                             const TYPE num);
extern cgraph_bool_t FUNCTION(NAME, in2ranges)(const TYPE start0,
                                               const TYPE end0,
                                               const TYPE start1,
                                               const TYPE end1, const TYPE num);

extern UTYPE FUNCTION(NAME, shl)(const UTYPE x, const cgraph_size_t bits);
extern UTYPE FUNCTION(NAME, shr)(const UTYPE x, const cgraph_size_t bits);
extern UTYPE FUNCTION(NAME, and)(const UTYPE x, const UTYPE y);
extern UTYPE FUNCTION(NAME, or)(const UTYPE x, const UTYPE y);
extern UTYPE FUNCTION(NAME, not )(const UTYPE x);
extern UTYPE FUNCTION(NAME, xor)(const UTYPE x, const UTYPE y);
extern UTYPE FUNCTION(NAME, xnor)(const UTYPE x, const UTYPE y);
extern UTYPE FUNCTION(NAME, bit)(const UTYPE x, const cgraph_size_t position);
extern UTYPE FUNCTION(NAME, set)(const UTYPE x, const cgraph_size_t position);
extern UTYPE FUNCTION(NAME, clr)(const UTYPE x, const cgraph_size_t position);
extern UTYPE FUNCTION(NAME, bits)(const UTYPE x, const cgraph_size_t from,
                                  const cgraph_size_t to);
extern UTYPE FUNCTION(NAME, sets)(const UTYPE x, const cgraph_size_t from,
                                  const cgraph_size_t to);
extern UTYPE FUNCTION(NAME, clrs)(const UTYPE x, const cgraph_size_t from,
                                  const cgraph_size_t to);
extern UTYPE FUNCTION(NAME, swapbit)(const UTYPE x);
extern UTYPE FUNCTION(NAME, swapbyte)(const UTYPE x);
extern UTYPE FUNCTION(NAME, swaphfwd)(const UTYPE x);
extern UTYPE FUNCTION(NAME, swapword)(const UTYPE x);
extern cgraph_size_t FUNCTION(NAME, cntones)(const UTYPE x);
extern cgraph_size_t FUNCTION(NAME, cntzeros)(const UTYPE x);

extern UTYPE FUNCTION(NAME, lsfr)(const UTYPE data, const UTYPE poly);
extern UTYPE FUNCTION(NAME, crc)(const UTYPE predata, const UTYPE data,
                                 const UTYPE poly);

extern TYPE FUNCTION(NAME, mul_s)(const TYPE x, const TYPE y);
extern TYPE FUNCTION(NAME, mul_mod_s)(const TYPE x, const TYPE y,
                                      const TYPE mod);
extern UTYPE FUNCTION(NAME, udiv_s)(const UTYPE x, const UTYPE y);
extern TYPE FUNCTION(NAME, div_s)(const TYPE x, const TYPE y);
extern UTYPE FUNCTION(NAME, upow_s)(const UTYPE x, const UTYPE y);
extern TYPE FUNCTION(NAME, pow_s)(const TYPE x, const TYPE n);
extern UTYPE FUNCTION(NAME, upow_mod_s)(const UTYPE x, const UTYPE n,
                                        const UTYPE mod);
extern TYPE FUNCTION(NAME, pow_mod_s)(const TYPE x, const TYPE n,
                                      const TYPE mod);
extern UTYPE FUNCTION(NAME, ucomb2_s)(const UTYPE x);
extern UTYPE FUNCTION(NAME, ucomb_s)(const UTYPE x, const UTYPE y);
extern UTYPE FUNCTION(NAME, ufact_s)(const UTYPE x);
extern UTYPE FUNCTION(NAME, usqrt_s)(const UTYPE x);
extern UTYPE FUNCTION(NAME, usqrt_mod_s)(const UTYPE x, const UTYPE y);
extern UTYPE FUNCTION(NAME, usqrt_modp_s)(const UTYPE x, const UTYPE p);
