/**
 * @file cgraph_template_int.ht
 * @brief the common apis of integer number
 * @author liurunzhan
 * @email liurunzhan@sina.com
 * @package cgraph
 * @version 0.0.0
 * @date 2021-03-31
 * @lisence GPL-3.0
 * @url https://github.com/liurunzhan/cgraph
 */

#define BOOLEAN_EQ(a, b) ((a) == (b))
#define BOOLEAN_NE(a, b) ((a) != (b))
#define BOOLEAN_GT(a, b) ((a) > (b))
#define BOOLEAN_GE(a, b) ((a) >= (b))
#define BOOLEAN_LT(a, b) ((a) < (b))
#define BOOLEAN_LE(a, b) ((a) <= (b))

#define BOOLEAN_AND(a, b) ((a) && (b))
#define BOOLEAN_NAND(a, b) ((!(a)) && (b))
#define BOOLEAN_ANDN(a, b) ((a) && (!(b)))
#define BOOLEAN_OR(a, b) ((a) || (b))
#define BOOLEAN_NOR(a, b) ((!(a)) || (b))
#define BOOLEAN_ORN(a, b) ((a) || (!(b)))
#define BOOLEAN_ABS(a) (a)
#define BOOLEAN_NOT(a) (!(a))
#define BOOLEAN_XOR(a, b) ((a) != (b))
#define BOOLEAN_XNOR(a, b) ((a) == (b))

#if defined(TYPE_BOOL)
#define DATA_TEST(a) (!((~EPSILON) & (a)))
#define DATA_TOBOOL(a) ((a)&CGRAPH_BOOL_MASK)
#define DATA_TOLOGIC(a) ((a)&CGRAPH_BOOL_MASK)
#define DATA_ISBOOL(a) (!((~CGRAPH_BOOL_MASK) & (a)))
#define DATA_ISLOGIC(a) (!((~CGRAPH_BOOL_MASK) & (a)))
#define DATA_ISBOOL2V(a, b) (DATA_ISBOOL(a) && DATA_ISBOOL(b))
#define DATA_ISLOGIC2V(a, b) (DATA_ISLOGIC(a) && DATA_ISLOGIC(b))
#define DATA_FUNC(a) (DATA_ISBOOL(a) ? (a) : CGRAPH_FALSE)
#define DATA_CFUNC(a, b) (((a) && DATA_ISBOOL(b)) ? (b) : CGRAPH_FALSE)

#define EQ(a, b) BOOLEAN_EQ(a, b)
#define NE(a, b) BOOLEAN_NE(a, b)
#define GT(a, b) BOOLEAN_GT(a, b)
#define GE(a, b) BOOLEAN_GE(a, b)
#define LT(a, b) BOOLEAN_LT(a, b)
#define LE(a, b) BOOLEAN_LE(a, b)

#define AND(a, b) BOOLEAN_AND(a, b)
#define NAND(a, b) BOOLEAN_NAND(a, b)
#define ANDN(a, b) BOOLEAN_ANDN(a, b)
#define OR(a, b) BOOLEAN_OR(a, b)
#define NOR(a, b) BOOLEAN_NOR(a, b)
#define ORN(a, b) BOOLEAN_ORN(a, b)
#define ABS(a) BOOLEAN_ABS(a)
#define NOT(a) BOOLEAN_NOT(a)
#define XOR(a, b) BOOLEAN_XOR(a, b)
#define XNOR(a, b) BOOLEAN_XNOR(a, b)

#define ADD(a, b) XOR(a, b)
#define SUB(a, b) ANDN(a, b)
#define MUL(a, b) AND(a, b)
#define DIV(a, b) (ABS(b) ? ABS(a) : CGRAPH_FALSE)
#define DIVF(a, b) DIV(a, b)
#define INT(a, b) AND(a, b)
#define MOD(a, b) (SUB((a), INT(a, b)))

#define SIGNBIT(a) ABS(a)
#define CEIL(a, b) ABS(a)
#define FLOOR(a, b) ABS(a)
#define POW(a, b) (NOT(a) && ABS(b))
#define SIN(a, b) sin((a))
#define COS(a, b) cos((a))
#define TAN(a, b) tan((a))
#define ASIN(a, b) asin((a))
#define ACOS(a, b) acos((a))
#define ATAN(a, b) atan2((a))
#define SINH(a, b) sinh((a))
#define COSH(a, b) cosh((a))
#define TANH(a, b) tanh((a))
#define LOG(a, b) log((a))
#define LOG2(a, b) (log((a)) / log(2.0))
#define LOG10(a, b) log10((a))
#define EXP(a, b) exp((a))
#define SQRT(a, b) (a)
#define CUBE(a, b) (a)

#elif defined(TYPE_LOGIC)
#define DATA_ISNAN(a) (!((~CGRAPH_BOOL_MASK) & (a)))
#define DATA_TEST(a) (!((~MASK) & (a)))
#define DATA_TOBOOL(a) ((a)&CGRAPH_BOOL_MASK)
#define DATA_TOLOGIC(a) ((a)&CGRAPH_BOOL_MASK)
#define DATA_ISBOOL(a) (!((~CGRAPH_BOOL_MASK) & (a)))
#define DATA_ISLOGIC(a) (!((~CGRAPH_BOOL_MASK) & (a)))
#define DATA_ISBOOL2V(a, b) (DATA_ISBOOL(a) && DATA_ISBOOL(b))
#define DATA_ISLOGIC2V(a, b) (DATA_ISLOGIC(a) && DATA_ISLOGIC(b))
#define DATA_FUNC(a) (DATA_ISBOOL(a) ? (a) : CGRAPH_LX)
#define DATA_CFUNC(a, b) (((a) && DATA_ISBOOL(a)) ? (b) : CGRAPH_LX)

#define DATA_EQ(a, b) ((a) == (b))
#define DATA_NE(a, b) ((a) != (b))

#define EQ(a, b) (DATA_ISBOOL2V(a, b) ? BOOLEAN_EQ(a, b) : CGRAPH_LX)
#define NE(a, b) (DATA_ISBOOL2V(a, b) ? BOOLEAN_NE(a, b) : CGRAPH_LX)
#define GT(a, b) (DATA_ISBOOL2V(a, b) ? BOOLEAN_GT(a, b) : CGRAPH_LX)
#define GE(a, b) (DATA_ISBOOL2V(a, b) ? BOOLEAN_GE(a, b) : CGRAPH_LX)
#define LT(a, b) (DATA_ISBOOL2V(a, b) ? BOOLEAN_LT(a, b) : CGRAPH_LX)
#define LE(a, b) (DATA_ISBOOL2V(a, b) ? BOOLEAN_LE(a, b) : CGRAPH_LX)

#define AND(a, b) (DATA_ISBOOL2V(a, b) ? BOOLEAN_AND(a, b) : CGRAPH_LX)
#define NAND(a, b) (DATA_ISBOOL2V(a, b) ? BOOLEAN_NAND(a, b) : CGRAPH_LX)
#define ANDN(a, b) (DATA_ISBOOL2V(a, b) ? BOOLEAN_ANDN(a, b) : CGRAPH_LX)
#define OR(a, b) (DATA_ISBOOL2V(a, b) ? BOOLEAN_OR(a, b) : CGRAPH_LX)
#define NOR(a, b) (DATA_ISBOOL2V(a, b) ? BOOLEAN_NOR(a, b) : CGRAPH_LX)
#define ORN(a, b) (DATA_ISBOOL2V(a, b) ? BOOLEAN_ORN(a, b) : CGRAPH_LX)
#define ABS(a) (DATA_ISBOOL(a) ? BOOLEAN_ABS(a) : CGRAPH_LX)
#define NOT(a) (DATA_ISBOOL(a) ? BOOLEAN_NOT(a) : CGRAPH_LX)
#define XOR(a, b) (DATA_ISBOOL2V(a, b) ? BOOLEAN_XOR(a, b) : CGRAPH_LX)
#define XNOR(a, b) (DATA_ISBOOL2V(a, b) ? BOOLEAN_XNOR(a, b) : CGRAPH_LX)

#define ADD(a, b) (DATA_ISBOOL2V(a, b) ? BOOLEAN_AND(a, b) : CGRAPH_LX)
#define SUB(a, b) (DATA_ISBOOL2V(a, b) ? BOOLEAN_ANDN(a, b) : CGRAPH_LX)
#define MUL(a, b) (DATA_ISBOOL2V(a, b) ? BOOLEAN_AND(a, b) : CGRAPH_LX)
#define DIV(a, b)                                                              \
  (DATA_ISBOOL2V(a, b) ? (BOOLEAN_ABS(b) ? BOOLEAN_ABS(a) : CGRAPH_FALSE)      \
                       : CGRAPH_LX)
#define DIVF(a, b) DIV(a, b)
#define INT(a, b) (DATA_ISBOOL2V(a, b) ? BOOLEAN_AND(a, b) : CGRAPH_LX)
#define MOD(a, b)                                                              \
  (DATA_ISBOOL2V(a, b) ? (BOOLEAN_ANDN((a), BOOLEAN_AND(a, b))) : CGRAPH_LX)

#define SIGNBIT(a) ABS(a)
#define CEIL(a, b) (DATA_ISBOOL2V(a, b) ? BOOLEAN_ABS((a)) : CGRAPH_LX)
#define FLOOR(a, b) (DATA_ISBOOL2V(a, b) ? BOOLEAN_ABS((a)) : CGRAPH_LX)
#define POW(a, b)                                                              \
  (DATA_ISBOOL2V(a, b) ? (BOOLEAN_NOT(a) && BOOLEAN_ABS(b)) : CGRAPH_LX)
#define SIN(a, b) (DATA_ISBOOL2V(a, b) ? sin((a)) : CGRAPH_LX)
#define COS(a, b) (DATA_ISBOOL2V(a, b) ? cos((a)) : CGRAPH_LX)
#define TAN(a, b) (DATA_ISBOOL2V(a, b) ? tan((a)) : CGRAPH_LX)
#define ASIN(a, b) (DATA_ISBOOL2V(a, b) ? asin((a)) : CGRAPH_LX)
#define ACOS(a, b) (DATA_ISBOOL2V(a, b) ? acos((a)) : CGRAPH_LX)
#define ATAN(a, b) (DATA_ISBOOL2V(a, b) ? atan2((a)) : CGRAPH_LX)
#define SINH(a, b) (DATA_ISBOOL2V(a, b) ? sinh((a)) : CGRAPH_LX)
#define COSH(a, b) (DATA_ISBOOL2V(a, b) ? cosh((a)) : CGRAPH_LX)
#define TANH(a, b) (DATA_ISBOOL2V(a, b) ? tanh((a)) : CGRAPH_LX)
#define LOG(a, b) (DATA_ISBOOL2V(a, b) ? log((a)) : CGRAPH_LX)
#define LOG2(a, b) (DATA_ISBOOL2V(a, b) ? (log((a)) / log(2.0)) : CGRAPH_LX)
#define LOG10(a, b) (DATA_ISBOOL2V(a, b) ? log10((a)) : CGRAPH_LX)
#define EXP(a, b) (DATA_ISBOOL2V(a, b) ? exp((a)) : CGRAPH_LX)
#define SQRT(a, b) (DATA_ISBOOL2V(a, b) ? (a) : CGRAPH_LX)
#define CUBE(a, b) (DATA_ISBOOL2V(a, b) ? (a) : CGRAPH_LX)

#elif defined(TYPE_INT) || defined(TYPE_LONG) || defined(TYPE_INT8) ||         \
    defined(TYPE_INT16) || defined(TYPE_INT32) || defined(TYPE_INT64) ||       \
    defined(TYPE_INT128)
#define DATA_TEST(a) ((DATA_MIN != (a)) && (DATA_MAX != (a)))
#define DATA_TOBOOL(a) ((a)&CGRAPH_BOOL_MASK)
#define DATA_TOLOGIC(a) ((a)&CGRAPH_BOOL_MASK)
#define DATA_ISBOOL(a) (!((~CGRAPH_BOOL_MASK) & (a)))
#define DATA_ISLOGIC(a) (!((~CGRAPH_BOOL_MASK) & (a)))

#define EQ(a, b) ((a) == (b))
#define NE(a, b) ((a) != (b))
#define GT(a, b) ((a) > (b))
#define GE(a, b) ((a) >= (b))
#define LT(a, b) ((a) < (b))
#define LE(a, b) ((a) <= (b))

#define AND(a, b) CGRAPH_AND(a, b)
#define OR(a, b) CGRAPH_OR(a, b)
#define NOT(a) CGRAPH_NOT(a)
#define XOR(a, b) CGRAPH_XOR(a, b)
#define XNOR(a, b) CGRAPH_XNOR(a, b)

#define ADD(a, b) ((a) + (b))
#define SUB(a, b) ((a) - (b))
#define MUL(a, b) ((a) * (b))
#define DIV(a, b) ((a) / (b))
#define DIVF(a, b) (1.0 * (a) / (b))
#define INT(a, b) ((a) / (b))
#define MOD(a, b) ((a) % (b))

#define SIGNBIT(a) ((((UTYPE)(a)) >> (BITS - 1)) & MSB)
#define CEIL(a) CGRAPH_ABS(a)
#define FLOOR(a) CGRAPH_ABS(a)
#define POW(a, b) pow((a), (b))
#define ABS(a) CGRAPH_ABS((a))
#define SIN(a) sin((a))
#define COS(a) cos((a))
#define TAN(a) tan((a))
#define ASIN(a) asin((a))
#define ACOS(a) acos((a))
#define ATAN(a) atan2((a))
#define SINH(a) sinh((a))
#define COSH(a) cosh((a))
#define TANH(a) tanh((a))
#define LOG(a) log((a))
#define LOG2(a) (log((a)) / log(2.0))
#define LOG10(a) log10((a))
#define EXP(a) exp((a))
#define SQRT(a) FUNCTION(NAME, sqrt_s)((a))
#define CUBE(a) FUNCTION(NAME, cube_s)((a))
#endif

#include "cgraph_template_data.ht"

extern UTYPE FUNCTION(NAME, urand)(void);

extern TYPE *FUNCTION(NAME, initargs)(TYPE *cthis, const cgraph_size_t size,
                                      const TYPE first, ...);

extern TYPE FUNCTION(NAME, gcd)(const TYPE x, const TYPE y);
extern TYPE FUNCTION(NAME, lcm)(const TYPE x, const TYPE y);
extern TYPE FUNCTION(NAME, mod2)(const TYPE x, const TYPE y);
extern TYPE FUNCTION(NAME, ceil2x)(const TYPE x, const TYPE y);
extern TYPE FUNCTION(NAME, floor2x)(const TYPE x, const TYPE y);
extern cgraph_size_t FUNCTION(NAME, bitlen)(const cgraph_size_t bits);
extern cgraph_size_t FUNCTION(NAME, bitceil)(const cgraph_size_t bits);
extern cgraph_size_t FUNCTION(NAME, bitfloor)(const cgraph_size_t bits);
extern cgraph_size_t FUNCTION(NAME, bitmod)(const cgraph_size_t bits);
extern cgraph_size_t FUNCTION(NAME, ubitceil)(const cgraph_size_t bits);
extern cgraph_size_t FUNCTION(NAME, ubitfloor)(const cgraph_size_t bits);
extern cgraph_size_t FUNCTION(NAME, ubitmod)(const cgraph_size_t bits);

extern cgraph_bool_t FUNCTION(NAME, inrange)(const TYPE start, const TYPE end,
                                             const TYPE num);
extern cgraph_bool_t FUNCTION(NAME, in2ranges)(const TYPE start0,
                                               const TYPE end0,
                                               const TYPE start1,
                                               const TYPE end1, const TYPE num);
extern cgraph_bool_t FUNCTION(NAME,
                              in3ranges)(const TYPE start0, const TYPE end0,
                                         const TYPE start1, const TYPE end1,
                                         const TYPE start2, const TYPE end2,
                                         const TYPE num);
extern cgraph_size_t FUNCTION(NAME, startswith0)(const TYPE x);
extern cgraph_size_t FUNCTION(NAME, startswith1)(const TYPE x);
extern cgraph_size_t FUNCTION(NAME, endswith0)(const TYPE x);
extern cgraph_size_t FUNCTION(NAME, endswith1)(const TYPE x);
extern cgraph_size_t FUNCTION(NAME, max0)(const TYPE x);
extern cgraph_size_t FUNCTION(NAME, max1)(const TYPE x);
extern cgraph_size_t FUNCTION(NAME, min0)(const TYPE x);
extern cgraph_size_t FUNCTION(NAME, min1)(const TYPE x);

extern cgraph_size_t FUNCTION(NAME, abitlen)(const UTYPE data);
extern UTYPE FUNCTION(NAME, and)(const UTYPE x, const UTYPE y);
extern UTYPE FUNCTION(NAME, or)(const UTYPE x, const UTYPE y);
extern UTYPE FUNCTION(NAME, not )(const UTYPE x);
extern UTYPE FUNCTION(NAME, xor)(const UTYPE x, const UTYPE y);
extern UTYPE FUNCTION(NAME, xnor)(const UTYPE x, const UTYPE y);
extern UTYPE FUNCTION(NAME, rotl)(const UTYPE x, const cgraph_size_t bits);
extern UTYPE FUNCTION(NAME, rotr)(const UTYPE x, const cgraph_size_t bits);
extern UTYPE FUNCTION(NAME, bit)(const UTYPE x, const cgraph_size_t position);
extern UTYPE FUNCTION(NAME, set)(const UTYPE x, const cgraph_size_t position);
extern UTYPE FUNCTION(NAME, clr)(const UTYPE x, const cgraph_size_t position);
extern UTYPE FUNCTION(NAME, bits)(const UTYPE x, const cgraph_size_t from,
                                  const cgraph_size_t to);
extern UTYPE FUNCTION(NAME, sets)(const UTYPE x, const cgraph_size_t from,
                                  const cgraph_size_t to);
extern UTYPE FUNCTION(NAME, clrs)(const UTYPE x, const cgraph_size_t from,
                                  const cgraph_size_t to);
extern UTYPE FUNCTION(NAME, swapbit)(const UTYPE x);
extern UTYPE FUNCTION(NAME, swapbyte)(const UTYPE x);
extern UTYPE FUNCTION(NAME, swaphfwd)(const UTYPE x);
extern UTYPE FUNCTION(NAME, swapword)(const UTYPE x);
extern cgraph_size_t FUNCTION(NAME, cntones)(const UTYPE x);
extern cgraph_size_t FUNCTION(NAME, cntzeros)(const UTYPE x);

extern UTYPE FUNCTION(NAME, lsfr)(const UTYPE data, const UTYPE poly);
extern UTYPE FUNCTION(NAME, crc)(const UTYPE predata, const UTYPE data,
                                 const UTYPE poly);

#include "cgraph_template_int_soft.ht"
