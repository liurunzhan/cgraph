/**
 * @file cgraph_template.ht
 * @brief the template apis of DATA TYPE and STRUCTURE TYPE
 * @author liurunzhan
 * @email liurunzhan@sina.com
 * @package cgraph
 * @version 0.0.0
 * @date 2021-03-31
 * @lisence GPL-3.0
 * @url https://github.com/liurunzhan/cgraph
 */

/**copyed memory size without pointer memory size */
#ifndef TYPE_WITH_DATA
#define COPY_SIZE (sizeof(TYPE))
#elif defined(TYPE_OBJECT) || defined(TYPE_HOBJECT) ||                         \
    defined(TYPE_GOBJECT) || defined(TYPE_MOBJECT) || defined(TYPE_M3OBJECT)
#define COPY_SIZE (sizeof(TYPE) - sizeof(DATA_TYPE *))
#elif ID <= CGRAPH_DTYPE_PTR_MAX
#define COPY_SIZE (sizeof(TYPE) - __TYPE_PTRSIZE * sizeof(DATA_TYPE *))
#else
#define COPY_SIZE (sizeof(TYPE) - 2 * sizeof(DATA_TYPE *))
#endif

#if defined(TYPE_TIME)

#elif defined(TYPE_COMPLEX)
#define DATA_EQ(a, b) (fabs((a) - (b)) < DATA_EPSILON)
#define DATA_NE(a, b) (fabs((a) - (b)) > DATA_EPSILON)
#define DATA_GR(a, b) (((a) - (b)) > DATA_EPSILON)
#define DATA_GE(a, b) (DATA_GR(a, b) || DATA_EQ(a, b))
#define DATA_LS(a, b) (((b) - (a)) > DATA_EPSILON)
#define DATA_LE(a, b) (DATA_LS(a, b) || DATA_EQ(a, b))

#if (__STDC_VERSION__ >= 199901L) && defined(_MATH_H__)
#define DATA_TEST(a) (isnormal(COMPLEX_REAL(a)) && isnormal(COMPLEX_IMAG(a)))
#define DATA_ISNAN(a) (isnan(COMPLEX_REAL(a)) || isnan(COMPLEX_IMAG(a)))
#define DATA_ISPINF(a)                                                         \
  ((0 < isinf(COMPLEX_REAL(a))) || (0 < isinf(COMPLEX_IMAG(a))))
#define DATA_ISNINF(a)                                                         \
  ((0 > isinf(COMPLEX_REAL(a))) || (0 > isinf(COMPLEX_IMAG(a))))
#define DATA_ISINF(a) ((!isinf(COMPLEX_REAL(a))) || (!isinf(COMPLEX_IMAG(a))))
#define DATA_ISPOS(a) (signbit(COMPLEX_REAL(a)) && signbit(COMPLEX_IMAG(a)))
#define DATA_ISNEG(a)                                                          \
  ((!signbit(COMPLEX_REAL(a))) && (!signbit(COMPLEX_IMAG(a))))
#else
#define DATA_TEST(a)                                                           \
  ((DATA_MIN < COMPLEX_REAL(a)) && (DATA_MAX > COMPLEX_REAL(a)) &&             \
   (DATA_MIN < COMPLEX_IMAG(a)) && (DATA_MAX > COMPLEX_IMAG(a)))
#define DATA_ISNAN(a)                                                          \
  ((COMPLEX_REAL(a) != COMPLEX_REAL(a)) || (COMPLEX_IMAG(a) != COMPLEX_IMAG(a)))
#define DATA_ISPINF(a)                                                         \
  ((DATA_MAX < COMPLEX_REAL(a)) || (DATA_MAX < COMPLEX_IMAG(a)))
#define DATA_ISNINF(a)                                                         \
  ((DATA_MIN > COMPLEX_REAL(a)) || (DATA_MIN > COMPLEX_IMAG(a)))
#define DATA_ISINF(a) (DATA_ISPINF(a) || DATA_ISNINF(a))
#define DATA_ISPOS(a)                                                          \
  (DATA_GR(COMPLEX_REAL(a), 0.0) && DATA_GR(COMPLEX_IMAG(a), 0.0))
#define DATA_ISNEG(a)                                                          \
  (DATA_LS(COMPLEX_REAL(a), 0.0) || DATA_LS(COMPLEX_IMAG(a), 0.0))
#endif

#define ADD(a, b, c)                                                           \
  FUNCTION(NAME, add)                                                          \
  ((a), (b))
#define SUB(a, b, c)                                                           \
  FUNCTION(NAME, sub)                                                          \
  ((a), (b))
#define MUL(a, b, c)                                                           \
  FUNCTION(NAME, mul)                                                          \
  ((a), (b))
#define DIV(a, b, c)                                                           \
  FUNCTION(NAME, mod)                                                          \
  ((a), (b))
#define DIVF(a, b, c)                                                          \
  FUNCTION(NAME, div)                                                          \
  ((a), (b))
#define INT(a, b, c)                                                           \
  FUNCTION(NAME, div)                                                          \
  ((a), (b))
#define MOD(a, b, c)                                                           \
  FUNCTION(NAME, mod)                                                          \
  ((a), (b))

#define EQ(a, b)                                                               \
  (DATA_EQ(COMPLEX_REAL(a), COMPLEX_REAL(b)) &&                                \
   DATA_EQ(COMPLEX_IMAG(a), COMPLEX_IMAG(b)))
#define NE(a, b)                                                               \
  (DATA_NE(COMPLEX_REAL(a), COMPLEX_REAL(b)) ||                                \
   DATA_NE(COMPLEX_IMAG(a), COMPLEX_IMAG(b)))
#define GR(a, b)                                                               \
  (DATA_GR(COMPLEX_REAL(a), COMPLEX_REAL(b)) ||                                \
   (DATA_EQ(COMPLEX_REAL(a), COMPLEX_REAL(b)) &&                               \
    DATA_GR(COMPLEX_IMAG(a), COMPLEX_IMAG(b))))
#define GE(a, b)                                                               \
  (DATA_GE(COMPLEX_REAL(a), COMPLEX_REAL(b)) ||                                \
   (DATA_EQ(COMPLEX_REAL(a), COMPLEX_REAL(b)) &&                               \
    DATA_GE(COMPLEX_IMAG(a), COMPLEX_IMAG(b))))
#define LS(a, b)                                                               \
  (DATA_LS(COMPLEX_REAL(a), COMPLEX_REAL(b)) ||                                \
   (DATA_EQ(COMPLEX_REAL(a), COMPLEX_REAL(b)) &&                               \
    DATA_LS(COMPLEX_IMAG(a), COMPLEX_IMAG(b))))
#define LE(a, b)                                                               \
  (DATA_LE(COMPLEX_REAL(a), COMPLEX_REAL(b)) ||                                \
   (DATA_EQ(COMPLEX_REAL(a), COMPLEX_REAL(b)) &&                               \
    DATA_LE(COMPLEX_IMAG(a), COMPLEX_IMAG(b))))

#define ABS(a) FUNCTION(NAME, abs)((a))
#define CEIL(a, b) FUNCTION(NAME, ceil)((a), (b))
#define FLOOR(a, b) FUNCTION(NAME, floor)((a), (b))
#define POW(a, b) FUNCTION(NAME, pow)((a), (b))
#define SIN(a, b) FUNCTION(NAME, sin)((a), (b))
#define COS(a, b) FUNCTION(NAME, cos)((a), (b))
#define TAN(a, b) FUNCTION(NAME, tan)((a), (b))
#define ASIN(a, b) FUNCTION(NAME, asin)((a), (b))
#define ACOS(a, b) FUNCTION(NAME, acos)((a), (b))
#define ATAN(a, b) FUNCTION(NAME, atan)((a), (b))
#define SINH(a, b) FUNCTION(NAME, sinh)((a), (b))
#define COSH(a, b) FUNCTION(NAME, cosh)((a), (b))
#define TANH(a, b) FUNCTION(NAME, tanh)((a), (b))
#define LOG(a, b) FUNCTION(NAME, log)((a), (b))
#define LOG2(a, b) FUNCTION(NAME, log2)((a), (b))
#define LOG10(a, b) FUNCTION(NAME, log10)((a), (b))
#define EXP(a, b) FUNCTION(NAME, exp)((a), (b))
#define SQRT(a, b) FUNCTION(NAME, sqrt)((a), (b))

#elif defined(TYPE_FRACTION)
#define DATA_TEST(a) ((0 != FRACTION_DEN(a)))
#define DATA_ISNAN(a) ((0 == FRACTION_DEN(a)) && (0 == FRACTION_NUM(a)))
#define DATA_ISPINF(a) ((0 == FRACTION_DEN(a)) && (0 < FRACTION_NUM(a)))
#define DATA_ISNINF(a) ((0 == FRACTION_DEN(a)) && (0 > FRACTION_NUM(a)))
#define DATA_ISINF(a) ((0 == FRACTION_DEN(a)) && (0 != FRACTION_NUM(a)))
#define DATA_ISPOS(a)                                                          \
  (((0 < FRACTION_DEN(a)) && (0 < FRACTION_NUM(a))) ||                         \
   ((0 > FRACTION_DEN(a)) && (0 > FRACTION_NUM(a))))
#define DATA_ISNEG(a)                                                          \
  (((0 < FRACTION_DEN(a)) && (0 > FRACTION_NUM(a))) ||                         \
   ((0 > FRACTION_DEN(a)) && (0 < FRACTION_NUM(a))))

#define ADD(a, b, c)                                                           \
  FUNCTION(NAME, add)                                                          \
  ((a), (b))
#define SUB(a, b, c)                                                           \
  FUNCTION(NAME, sub)                                                          \
  ((a), (b))
#define MUL(a, b, c)                                                           \
  FUNCTION(NAME, mul)                                                          \
  ((a), (b))
#define DIV(a, b, c)                                                           \
  FUNCTION(NAME, div)                                                          \
  ((a), (b))
#define DIVF(a, b, c)                                                          \
  FUNCTION(NAME, div)                                                          \
  ((a), (b))
#define INT(a, b, c)                                                           \
  FUNCTION(NAME, div)                                                          \
  ((a), (b))
#define MOD(a, b, c)                                                           \
  FUNCTION(NAME, div)                                                          \
  ((a), (b))

#define EQ(a, b)                                                               \
  ((FRACTION_NUM(a) == FRACTION_NUM(b)) && (FRACTION_DEN(a) == FRACTION_DEN(b)))
#define NE(a, b)                                                               \
  ((FRACTION_NUM(a) != FRACTION_NUM(b)) || (FRACTION_DEN(a) != FRACTION_DEN(b)))
#define GR(a, b)                                                               \
  ((FRACTION_NUM(a) * FRACTION_DEN(b)) > (FRACTION_NUM(b) * FRACTION_DEN(a)))
#define GE(a, b)                                                               \
  ((FRACTION_NUM(a) * FRACTION_DEN(b)) >= (FRACTION_NUM(b) * FRACTION_DEN(a)))
#define LS(a, b)                                                               \
  ((FRACTION_NUM(a) * FRACTION_DEN(b)) < (FRACTION_NUM(b) * FRACTION_DEN(a)))
#define LE(a, b)                                                               \
  ((FRACTION_NUM(a) * FRACTION_DEN(b)) <= (FRACTION_NUM(b) * FRACTION_DEN(a)))

#define ABS(a) FUNCTION(NAME, abs)((a))
#define CEIL(a, b) FUNCTION(NAME, ceil)((a), (b))
#define FLOOR(a, b) FUNCTION(NAME, floor)((a), (b))
#define POW(a, b) FUNCTION(NAME, pow)((a), (b))
#define SIN(a, b) FUNCTION(NAME, sin)((a), (b))
#define COS(a, b) FUNCTION(NAME, cos)((a), (b))
#define TAN(a, b) FUNCTION(NAME, tan)((a), (b))
#define ASIN(a, b) FUNCTION(NAME, asin)((a), (b))
#define ACOS(a, b) FUNCTION(NAME, acos)((a), (b))
#define ATAN(a, b) FUNCTION(NAME, atan)((a), (b))
#define SINH(a, b) FUNCTION(NAME, sinh)((a), (b))
#define COSH(a, b) FUNCTION(NAME, cosh)((a), (b))
#define TANH(a, b) FUNCTION(NAME, tanh)((a), (b))
#define LOG(a, b) FUNCTION(NAME, log)((a), (b))
#define LOG2(a, b) FUNCTION(NAME, log2)((a), (b))
#define LOG10(a, b) FUNCTION(NAME, log10)((a), (b))
#define EXP(a, b) FUNCTION(NAME, exp)((a), (b))
#define SQRT(a, b) FUNCTION(NAME, sqrt)((a), (b))

#elif defined(TYPE_BIGINT)

#define ADD(a, b, c)                                                           \
  FUNCTION(NAME, add)                                                          \
  ((a), (b), (c))
#define SUB(a, b, c)                                                           \
  FUNCTION(NAME, sub)                                                          \
  ((a), (b), (c))
#define MUL(a, b, c)                                                           \
  FUNCTION(NAME, mul)                                                          \
  ((a), (b), (c))
#define DIV(a, b, c)                                                           \
  FUNCTION(NAME, div)                                                          \
  ((a), (b), (c))
#define DIVF(a, b, c) __UNDEFINED
#define INT(a, b, c) __UNDEFINED
#define MOD(a, b, c) __UNDEFINED

#define EQ(a, b)                                                               \
  FUNCTION(NAME, eq)                                                           \
  ((a), (b))
#define NE(a, b) CGRAPH_NTEST(FUNCTION(NAME, eq)((a), (b)))
#define GR(a, b)                                                               \
  FUNCTION(NAME, gr)                                                           \
  ((a), (b))
#define GE(a, b) CGRAPH_NTEST(FUNCTION(NAME, gr)((b), (a)))
#define LS(a, b)                                                               \
  FUNCTION(NAME, gr)                                                           \
  ((b), (a))
#define LE(a, b) CGRAPH_NTEST(FUNCTION(NAME, gr)((a), (b)))

#define ABS(a) FUNCTION(NAME, abs)((a))
#define CEIL(a, b) FUNCTION(NAME, ceil)((a), (b))
#define FLOOR(a, b) FUNCTION(NAME, floor)((a), (b))
#define POW(a, b) FUNCTION(NAME, pow)((a), (b))
#define SIN(a, b) FUNCTION(NAME, sin)((a), (b))
#define COS(a, b) FUNCTION(NAME, cos)((a), (b))
#define TAN(a, b) FUNCTION(NAME, tan)((a), (b))
#define ASIN(a, b) FUNCTION(NAME, asin)((a), (b))
#define ACOS(a, b) FUNCTION(NAME, acos)((a), (b))
#define ATAN(a, b) FUNCTION(NAME, atan)((a), (b))
#define SINH(a, b) FUNCTION(NAME, sinh)((a), (b))
#define COSH(a, b) FUNCTION(NAME, cosh)((a), (b))
#define TANH(a, b) FUNCTION(NAME, tanh)((a), (b))
#define LOG(a, b) FUNCTION(NAME, log)((a), (b))
#define LOG2(a, b) FUNCTION(NAME, log2)((a), (b))
#define LOG10(a, b) FUNCTION(NAME, log10)((a), (b))
#define EXP(a, b) FUNCTION(NAME, exp)((a), (b))
#define SQRT(a, b) FUNCTION(NAME, sqrt)((a), (b))

#elif defined(TYPE_BIGNUM)

#define ADD(a, b, c)                                                           \
  FUNCTION(NAME, add)                                                          \
  ((a), (b), (c))
#define SUB(a, b, c)                                                           \
  FUNCTION(NAME, sub)                                                          \
  ((a), (b), (c))
#define MUL(a, b, c)                                                           \
  FUNCTION(NAME, mul)                                                          \
  ((a), (b), (c))
#define DIV(a, b, c)                                                           \
  FUNCTION(NAME, div)                                                          \
  ((a), (b), (c))
#define DIVF(a, b, c) __UNDEFINED
#define INT(a, b, c) __UNDEFINED
#define MOD(a, b, c) __UNDEFINED

#define EQ(a, b)                                                               \
  FUNCTION(NAME, eq)                                                           \
  ((a), (b))
#define NE(a, b) CGRAPH_NTEST(FUNCTION(NAME, eq)((a), (b)))
#define GR(a, b)                                                               \
  FUNCTION(NAME, gr)                                                           \
  ((a), (b))
#define GE(a, b) CGRAPH_NTEST(FUNCTION(NAME, gr)((b), (a)))
#define LS(a, b)                                                               \
  FUNCTION(NAME, gr)                                                           \
  ((b), (a))
#define LE(a, b) CGRAPH_NTEST(FUNCTION(NAME, gr)((a), (b)))

#define ABS(a) FUNCTION(NAME, abs)((a))
#define CEIL(a, b) FUNCTION(NAME, ceil)((a), (b))
#define FLOOR(a, b) FUNCTION(NAME, floor)((a), (b))
#define POW(a, b) FUNCTION(NAME, pow)((a), (b))
#define SIN(a, b) FUNCTION(NAME, sin)((a), (b))
#define COS(a, b) FUNCTION(NAME, cos)((a), (b))
#define TAN(a, b) FUNCTION(NAME, tan)((a), (b))
#define ASIN(a, b) FUNCTION(NAME, asin)((a), (b))
#define ACOS(a, b) FUNCTION(NAME, acos)((a), (b))
#define ATAN(a, b) FUNCTION(NAME, atan)((a), (b))
#define SINH(a, b) FUNCTION(NAME, sinh)((a), (b))
#define COSH(a, b) FUNCTION(NAME, cosh)((a), (b))
#define TANH(a, b) FUNCTION(NAME, tanh)((a), (b))
#define LOG(a, b) FUNCTION(NAME, log)((a), (b))
#define LOG2(a, b) FUNCTION(NAME, log2)((a), (b))
#define LOG10(a, b) FUNCTION(NAME, log10)((a), (b))
#define EXP(a, b) FUNCTION(NAME, exp)((a), (b))
#define SQRT(a, b) FUNCTION(NAME, sqrt)((a), (b))

#elif defined(TYPE_STRING)

#define ADD(a, b, c)                                                           \
  FUNCTION(NAME, add)                                                          \
  ((a), (b), (c))
#define SUB(a, b, c)                                                           \
  FUNCTION(NAME, sub)                                                          \
  ((a), (b), (c))
#define MUL(a, b, c)                                                           \
  FUNCTION(NAME, mul)                                                          \
  ((a), (b), (c))
#define DIV(a, b, c)                                                           \
  FUNCTION(NAME, div)                                                          \
  ((a), (b), (c))
#define DIVF(a, b, c) __UNDEFINED
#define INT(a, b, c) __UNDEFINED
#define MOD(a, b, c) __UNDEFINED

#define EQ(a, b)                                                               \
  FUNCTION(NAME, eq)                                                           \
  ((a), (b))
#define NE(a, b) CGRAPH_NTEST(FUNCTION(NAME, eq)((a), (b)))
#define GR(a, b)                                                               \
  FUNCTION(NAME, gr)                                                           \
  ((a), (b))
#define GE(a, b) CGRAPH_NTEST(FUNCTION(NAME, gr)((b), (a)))
#define LS(a, b)                                                               \
  FUNCTION(NAME, gr)                                                           \
  ((b), (a))
#define LE(a, b) CGRAPH_NTEST(FUNCTION(NAME, gr)((a), (b)))

#define ABS(a) FUNCTION(NAME, abs)((a))
#define CEIL(a, b) FUNCTION(NAME, ceil)((a), (b))
#define FLOOR(a, b) FUNCTION(NAME, floor)((a), (b))
#define POW(a, b) FUNCTION(NAME, pow)((a), (b))
#define SIN(a, b) FUNCTION(NAME, sin)((a), (b))
#define COS(a, b) FUNCTION(NAME, cos)((a), (b))
#define TAN(a, b) FUNCTION(NAME, tan)((a), (b))
#define ASIN(a, b) FUNCTION(NAME, asin)((a), (b))
#define ACOS(a, b) FUNCTION(NAME, acos)((a), (b))
#define ATAN(a, b) FUNCTION(NAME, atan)((a), (b))
#define SINH(a, b) FUNCTION(NAME, sinh)((a), (b))
#define COSH(a, b) FUNCTION(NAME, cosh)((a), (b))
#define TANH(a, b) FUNCTION(NAME, tanh)((a), (b))
#define LOG(a, b) FUNCTION(NAME, log)((a), (b))
#define LOG2(a, b) FUNCTION(NAME, log2)((a), (b))
#define LOG10(a, b) FUNCTION(NAME, log10)((a), (b))
#define EXP(a, b) FUNCTION(NAME, exp)((a), (b))
#define SQRT(a, b) FUNCTION(NAME, sqrt)((a), (b))

#elif defined(TYPE_BITSET)

#define ADD(a, b, c)                                                           \
  FUNCTION(NAME, add)                                                          \
  ((a), (b), (c))
#define SUB(a, b, c)                                                           \
  FUNCTION(NAME, sub)                                                          \
  ((a), (b), (c))
#define MUL(a, b, c)                                                           \
  FUNCTION(NAME, mul)                                                          \
  ((a), (b), (c))
#define DIV(a, b, c)                                                           \
  FUNCTION(NAME, div)                                                          \
  ((a), (b), (c))
#define DIVF(a, b, c) __UNDEFINED
#define INT(a, b, c) __UNDEFINED
#define MOD(a, b, c) __UNDEFINED

#define EQ(a, b)                                                               \
  FUNCTION(NAME, eq)                                                           \
  ((a), (b))
#define NE(a, b) CGRAPH_NTEST(FUNCTION(NAME, eq)((a), (b)))
#define GR(a, b)                                                               \
  FUNCTION(NAME, gr)                                                           \
  ((a), (b))
#define GE(a, b) CGRAPH_NTEST(FUNCTION(NAME, gr)((b), (a)))
#define LS(a, b)                                                               \
  FUNCTION(NAME, gr)                                                           \
  ((b), (a))
#define LE(a, b) CGRAPH_NTEST(FUNCTION(NAME, gr)((a), (b)))

#define ABS(a) FUNCTION(NAME, abs)((a))
#define CEIL(a, b) FUNCTION(NAME, ceil)((a), (b))
#define FLOOR(a, b) FUNCTION(NAME, floor)((a), (b))
#define POW(a, b) FUNCTION(NAME, pow)((a), (b))
#define SIN(a, b) FUNCTION(NAME, sin)((a), (b))
#define COS(a, b) FUNCTION(NAME, cos)((a), (b))
#define TAN(a, b) FUNCTION(NAME, tan)((a), (b))
#define ASIN(a, b) FUNCTION(NAME, asin)((a), (b))
#define ACOS(a, b) FUNCTION(NAME, acos)((a), (b))
#define ATAN(a, b) FUNCTION(NAME, atan)((a), (b))
#define SINH(a, b) FUNCTION(NAME, sinh)((a), (b))
#define COSH(a, b) FUNCTION(NAME, cosh)((a), (b))
#define TANH(a, b) FUNCTION(NAME, tanh)((a), (b))
#define LOG(a, b) FUNCTION(NAME, log)((a), (b))
#define LOG2(a, b) FUNCTION(NAME, log2)((a), (b))
#define LOG10(a, b) FUNCTION(NAME, log10)((a), (b))
#define EXP(a, b) FUNCTION(NAME, exp)((a), (b))
#define SQRT(a, b) FUNCTION(NAME, sqrt)((a), (b))

#elif defined(TYPE_VECTOR) || defined(TYPE_MATRIX) || defined(TYPE_BIGMAT) ||  \
    defined(TYPE_SPAMAT) || defined(TYPE_MATRIX3D) ||                          \
    defined(TYPE_BIGMAT3D) || defined(TYPE_SPAMAT3D) ||                        \
    defined(TYPE_DFRAME) || defined(TYPE_DICT) || defined(TYPE_SET) ||         \
    defined(TYPE_LIST) || defined(TYPE_QUEUE) || defined(TYPE_STACK) ||        \
    defined(TYPE_TREE)

#if defined(CGRAPH_OBJECT)
#define OBJECT(type, opt) CGRAPH_OBJECT(type, opt)
#elif defined(CGRAPH_HOBJECT)
#define OBJECT(type, opt) CGRAPH_HOBJECT(type, opt)
#elif defined(CGRAPH_MOBJECT)
#define OBJECT(type, opt) CGRAPH_MOBJECT(type, opt)
#elif defined(CGRAPH_M3OBJECT)
#define OBJECT(type, opt) CGRAPH_M3OBJECT(type, opt)
#endif

#define ADD(a, b, c) __UNDEFINED
#define SUB(a, b, c) __UNDEFINED
#define MUL(a, b, c) __UNDEFINED
#define DIV(a, b, c) __UNDEFINED
#define DIVF(a, b, c) __UNDEFINED
#define INT(a, b, c) __UNDEFINED
#define MOD(a, b, c) __UNDEFINED

#define EQ(a, b) __UNDEFINED
#define NE(a, b) __UNDEFINED
#define GR(a, b) __UNDEFINED
#define GE(a, b) __UNDEFINED
#define LS(a, b) __UNDEFINED
#define LE(a, b) __UNDEFINED
#endif

#ifdef TYPE_WITH_DATA

#define ASSIGN(a, b)                                                           \
  FUNCTION(NAME, init)                                                         \
  ((a), (b), -1)

#define SWAP(a, b)                                                             \
  do {                                                                         \
    TYPE *tmp = (a);                                                           \
    (a) = (b);                                                                 \
    (b) = tmp;                                                                 \
  } while (0)
#define ROL3(a, b, c)                                                          \
  do {                                                                         \
    TYPE *tmp = (a);                                                           \
    (a) = (b);                                                                 \
    (b) = (c);                                                                 \
    (c) = tmp;                                                                 \
  } while (0)
#define ROR3(a, b, c)                                                          \
  do {                                                                         \
    TYPE *tmp = (c);                                                           \
    (c) = (b);                                                                 \
    (b) = (a);                                                                 \
    (a) = tmp;                                                                 \
  } while (0)
#define ROL4(a, b, c, d)                                                       \
  do {                                                                         \
    TYPE *tmp = (a);                                                           \
    (a) = (b);                                                                 \
    (b) = (c);                                                                 \
    (c) = (d);                                                                 \
    (d) = tmp;                                                                 \
  } while (0)
#define ROR4(a, b, c, d)                                                       \
  do {                                                                         \
    TYPE *tmp = (d);                                                           \
    (d) = (c);                                                                 \
    (c) = (b);                                                                 \
    (b) = (a);                                                                 \
    (a) = tmp;                                                                 \
  } while (0)

#define DATA_SWAP(a, b)                                                        \
  do {                                                                         \
    DATA_TYPE tmp = (a);                                                       \
    (a) = (b);                                                                 \
    (b) = tmp;                                                                 \
  } while (0)

#else

#define ASSIGN(a, b) (b)

#define SWAP(a, b)                                                             \
  do {                                                                         \
    TYPE tmp = a;                                                              \
    a = b;                                                                     \
    b = tmp;                                                                   \
  } while (0)
#define ROL3(a, b, c)                                                          \
  do {                                                                         \
    TYPE tmp = (a);                                                            \
    (a) = (b);                                                                 \
    (b) = (c);                                                                 \
    (c) = tmp;                                                                 \
  } while (0)
#define ROR3(a, b, c)                                                          \
  do {                                                                         \
    TYPE tmp = (c);                                                            \
    (c) = (b);                                                                 \
    (b) = (a);                                                                 \
    (a) = tmp;                                                                 \
  } while (0)
#define ROL4(a, b, c, d)                                                       \
  do {                                                                         \
    TYPE tmp = (a);                                                            \
    (a) = (b);                                                                 \
    (b) = (c);                                                                 \
    (c) = (d);                                                                 \
    (d) = tmp;                                                                 \
  } while (0)
#define ROR4(a, b, c, d)                                                       \
  do {                                                                         \
    TYPE tmp = (d);                                                            \
    (d) = (c);                                                                 \
    (c) = (b);                                                                 \
    (b) = (a);                                                                 \
    (a) = tmp;                                                                 \
  } while (0)

#endif

extern cgraph_vtable_t STRUCT(NAME);

extern cgraph_type_t FUNCTION(NAME, tid)(void);
extern cgraph_char_t *FUNCTION(NAME, tname)(void);
extern cgraph_size_t FUNCTION(NAME, tsize)(void);
extern cgraph_size_t FUNCTION(NAME, tptrsize)(void);
extern cgraph_size_t FUNCTION(NAME, tcpysize)(void);
extern cgraph_size_t FUNCTION(NAME, tstrusize)(void);
extern cgraph_size_t FUNCTION(NAME, tbmatsize)(void);
extern cgraph_size_t FUNCTION(NAME, tbmat3dsize)(void);
extern cgraph_size_t FUNCTION(NAME, tdatsize)(void);
extern cgraph_bool_t FUNCTION(NAME, thasdata)(void);

extern cgraph_size_t FUNCTION(NAME, len)(const TYPE *cthis);
extern cgraph_size_t FUNCTION(NAME, size)(const TYPE *cthis);
extern cgraph_size_t FUNCTION(NAME, msize)(const cgraph_type_t type,
                                           const cgraph_size_t size);

extern TYPE *FUNCTION(NAME, calloc)(const cgraph_type_t type,
                                    const cgraph_size_t size);
extern TYPE *FUNCTION(NAME, realloc)(TYPE *cthis, const cgraph_type_t type,
                                     const cgraph_size_t old_size,
                                     cgraph_size_t new_size,
                                     cgraph_bool_t *error);
extern TYPE *FUNCTION(NAME, copy)(const TYPE *cthis, const cgraph_size_t size);
extern void FUNCTION(NAME, free)(TYPE *cthis);

extern TYPE *FUNCTION(NAME, memcpy)(TYPE *x, const TYPE *y,
                                    const cgraph_size_t size);

#ifdef TYPE_WITH_DATA
extern DATA_TYPE *FUNCTION(NAME, data)(const TYPE *cthis);
extern TYPE *FUNCTION(NAME, init)(TYPE *cthis, const TYPE *data,
                                  const cgraph_size_t size);
extern TYPE *FUNCTION(NAME, initdt)(TYPE *cthis, const DATA_TYPE *data,
                                    const cgraph_size_t size);

extern cgraph_bool_t FUNCTION(NAME, isempty)(const TYPE *cthis);
extern cgraph_bool_t FUNCTION(NAME, isnumber)(const TYPE *cthis);

extern cgraph_size_t FUNCTION(NAME, hash)(const TYPE *cthis);
extern cgraph_bool_t FUNCTION(NAME, equal)(const TYPE *x, const TYPE *y);
extern cgraph_bool_t FUNCTION(NAME, check)(const TYPE *cthis);

extern TYPE **FUNCTION(NAME, for1v)(TYPE **x, const cgraph_size_t len,
                                    void (*func)(void *x));
extern TYPE **FUNCTION(NAME, for2v)(const TYPE **x, TYPE **y,
                                    const cgraph_size_t len,
                                    void (*func)(void *x, void *y));
extern TYPE *FUNCTION(NAME, for2vc)(const TYPE **x, TYPE *y,
                                    const cgraph_size_t len,
                                    void (*func)(void *x, void *y));
extern TYPE **FUNCTION(NAME, for3v)(const TYPE **x, const TYPE **y, TYPE **z,
                                    const cgraph_size_t len,
                                    void (*func)(void *x, void *y, void *res));
extern TYPE **FUNCTION(NAME,
                       for3vcv)(const TYPE **x, const TYPE *y, TYPE **z,
                                const cgraph_size_t len,
                                void (*func)(void *x, void *y, void *res));
extern TYPE *FUNCTION(NAME, for3vvc)(const TYPE **x, const TYPE **y, TYPE *z,
                                     const cgraph_size_t len,
                                     void (*func)(void *x, void *y, void *res));
extern TYPE *FUNCTION(NAME, for3cvc)(const TYPE *x, const TYPE **y, TYPE *z,
                                     const cgraph_size_t len,
                                     void (*func)(void *x, void *y, void *res));
#else
extern TYPE *FUNCTION(NAME, data)(const TYPE *cthis);
extern TYPE *FUNCTION(NAME, init)(TYPE *cthis, const TYPE *data,
                                  const cgraph_size_t size);
extern TYPE *FUNCTION(NAME, initdt)(TYPE *cthis, const TYPE *data,
                                    const cgraph_size_t size);

extern cgraph_bool_t FUNCTION(NAME, isempty)(const TYPE cthis);
extern cgraph_bool_t FUNCTION(NAME, isnumber)(const TYPE cthis);

extern cgraph_size_t FUNCTION(NAME, hash)(const TYPE cthis);
extern cgraph_bool_t FUNCTION(NAME, equal)(const TYPE x, const TYPE y);
extern cgraph_bool_t FUNCTION(NAME, check)(const TYPE cthis);

extern TYPE *FUNCTION(NAME, for1v)(TYPE *x, const cgraph_size_t len,
                                   void (*func)(void *x));
extern TYPE *FUNCTION(NAME, for2v)(const TYPE *x, TYPE *y,
                                   const cgraph_size_t len,
                                   void (*func)(void *x, void *y));
extern TYPE FUNCTION(NAME, for2vc)(const TYPE *x, TYPE y,
                                   const cgraph_size_t len,
                                   void (*func)(void *x, void *y));
extern TYPE *FUNCTION(NAME, for3v)(const TYPE *x, const TYPE *y, TYPE *z,
                                   const cgraph_size_t len,
                                   void (*func)(void *x, void *y, void *res));
extern TYPE *FUNCTION(NAME, for3vcv)(const TYPE *x, const TYPE y, TYPE *z,
                                     const cgraph_size_t len,
                                     void (*func)(void *x, void *y, void *res));
extern TYPE FUNCTION(NAME, for3vvc)(const TYPE *x, const TYPE *y, TYPE z,
                                    const cgraph_size_t len,
                                    void (*func)(void *x, void *y, void *res));
extern TYPE FUNCTION(NAME, for3cvc)(const TYPE x, const TYPE *y, TYPE z,
                                    const cgraph_size_t len,
                                    void (*func)(void *x, void *y, void *res));
#endif
