/**
 * @file cgraph_template_float.ht
 * @brief the template apis of float point number
 * @author liurunzhan
 * @email liurunzhan@sina.com
 * @package cgraph
 * @version 0.0.0
 * @date 2021-03-31
 * @lisence GPL-3.0
 */

#if defined(TYPE_FLOAT32) || defined(TYPE_FLOAT64) || defined(TYPE_FLOAT128)
#if (__STDC_VERSION__ >= 199901L) && defined(_MATH_H__)
#define DATA_TEST(a) isnormal((a))
#define DATA_ISNAN(a) isnan((a))
#define DATA_ISPINF(a) (isinf((a)) > 0)
#define DATA_ISNINF(a) (isinf((a)) < 0)
#define DATA_ISINF(a) isinf((a))
#define DATA_ISPOS(a) signbit((a))
#define DATA_ISNEG(a) (!signbit((a)))
#else
#define DATA_TEST(a) ((MIN < (a)) && (MAX > (a)))
#define DATA_ISNAN(a) ((a) != (a))
#define DATA_ISPINF(a) (MAX < (a))
#define DATA_ISNINF(a) (MIN > (a))
#define DATA_ISINF(a) (DATA_ISPINF(a) || DATA_ISNINF(a))
#define DATA_ISPOS(a) (!FUNCTION(NAME, signbit)((a)))
#define DATA_ISNEG(a) FUNCTION(NAME, signbit)((a))
#endif /**__STDC_VERSION__ */

#define ADD(a, b, c) ((a) + (b))
#define SUB(a, b, c) ((a) - (b))
#define MUL(a, b, c) ((a) * (b))
#define DIV(a, b, c) ((a) / (b))
#define DIVF(a, b, c) ((a) / (b))
#define INT(a, b, c) FUNCTION(NAME, int)((a), (b))
#define FEXP(a) FUNCTION(NAME, fexp)((a))

#if defined(TYPE_FLOAT32) && (__STDC_VERSION__ >= 199901L)
#define TYPE_PTR TYPE
#define FREXP(a, b, c) frexpf((a), (b))
#define FMOD(a, b, c) fmodf((a), (b))
#define MODF(a, b, c) modff((a), (b))
#define MOD(a, b, c) fmodf((a), (b))

#define EQ(a, b) (fabsf((a) - (b)) < EPS)
#define NE(a, b) (fabsf((a) - (b)) > EPS)
#define GR(a, b) (((a) - (b)) > EPS)
#define GE(a, b) (((a) - (b)) > (-EPS))
#define LS(a, b) (((a) - (b)) < (-EPS))
#define LE(a, b) (((a) - (b)) < EPS)

#define CEIL(a) ceilf((a))
#define FLOOR(a) floorf((a))
#define POW(a, b) powf((a), (b))
#define ABS(a) fabsf((a))
#define SIN(a) sinf((a))
#define COS(a) cosf((a))
#define TAN(a) tanf((a))
#define ASIN(a) asinf((a))
#define ACOS(a) acosf((a))
#define ATAN(a) atan2f((a))
#define SINH(a) sinhf((a))
#define COSH(a) coshf((a))
#define TANH(a) tanhf((a))
#define LOG(a) logf((a))
#define LOG2(a) (logf((a)) / logf(2.0))
#define LOG10(a) log10f((a))
#define EXP(a) expf((a))
#define SQRT(a) sqrtf((a))
#elif defined(TYPE_FLOAT128) && defined(__WITH_FLOAT128_SIZE128)
#define TYPE_PTR TYPE
#define FREXP(a, b, c) frexpl((a), (b))
#define FMOD(a, b, c) fmodl((a), (b))
#define MODF(a, b, c) modfl((a), (b))
#define MOD(a, b, c) fmodl((a), (b))

#define EQ(a, b) (fabsl((a) - (b)) < EPS)
#define NE(a, b) (fabsl((a) - (b)) > EPS)
#define GR(a, b) (((a) - (b)) > EPS)
#define GE(a, b) (((a) - (b)) > (-EPS))
#define LS(a, b) (((a) - (b)) < (-EPS))
#define LE(a, b) (((a) - (b)) < EPS)

#define CEIL(a) ceill((a))
#define FLOOR(a) floorl((a))
#define POW(a, b) powl((a), (b))
#define ABS(a) fabsl((a))
#define SIN(a) sinl((a))
#define COS(a) cosl((a))
#define TAN(a) tanl((a))
#define ASIN(a) asinl((a))
#define ACOS(a) acosl((a))
#define ATAN(a) atan2l((a))
#define SINH(a) sinhl((a))
#define COSH(a) coshl((a))
#define TANH(a) tanhl((a))
#define LOG(a) logl((a))
#define LOG2(a) (logl((a)) / logl(2.0))
#define LOG10(a) log10l((a))
#define EXP(a) expl((a))
#define SQRT(a) sqrtl((a))
#else
#define TYPE_PTR ARG
#define FREXP(a, b, c) frexp((a), (b))
#define FMOD(a, b, c) fmod((a), (b))
#define MODF(a, b, c) modf((a), (b))
#define MOD(a, b, c) fmod((a), (b))

#define EQ(a, b) (fabs((a) - (b)) < EPS)
#define NE(a, b) (fabs((a) - (b)) > EPS)
#define GR(a, b) (((a) - (b)) > EPS)
#define GE(a, b) (((a) - (b)) > (-EPS))
#define LS(a, b) (((a) - (b)) < (-EPS))
#define LE(a, b) (((a) - (b)) < EPS)

#define CEIL(a) ceil((a))
#define FLOOR(a) floor((a))
#define POW(a, b) pow((a), (b))
#define ABS(a) fabs((a))
#define SIN(a) sin((a))
#define COS(a) cos((a))
#define TAN(a) tan((a))
#define ASIN(a) asin((a))
#define ACOS(a) acos((a))
#define ATAN(a) atan2((a))
#define SINH(a) sinh((a))
#define COSH(a) cosh((a))
#define TANH(a) tanh((a))
#define LOG(a) log((a))
#define LOG2(a) (log((a)) / log(2.0))
#define LOG10(a) log10((a))
#define EXP(a) exp((a))
#define SQRT(a) sqrt((a))
#endif
#endif

#include "cgraph_template_data.ht"

extern TYPE FUNCTION(NAME, sqrt)(const TYPE x);
extern TYPE FUNCTION(NAME, cube)(const TYPE x);
extern TYPE FUNCTION(NAME, exp)(const TYPE x);
extern TYPE FUNCTION(NAME, pi)(void);

extern cgraph_int_t FUNCTION(NAME, fexp)(const TYPE x);

extern TYPE FUNCTION(NAME, Eqt_binary_search)(const TYPE start, const TYPE end,
                                              FUNCPTR(NAME, pfunc1) func);
extern TYPE FUNCTION(NAME, Eqt_secant_method)(const TYPE start, const TYPE end,
                                              FUNCPTR(NAME, pfunc1) func);
extern TYPE FUNCTION(NAME, Eqt_inverse_interpolation)(const TYPE start,
                                                      const TYPE end,
                                                      FUNCPTR(NAME, pfunc1)
                                                          func);
extern TYPE FUNCTION(NAME, Eqt_fixed_point)(const TYPE x,
                                            FUNCPTR(NAME, pfunc1) func);
extern TYPE FUNCTION(NAME, Eqt_fixed_point_lambda)(const TYPE x,
                                                   const TYPE lambda,
                                                   FUNCPTR(NAME, pfunc1) func);

extern TYPE FUNCTION(NAME, Diff)(const TYPE x, const TYPE step,
                                 FUNCPTR(NAME, pfunc1) func);
extern TYPE FUNCTION(NAME,
                     Diff_runge_kutta_s4)(const TYPE x_start, const TYPE x_end,
                                          const TYPE y_start, const TYPE step,
                                          FUNCPTR(NAME, pfunc2) func);
extern TYPE FUNCTION(NAME, Diff_kutta_s4)(const TYPE x_start, const TYPE x_end,
                                          const TYPE y_start, const TYPE step,
                                          FUNCPTR(NAME, pfunc2) func);
extern TYPE FUNCTION(NAME, Int_range_trapezoidal)(const TYPE start,
                                                  const TYPE end,
                                                  const TYPE step,
                                                  FUNCPTR(NAME, pfunc1) func);
extern TYPE FUNCTION(NAME, Int_range_simpson)(const TYPE start, const TYPE end,
                                              const TYPE step,
                                              FUNCPTR(NAME, pfunc1) func);
extern TYPE FUNCTION(NAME, Int_range_simpson38)(const TYPE start,
                                                const TYPE end, const TYPE step,
                                                FUNCPTR(NAME, pfunc1) func);
extern TYPE FUNCTION(NAME, Int_range_cotes)(const TYPE start, const TYPE end,
                                            const TYPE step,
                                            FUNCPTR(NAME, pfunc1) func);

extern TYPE FUNCTION(NAME, logistic)(const TYPE x);
extern TYPE FUNCTION(NAME, gamma)(const TYPE x, const TYPE step);
extern TYPE FUNCTION(NAME, beta)(const TYPE x, const TYPE step);
